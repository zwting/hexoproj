{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/img/201705/2017-05-29_164226.png","path":"img/201705/2017-05-29_164226.png","modified":0,"renderable":0},{"_id":"source/img/201705/2017-05-30_001220.png","path":"img/201705/2017-05-30_001220.png","modified":0,"renderable":0},{"_id":"source/img/201705/2017-05-29_164227.png","path":"img/201705/2017-05-29_164227.png","modified":0,"renderable":0},{"_id":"source/img/201705/2017-05-29_184313.png","path":"img/201705/2017-05-29_184313.png","modified":0,"renderable":0},{"_id":"source/img/201705/dll-pic.png","path":"img/201705/dll-pic.png","modified":0,"renderable":0},{"_id":"source/img/201708/2017-08-24 5.29.50.png","path":"img/201708/2017-08-24 5.29.50.png","modified":0,"renderable":0},{"_id":"source/img/201708/2017-08-25 11.28.13.png","path":"img/201708/2017-08-25 11.28.13.png","modified":0,"renderable":0},{"_id":"source/img/201708/2017-08-29 5.38.28.png","path":"img/201708/2017-08-29 5.38.28.png","modified":0,"renderable":0},{"_id":"source/img/201708/2017-08-29 3.50.08.png","path":"img/201708/2017-08-29 3.50.08.png","modified":0,"renderable":0},{"_id":"source/img/201708/2017-08-25 2.19.10.png","path":"img/201708/2017-08-25 2.19.10.png","modified":0,"renderable":0},{"_id":"source/img/201705/2017-05-29_190301.png","path":"img/201705/2017-05-29_190301.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/fav_hd.png","path":"images/fav_hd.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon_16x16.png","path":"images/favicon_16x16.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon_32x32.png","path":"images/favicon_32x32.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"source/img/201708/2017-08-24 .png","path":"img/201708/2017-08-24 .png","modified":0,"renderable":0},{"_id":"source/img/201708/2017-08-24 3.48.18.png","path":"img/201708/2017-08-24 3.48.18.png","modified":0,"renderable":0},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/img/201805/2018-05-07_000536.png","path":"img/201805/2018-05-07_000536.png","modified":0,"renderable":0},{"_id":"source/img/201805/2018-05-07_002257.png","path":"img/201805/2018-05-07_002257.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"86b803144a4ae1fb086b2e749a598675e11fc26b","modified":1520212327990},{"_id":"source/robots.txt","hash":"5d6f306e189f25494d8437fa7a375b3d805e83ec","modified":1520212328003},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1514806389000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1514806389000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1514806389000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1514806389000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1514806389000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1514806389000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1514806389000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1514806389000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1514806389000},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1514806389000},{"_id":"source/.DS_Store","hash":"320bf3d498fae06e9e70a6faa729ddc46951b8f0","modified":1520212327990},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1514806389000},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1514806389000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1514806389000},{"_id":"themes/next/_config.yml","hash":"c6ef703c18fdfe2fb90ab2905b475bcf237966a2","modified":1520097489258},{"_id":"source/_posts/Git学习.md","hash":"be35e442fdbae9cb7b12dd54b5d7ff690544c8c6","modified":1520212327992},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1514806389000},{"_id":"source/_posts/OpenGL-Learn-1.md","hash":"8db9daaafe52fe45572a56b498e3bd348334f325","modified":1520212327992},{"_id":"source/_posts/mf3gpacg_1.md","hash":"9c77eb68b35d08b366cfc4ac3e94ca5549c535f4","modified":1520212327993},{"_id":"source/_posts/mf3gpacg-2.md","hash":"16ecdead207732ff0842a0bc433269d22f33a1e8","modified":1520212327993},{"_id":"source/_posts/Unity3D特定文件的打开方式.md","hash":"b03a549ababc2d71780e5287ffd9429edb0732f6","modified":1518271874262},{"_id":"source/_posts/游戏编程模式-阅读笔记.md","hash":"fcbc09fa2c9baf80d69574a16cac5a0f097810bb","modified":1520212327993},{"_id":"source/_posts/高数等价无穷小替换公式.md","hash":"12761b3da0a5291fa4a0e6b7b5f3165417d9b150","modified":1520006279178},{"_id":"source/categories/index.md","hash":"5b517668d1da226a8672f5f8358f470115819090","modified":1520096218213},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1514806389000},{"_id":"source/tags/index.md","hash":"4d54bd6d0e2661f4e022f73d0a1017eab9ff3937","modified":1520096195398},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1514806389000},{"_id":"source/_posts/Unity3D着色器学习-一.md","hash":"7e436f8e769bbbc9c704b44a960dceabaea89d67","modified":1527673168441},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1514806389000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1514806389000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1514806389000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1520212328259},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1514806389000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1514806389000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1514806389000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1514806389000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1514806389000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1514806389000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1514806389000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1514806389000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1514806389000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1514806389000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1514806389000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1514806389000},{"_id":"source/_posts/Unity3D-Shader学习-二-表面着色器结构.md","hash":"28b0c00e3df288bb0d7335bc99c8958fb054a855","modified":1529200780864},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1514806389000},{"_id":"source/_drafts/numberConvert.md","hash":"26543e1f637872f5dee45b0a1a82f18b01ef8114","modified":1520212327991},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1514806389000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1520155036029},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1514806389000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1514806389000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1514806389000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1514806389000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1514806389000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1514806389000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1514806389000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1514806389000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1514806389000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1514806389000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1514806389000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1514806389000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1514806389000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520212328345},{"_id":"source/img/201705/2017-05-29_164226.png","hash":"5c0e9fbe06aa762ed27c17cd87fc8b63701b48ae","modified":1520212327996},{"_id":"source/img/201705/2017-05-30_001220.png","hash":"e49b2d9ead5f764cbd9365c18409d36746b9dca9","modified":1520212327998},{"_id":"source/img/201705/2017-05-29_164227.png","hash":"85e5d3f10a3e17972091c31cbb380c33da7f1120","modified":1520212327996},{"_id":"source/img/201705/2017-05-29_184313.png","hash":"18beffca7ecccf4a07aefdb7e88eee566e0a9880","modified":1520212327997},{"_id":"source/img/201705/dll-pic.png","hash":"188b08612407e5b6ba61abc10b8cbd73d6fd3861","modified":1520212327998},{"_id":"source/img/201708/2017-08-24 5.29.50.png","hash":"2f619bd870d25948eabdbbcef8ba612c1f548f1b","modified":1520212328001},{"_id":"source/img/201708/2017-08-25 11.28.13.png","hash":"2f694128e4c880093bff8e2d36be0128378caba9","modified":1520212328001},{"_id":"source/img/201708/2017-08-29 5.38.28.png","hash":"5cf6191104056da08e0c4d7d255843e6e2f3352b","modified":1520212328003},{"_id":"source/img/201708/2017-08-29 3.50.08.png","hash":"e950923794e86be972a3c7dafa4b158ec2c52691","modified":1520212328002},{"_id":"source/img/201708/2017-08-25 2.19.10.png","hash":"411db3b323203c0ee55146016a5909a8369e92d2","modified":1520212328002},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514806389000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1514806389000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514806389000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1514806389000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1514806389000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1514806389000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1514806389000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1514806389000},{"_id":"source/img/201705/2017-05-29_190301.png","hash":"e3a82f3eb02a45331149a60f2138aa31dafa9e6d","modified":1520212327997},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1514806389000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1514806389000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1514806389000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1514806389000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1514806389000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1514806389000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"14588f4645f9cc4ce2e611938cc6be57b6c8c901","modified":1520155053597},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1514806389000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1514806389000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1514806389000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1514806389000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1514806389000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1514806389000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1514806389000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1514806389000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1514806389000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1514806389000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1514806389000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1514806389000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1514806389000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1514806389000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1514806389000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1514806389000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1514806389000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1514806389000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1514806389000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1514806389000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1514806389000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1520212328346},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1514806389000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1520212328346},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1514806389000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1520212328350},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1514806389000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1514806389000},{"_id":"themes/next/source/images/fav_hd.png","hash":"ad2ea701cac63c8473086fb81844e654338f9e5b","modified":1520212328349},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1520212328350},{"_id":"themes/next/source/images/favicon_16x16.png","hash":"c2518b22c5e9a8b1a2f6c06f74885c5c9a924680","modified":1520212328350},{"_id":"themes/next/source/images/favicon_32x32.png","hash":"1a54d7b8b729e841fe0ea0346924a4a4f73b54ed","modified":1520212328351},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1514806389000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1520212328351},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1520212328352},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1514806389000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1520212328351},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1514806389000},{"_id":"source/img/201708/2017-08-24 .png","hash":"11d302eda64fc1a91d4297a929f14bd3516a4061","modified":1520212327999},{"_id":"source/img/201708/2017-08-24 3.48.18.png","hash":"5f0b2b91fffdf09cf1aeccd498d3ded30d09f438","modified":1520212328000},{"_id":"themes/next/source/images/avatar.png","hash":"ad2ea701cac63c8473086fb81844e654338f9e5b","modified":1520212328346},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520212328282},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520212328282},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520212328334},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520212328333},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520212328333},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520212328343},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520212328344},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1514806389000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1514806389000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1514806389000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1514806389000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1514806389000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1514806389000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1514806389000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1514806389000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1514806389000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1514806389000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1514806389000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1514806389000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1514806389000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1514806389000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1514806389000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1514806389000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1520212328363},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1514806389000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1514806389000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1514806389000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1520212328366},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1514806389000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1514806389000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1514806389000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1514806389000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1520212328392},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1520212328393},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1520212328392},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1520212328395},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1520212328393},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1520212328394},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1520212328394},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1520212328395},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1520212328396},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1520212328395},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1520212328396},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1520212328393},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1520212328394},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1514806389000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1514806389000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514806389000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1520212328368},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1520212328368},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1520212328368},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1520212328369},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1520212328369},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1520212328369},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1520212328376},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1514806389000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1520212328386},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1520212328386},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1520212328359},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1520212328359},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1520212328360},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1520212328359},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1520212328360},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1520212328382},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1520212328385},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1520212328370},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1520212328380},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1514806389000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1514806389000},{"_id":"source/_posts/Python解密m3u8视频.md","hash":"b629767b06f25ea0bcd3898565dd56b33615e731","modified":1529200900190},{"_id":"source/img/201805/2018-05-07_000536.png","hash":"42ec1177f4eea46394bc9ab33d982c3642aad060","modified":1525622871342},{"_id":"source/img/201805/2018-05-07_002257.png","hash":"daf8fe904b3c86d2126a46b3795885acdfe5709d","modified":1525623994127},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1514806389000}],"Category":[],"Data":[],"Page":[{"title":"categories","date":"2018-03-03T16:37:35.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-03-04 00:37:35\ntype: \"categories\"\n---\n","updated":"2018-03-03T16:56:58.213Z","path":"categories/index.html","_id":"cjhu06jud0001fkqc6vl4ei4u","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-03-03T16:38:07.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-03-04 00:38:07\ntype: \"tags\"\n---\n","updated":"2018-03-03T16:56:35.398Z","path":"tags/index.html","_id":"cjhu06jug0003fkqcr644odwp","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Mathematics.for.3D.Game.Programming.and.Computer.Graphics阅读笔记(一)","date":"2017-08-24T06:08:28.000Z","_content":"## 第一章: 渲染管线\n\n### 写在前面的话: \n> 本文基本等同于翻译(加上自己的理解), 笔者英语水平有限, 难免会出现错误, 望高手在评论中指出, 谢谢!\n> 原书: [Mathematics for 3D Game Programming and Computer Graphics, Third Edition][1_booksite] \n\n### 一. 渲染管线\n#### 1.1 图形处理器\n一个3D图形场景通常包含了很多独立的对象.这些对象的几何形式通常是由一些特定类型的`图元`组成的.`图元`指的是顶点以怎样的方式连接构成了这种形状. 图1.1列出了 OpenGL图形库定义了10种图元. 图形硬件可以渲染一系列独立的点, 一些线段, 或者一组已经填充好了的多边形. 在大多数情况下, 3D模型的表面是由一些\u001b三角形构成的, 每一个三角形又是由顶点列表中的3个顶点组成.\n> ![图1.1, 来自原书截图](/img/201708/2017-08-24 .png)\n\n现代的3D图形\b卡通常会执行从CPU发出的一些指令, CPU想GPU发出渲染命令, 然后CPU会执行其他的任务, 而GPU会执行这些渲染操作. 这通常被称为***异步操作***. 当需要被渲染的图形信息被提交到渲染库(OpenGL等)的时候, 请求渲染操作的函数将会在渲染操作还未完成前很早就返回. 这些在一个渲染命令的子操作和渲染完成之间的滞后时间将不会产生什么问题, 但是在渲染完成的时刻是需要知道的. 幸运的是, 目前OpenGL的一些扩展可程序以在CPU中运行, 这些程序能够在GPU完成渲染的时候发出通知.但同时会带来性能损耗, 这种异步操作会拖慢3D图形程序的执行速度, 因此, 如果想要性能优先, 那么应该避免这些操作.\n\n那么应用程序和GPU的通信是怎么来进行呢? 通常是通过一些第三方的图形库来实现的, 比如OpenGL. 这些应用将会通过调用OpenGL API方式来向其发出渲染命令. 而OpenGL等图形库又向GPU驱动程序发送渲染命令, 这些驱动程序才知道怎样和GPU交流. OpenGL的这些接口我们称之为***Hardware Abstraction Layer(HAL) 硬件抽象层***, 因为它提供了一些通用的函数可以用来渲染场景, 这些函数可以在任何支持OpenGL架构的图形硬件上运行. 驱动程序将会把这些OpenGL的API转换成GPU可以执行的命令. 3D图形驱动程序通常会直接实现OpenGL函数以最小化渲染命令的开销. ***图1.2*** 展示了CPU和GPU之间的通信过程:\n>![图1.2 CPU和GPU之间的通信(来自原书截图)](/img/201708/2017-08-24 3.48.18.png)\n\n一个3D图形卡有自己的存储空间(显存), 通常被称为***VRAM (Video Random Access Memory)***. GPU可以在VRAM中存储任何东西, 当时在3D应用程序运行的时候, 有这么几类数据大多数总可以在显存中找到. VRAM中有两个图像缓冲区, 被称为前缓冲和后缓冲 (传说中的[***双缓冲***][2_double_swap]). 其中, `front image buffers` 包含了当前在可视区域内看到的每一个像素的数据. *可视区域* 指的就是包含了已经被渲染的图象数据的一个区域, 他可能是一个窗口, 也可能是整个屏幕; `back image buffer`是GPU真正渲染的场景的位置. `back buffer` 在渲染完成呈现给用户之前是不可见的. 一旦一个图像完成了渲染, `back buffer` 和 `front buffer` 将会交换数据. 这个操作被称为`缓冲交换`. 他可以通过以下几种方式来实现:\n> 1. 直接交换两个缓冲区的内存地址\n> 2. 将`back buffer`中的数据拷贝到`fornt buffer`中\n\n缓冲区交换通常和图像显示刷新率保持同步, 这是为了避免发生`画面撕裂现象`. `画面撕裂`通常由于在刷新期间发生了缓冲区交换, 这将会导致一副图像的上半部分和下半部分不同, 因为他们的数据分别来自`front buffer`和`back buffer`.\n\n还有一块存储在VRAM中的数据块被称为`Depth-buffer`或者`z-buffer`. `深度缓冲`存储的数据是图像缓冲中的每一个像素数据的`depth`,`depth`表明这个像素距离屏幕有多远或者这个像素位于图像中的哪个深度. `深度缓冲`通常用来隐藏或表面消除的功能, 它只绘制深度小于图像缓冲去深度的像素. `Depth`同时也表明了从被绘制的场景到虚拟相机(充当人眼的那个位置)的距离. 而`z-buffer`这个名字来自于相机的Z轴, 它是从相机的坐标空间射向屏幕的方向.\n随着`image buffer`和`depth buffer`的创建, 应用程序可能会请求`stencil buffer(模板缓冲区)`. `stencil buffer`包含了一个整型的遮罩, 这和`image buffer`中的每一个像素都是一一对应的, 他可以用来控制特定的像素是否被绘制. 更高级的`stencil buffer`可以用来产生实时阴影.\n大多数3D渲染应用程序中使用VRAM主要通过`Texture maps(纹理贴图)`, `texture maps`通常被用来附着到物体的表面以达到更好的视觉细节. 在高级渲染程序中, `texture maps`通常包含了比简单像素图像更多的信息. 例如: 一个[`bump map(凹凸贴图)`][3_bumpmap]包含的信息是一个个的向量, 这些向量表明了物体表面对应位置的倾斜程度. \n\n#### 1.2 向量变换\n\n几何数据以3维空间的形式传给了图形硬件. 接下来图形硬件需要做的就是就是将这些数据转换到2维空间的视口内. 在`rendering pipeline(渲染管线)` 过程中有很多与之相关联的坐标系统, 他们之间的转换过程如`图1.3`. 一个3D 模型的顶点通常存储在对象的`object space(模型坐标空间)`内, 这个坐标系统取决于特定的模型.每一个模型的位置通常被存储在`word space(世界坐标空间)`中, 这个坐标空间将所有的对象连接到一个全局的坐标空间中. 在每一个对象被渲染之前, 它的顶点必须被转换到`camera space(相机空间)`中, 这个坐标空间的x和y轴适合显示区域的x和y平行的. 模型的顶点是可以直接从`模型空间`转换到`相机空间`的,具体做法就是通过矩阵乘法将 `模型坐标`->`世界坐标`的变换矩阵M<sub>obj-word</sub> 和 `世界坐标`->`相机坐标`的变换矩阵M<sub>word-camera</sub> 连接起来,得到M<sub>obj-camera</sub>称之为 `model-view`变换.\n一旦模型的顶点被转换到了`相机空间`,他们会经历一个投影变换, 这个变换将会达到人眼视觉系统近大远小的视觉效果. 这个投影是通过四维空间其次坐标来完成的, 在这些顶点完成投影后的坐标空间被称为`homogeneous clip space(齐次裁剪空间)`, 之所以这么叫它, 是因为在这个坐标空间,图元会被裁剪在可视区域内,确保落在可视区域外面的图元不会被渲染.\n> ![图1.3(来自原书截图)](/img/201708/2017-08-24 5.29.50.png)\n\n在齐次坐标空间中, 每个顶点的坐标称为`normalized device coordinates(规格化设备坐标, 简称NDC)`, 这里出现了一个新的术语`normalized(规格化或标准化)`, 它的意思其实就是将每个顶点的x,y,z分量映射到[-1,1]区间内, 它表示顶点最终出现在`视口`中的位置. 顶点还要经历再一次的变换`viewport transformation(视口变换)`, 这个变换的结果其实就是最终顶点呈现在屏幕上的位置, `z分量`通常会被映射到[-1,1]区间内, 但是随后它会被缩放到深度缓冲所使用的每一个像素位对应的整型范围.最后, 顶点呈现在了我们的屏幕上.\n除了从`模型空间`转换到`屏幕空间`外, 图形处理器还会针对每一个顶点做一些运算.例如: OpenGL的光照模型将会计算到达每一个顶点的光照强度的该顶点反射颜色以及最终会有多少颜色会被反射进入人眼(相机的位置). 这中运算被称为`per-vertex lighting(逐顶点光照)`. 一些高级的3D程序会使用逐顶点光照处理, 这将会在物体表面产生很细腻的光照表现(像素级别的).\n每一个顶点还会携带一个甚至更多的`texture coordinates(纹理坐标)`. 通常情况下, `纹理坐标`是由应用程序明确指定的或者是GPU自动生成的. 图元在渲染的时候, 将会根据`纹理坐标`从对应的纹理中查询到对应的颜色值插入到图元对应的位置. 这些颜色和其他在每个像素被插入的颜色将会决定最终在视口中的显示效果.\n\n#### 1.3 光栅化和片元操作\n\n一旦模型的顶点完成了坐标转换最终呈现在了屏幕中, GPU必须决定这些在视口中的像素应该用什么样的图元来呈现. 水平扫描固定间隔的像素填充图元的处理过程叫做`raserization(光栅化)`. GPU计算每一个像素的深度, 插入顶点颜色和纹理坐标. 这些信息和像素本身的位置结合起来叫做`fragment(片元)`.\n图元到片元的转换如`图1.4`. 应用程序必须在这个过程的第一阶段决定是否进行`face culling(表面剔除)`.`表面剔除`只会对多边形图元生效, 它会移除背对着相机或者面对着相机的多边形图元. 但是大多数情况下,`表面剔除`被用来优化性能, 因为它会去除背对着相机的多边形, 这些不需要被渲染, 因为我们看不到它.\n> ![图1.4(来自原书截图)](/img/201708/2017-08-25 11.28.13.png)\n\n图形应用程序指定片元数据在光栅化过程中怎样来确实每一个像素的最终颜色和深度. 这个过程叫做`fragment shading 或者 pixel shading(片元着色)`. 最终的颜可可能是从纹理获取来的颜色和顶点插入的颜色的成绩, 也可能是复杂的逐顶点光照的结果. 最终的深度通常不会变化, 但是一些高级的3D图形硬件允许我们来按照自己的意愿替换最终计算的深度值. `图1.5`展示了在光栅化过程中每一个片元产生所执行的操作. 大部分操作都会决定一个图元最终绘制到屏幕上或者被丢弃. 从逻辑上来讲,虽然这些操作会在`片元着色`之后再进行, 但大多数GPU会在执行`片元着色`前进行一些测试, 这些测试能够带来一些性能和时间上的优势: 有一些最终根本不会被显示到屏幕上的图元将不会通过测试, 这就节省了不必要的性能开销和时间开销.\n> ![图1.5(来自原书截图)](/img/201708/2017-08-25 2.19.10.png)\n\n\n\n\n\n\n\n[1_booksite]: http://www.mathfor3dgameprogramming.com/\n[2_double_swap]: https://baike.baidu.com/item/%E5%8F%8C%E7%BC%93%E5%86%B2/10953356?fr=aladdin\n[3_bumpmap]: https://en.wikipedia.org/wiki/Bump_mapping","source":"_posts/mf3gpacg_1.md","raw":"---\ntitle: Mathematics.for.3D.Game.Programming.and.Computer.Graphics阅读笔记(一)\ndate: 2017-08-24 14:08:28\ntags: OpenGL, 图形学\n---\n## 第一章: 渲染管线\n\n### 写在前面的话: \n> 本文基本等同于翻译(加上自己的理解), 笔者英语水平有限, 难免会出现错误, 望高手在评论中指出, 谢谢!\n> 原书: [Mathematics for 3D Game Programming and Computer Graphics, Third Edition][1_booksite] \n\n### 一. 渲染管线\n#### 1.1 图形处理器\n一个3D图形场景通常包含了很多独立的对象.这些对象的几何形式通常是由一些特定类型的`图元`组成的.`图元`指的是顶点以怎样的方式连接构成了这种形状. 图1.1列出了 OpenGL图形库定义了10种图元. 图形硬件可以渲染一系列独立的点, 一些线段, 或者一组已经填充好了的多边形. 在大多数情况下, 3D模型的表面是由一些\u001b三角形构成的, 每一个三角形又是由顶点列表中的3个顶点组成.\n> ![图1.1, 来自原书截图](/img/201708/2017-08-24 .png)\n\n现代的3D图形\b卡通常会执行从CPU发出的一些指令, CPU想GPU发出渲染命令, 然后CPU会执行其他的任务, 而GPU会执行这些渲染操作. 这通常被称为***异步操作***. 当需要被渲染的图形信息被提交到渲染库(OpenGL等)的时候, 请求渲染操作的函数将会在渲染操作还未完成前很早就返回. 这些在一个渲染命令的子操作和渲染完成之间的滞后时间将不会产生什么问题, 但是在渲染完成的时刻是需要知道的. 幸运的是, 目前OpenGL的一些扩展可程序以在CPU中运行, 这些程序能够在GPU完成渲染的时候发出通知.但同时会带来性能损耗, 这种异步操作会拖慢3D图形程序的执行速度, 因此, 如果想要性能优先, 那么应该避免这些操作.\n\n那么应用程序和GPU的通信是怎么来进行呢? 通常是通过一些第三方的图形库来实现的, 比如OpenGL. 这些应用将会通过调用OpenGL API方式来向其发出渲染命令. 而OpenGL等图形库又向GPU驱动程序发送渲染命令, 这些驱动程序才知道怎样和GPU交流. OpenGL的这些接口我们称之为***Hardware Abstraction Layer(HAL) 硬件抽象层***, 因为它提供了一些通用的函数可以用来渲染场景, 这些函数可以在任何支持OpenGL架构的图形硬件上运行. 驱动程序将会把这些OpenGL的API转换成GPU可以执行的命令. 3D图形驱动程序通常会直接实现OpenGL函数以最小化渲染命令的开销. ***图1.2*** 展示了CPU和GPU之间的通信过程:\n>![图1.2 CPU和GPU之间的通信(来自原书截图)](/img/201708/2017-08-24 3.48.18.png)\n\n一个3D图形卡有自己的存储空间(显存), 通常被称为***VRAM (Video Random Access Memory)***. GPU可以在VRAM中存储任何东西, 当时在3D应用程序运行的时候, 有这么几类数据大多数总可以在显存中找到. VRAM中有两个图像缓冲区, 被称为前缓冲和后缓冲 (传说中的[***双缓冲***][2_double_swap]). 其中, `front image buffers` 包含了当前在可视区域内看到的每一个像素的数据. *可视区域* 指的就是包含了已经被渲染的图象数据的一个区域, 他可能是一个窗口, 也可能是整个屏幕; `back image buffer`是GPU真正渲染的场景的位置. `back buffer` 在渲染完成呈现给用户之前是不可见的. 一旦一个图像完成了渲染, `back buffer` 和 `front buffer` 将会交换数据. 这个操作被称为`缓冲交换`. 他可以通过以下几种方式来实现:\n> 1. 直接交换两个缓冲区的内存地址\n> 2. 将`back buffer`中的数据拷贝到`fornt buffer`中\n\n缓冲区交换通常和图像显示刷新率保持同步, 这是为了避免发生`画面撕裂现象`. `画面撕裂`通常由于在刷新期间发生了缓冲区交换, 这将会导致一副图像的上半部分和下半部分不同, 因为他们的数据分别来自`front buffer`和`back buffer`.\n\n还有一块存储在VRAM中的数据块被称为`Depth-buffer`或者`z-buffer`. `深度缓冲`存储的数据是图像缓冲中的每一个像素数据的`depth`,`depth`表明这个像素距离屏幕有多远或者这个像素位于图像中的哪个深度. `深度缓冲`通常用来隐藏或表面消除的功能, 它只绘制深度小于图像缓冲去深度的像素. `Depth`同时也表明了从被绘制的场景到虚拟相机(充当人眼的那个位置)的距离. 而`z-buffer`这个名字来自于相机的Z轴, 它是从相机的坐标空间射向屏幕的方向.\n随着`image buffer`和`depth buffer`的创建, 应用程序可能会请求`stencil buffer(模板缓冲区)`. `stencil buffer`包含了一个整型的遮罩, 这和`image buffer`中的每一个像素都是一一对应的, 他可以用来控制特定的像素是否被绘制. 更高级的`stencil buffer`可以用来产生实时阴影.\n大多数3D渲染应用程序中使用VRAM主要通过`Texture maps(纹理贴图)`, `texture maps`通常被用来附着到物体的表面以达到更好的视觉细节. 在高级渲染程序中, `texture maps`通常包含了比简单像素图像更多的信息. 例如: 一个[`bump map(凹凸贴图)`][3_bumpmap]包含的信息是一个个的向量, 这些向量表明了物体表面对应位置的倾斜程度. \n\n#### 1.2 向量变换\n\n几何数据以3维空间的形式传给了图形硬件. 接下来图形硬件需要做的就是就是将这些数据转换到2维空间的视口内. 在`rendering pipeline(渲染管线)` 过程中有很多与之相关联的坐标系统, 他们之间的转换过程如`图1.3`. 一个3D 模型的顶点通常存储在对象的`object space(模型坐标空间)`内, 这个坐标系统取决于特定的模型.每一个模型的位置通常被存储在`word space(世界坐标空间)`中, 这个坐标空间将所有的对象连接到一个全局的坐标空间中. 在每一个对象被渲染之前, 它的顶点必须被转换到`camera space(相机空间)`中, 这个坐标空间的x和y轴适合显示区域的x和y平行的. 模型的顶点是可以直接从`模型空间`转换到`相机空间`的,具体做法就是通过矩阵乘法将 `模型坐标`->`世界坐标`的变换矩阵M<sub>obj-word</sub> 和 `世界坐标`->`相机坐标`的变换矩阵M<sub>word-camera</sub> 连接起来,得到M<sub>obj-camera</sub>称之为 `model-view`变换.\n一旦模型的顶点被转换到了`相机空间`,他们会经历一个投影变换, 这个变换将会达到人眼视觉系统近大远小的视觉效果. 这个投影是通过四维空间其次坐标来完成的, 在这些顶点完成投影后的坐标空间被称为`homogeneous clip space(齐次裁剪空间)`, 之所以这么叫它, 是因为在这个坐标空间,图元会被裁剪在可视区域内,确保落在可视区域外面的图元不会被渲染.\n> ![图1.3(来自原书截图)](/img/201708/2017-08-24 5.29.50.png)\n\n在齐次坐标空间中, 每个顶点的坐标称为`normalized device coordinates(规格化设备坐标, 简称NDC)`, 这里出现了一个新的术语`normalized(规格化或标准化)`, 它的意思其实就是将每个顶点的x,y,z分量映射到[-1,1]区间内, 它表示顶点最终出现在`视口`中的位置. 顶点还要经历再一次的变换`viewport transformation(视口变换)`, 这个变换的结果其实就是最终顶点呈现在屏幕上的位置, `z分量`通常会被映射到[-1,1]区间内, 但是随后它会被缩放到深度缓冲所使用的每一个像素位对应的整型范围.最后, 顶点呈现在了我们的屏幕上.\n除了从`模型空间`转换到`屏幕空间`外, 图形处理器还会针对每一个顶点做一些运算.例如: OpenGL的光照模型将会计算到达每一个顶点的光照强度的该顶点反射颜色以及最终会有多少颜色会被反射进入人眼(相机的位置). 这中运算被称为`per-vertex lighting(逐顶点光照)`. 一些高级的3D程序会使用逐顶点光照处理, 这将会在物体表面产生很细腻的光照表现(像素级别的).\n每一个顶点还会携带一个甚至更多的`texture coordinates(纹理坐标)`. 通常情况下, `纹理坐标`是由应用程序明确指定的或者是GPU自动生成的. 图元在渲染的时候, 将会根据`纹理坐标`从对应的纹理中查询到对应的颜色值插入到图元对应的位置. 这些颜色和其他在每个像素被插入的颜色将会决定最终在视口中的显示效果.\n\n#### 1.3 光栅化和片元操作\n\n一旦模型的顶点完成了坐标转换最终呈现在了屏幕中, GPU必须决定这些在视口中的像素应该用什么样的图元来呈现. 水平扫描固定间隔的像素填充图元的处理过程叫做`raserization(光栅化)`. GPU计算每一个像素的深度, 插入顶点颜色和纹理坐标. 这些信息和像素本身的位置结合起来叫做`fragment(片元)`.\n图元到片元的转换如`图1.4`. 应用程序必须在这个过程的第一阶段决定是否进行`face culling(表面剔除)`.`表面剔除`只会对多边形图元生效, 它会移除背对着相机或者面对着相机的多边形图元. 但是大多数情况下,`表面剔除`被用来优化性能, 因为它会去除背对着相机的多边形, 这些不需要被渲染, 因为我们看不到它.\n> ![图1.4(来自原书截图)](/img/201708/2017-08-25 11.28.13.png)\n\n图形应用程序指定片元数据在光栅化过程中怎样来确实每一个像素的最终颜色和深度. 这个过程叫做`fragment shading 或者 pixel shading(片元着色)`. 最终的颜可可能是从纹理获取来的颜色和顶点插入的颜色的成绩, 也可能是复杂的逐顶点光照的结果. 最终的深度通常不会变化, 但是一些高级的3D图形硬件允许我们来按照自己的意愿替换最终计算的深度值. `图1.5`展示了在光栅化过程中每一个片元产生所执行的操作. 大部分操作都会决定一个图元最终绘制到屏幕上或者被丢弃. 从逻辑上来讲,虽然这些操作会在`片元着色`之后再进行, 但大多数GPU会在执行`片元着色`前进行一些测试, 这些测试能够带来一些性能和时间上的优势: 有一些最终根本不会被显示到屏幕上的图元将不会通过测试, 这就节省了不必要的性能开销和时间开销.\n> ![图1.5(来自原书截图)](/img/201708/2017-08-25 2.19.10.png)\n\n\n\n\n\n\n\n[1_booksite]: http://www.mathfor3dgameprogramming.com/\n[2_double_swap]: https://baike.baidu.com/item/%E5%8F%8C%E7%BC%93%E5%86%B2/10953356?fr=aladdin\n[3_bumpmap]: https://en.wikipedia.org/wiki/Bump_mapping","slug":"mf3gpacg_1","published":1,"updated":"2018-03-05T01:12:07.993Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhu06ju80000fkqcflw308ji","content":"<h2 id=\"第一章-渲染管线\"><a href=\"#第一章-渲染管线\" class=\"headerlink\" title=\"第一章: 渲染管线\"></a>第一章: 渲染管线</h2><h3 id=\"写在前面的话\"><a href=\"#写在前面的话\" class=\"headerlink\" title=\"写在前面的话:\"></a>写在前面的话:</h3><blockquote>\n<p>本文基本等同于翻译(加上自己的理解), 笔者英语水平有限, 难免会出现错误, 望高手在评论中指出, 谢谢!<br>原书: <a href=\"http://www.mathfor3dgameprogramming.com/\" target=\"_blank\" rel=\"noopener\">Mathematics for 3D Game Programming and Computer Graphics, Third Edition</a> </p>\n</blockquote>\n<h3 id=\"一-渲染管线\"><a href=\"#一-渲染管线\" class=\"headerlink\" title=\"一. 渲染管线\"></a>一. 渲染管线</h3><h4 id=\"1-1-图形处理器\"><a href=\"#1-1-图形处理器\" class=\"headerlink\" title=\"1.1 图形处理器\"></a>1.1 图形处理器</h4><p>一个3D图形场景通常包含了很多独立的对象.这些对象的几何形式通常是由一些特定类型的<code>图元</code>组成的.<code>图元</code>指的是顶点以怎样的方式连接构成了这种形状. 图1.1列出了 OpenGL图形库定义了10种图元. 图形硬件可以渲染一系列独立的点, 一些线段, 或者一组已经填充好了的多边形. 在大多数情况下, 3D模型的表面是由一些\u001b三角形构成的, 每一个三角形又是由顶点列表中的3个顶点组成.</p>\n<blockquote>\n<p><img src=\"/img/201708/2017-08-24 .png\" alt=\"图1.1, 来自原书截图\"></p>\n</blockquote>\n<p>现代的3D图形\b卡通常会执行从CPU发出的一些指令, CPU想GPU发出渲染命令, 然后CPU会执行其他的任务, 而GPU会执行这些渲染操作. 这通常被称为<strong><em>异步操作</em></strong>. 当需要被渲染的图形信息被提交到渲染库(OpenGL等)的时候, 请求渲染操作的函数将会在渲染操作还未完成前很早就返回. 这些在一个渲染命令的子操作和渲染完成之间的滞后时间将不会产生什么问题, 但是在渲染完成的时刻是需要知道的. 幸运的是, 目前OpenGL的一些扩展可程序以在CPU中运行, 这些程序能够在GPU完成渲染的时候发出通知.但同时会带来性能损耗, 这种异步操作会拖慢3D图形程序的执行速度, 因此, 如果想要性能优先, 那么应该避免这些操作.</p>\n<p>那么应用程序和GPU的通信是怎么来进行呢? 通常是通过一些第三方的图形库来实现的, 比如OpenGL. 这些应用将会通过调用OpenGL API方式来向其发出渲染命令. 而OpenGL等图形库又向GPU驱动程序发送渲染命令, 这些驱动程序才知道怎样和GPU交流. OpenGL的这些接口我们称之为<strong><em>Hardware Abstraction Layer(HAL) 硬件抽象层</em></strong>, 因为它提供了一些通用的函数可以用来渲染场景, 这些函数可以在任何支持OpenGL架构的图形硬件上运行. 驱动程序将会把这些OpenGL的API转换成GPU可以执行的命令. 3D图形驱动程序通常会直接实现OpenGL函数以最小化渲染命令的开销. <strong><em>图1.2</em></strong> 展示了CPU和GPU之间的通信过程:</p>\n<blockquote>\n<p><img src=\"/img/201708/2017-08-24 3.48.18.png\" alt=\"图1.2 CPU和GPU之间的通信(来自原书截图)\"></p>\n</blockquote>\n<p>一个3D图形卡有自己的存储空间(显存), 通常被称为<strong><em>VRAM (Video Random Access Memory)</em></strong>. GPU可以在VRAM中存储任何东西, 当时在3D应用程序运行的时候, 有这么几类数据大多数总可以在显存中找到. VRAM中有两个图像缓冲区, 被称为前缓冲和后缓冲 (传说中的<a href=\"https://baike.baidu.com/item/%E5%8F%8C%E7%BC%93%E5%86%B2/10953356?fr=aladdin\" target=\"_blank\" rel=\"noopener\"><strong><em>双缓冲</em></strong></a>). 其中, <code>front image buffers</code> 包含了当前在可视区域内看到的每一个像素的数据. <em>可视区域</em> 指的就是包含了已经被渲染的图象数据的一个区域, 他可能是一个窗口, 也可能是整个屏幕; <code>back image buffer</code>是GPU真正渲染的场景的位置. <code>back buffer</code> 在渲染完成呈现给用户之前是不可见的. 一旦一个图像完成了渲染, <code>back buffer</code> 和 <code>front buffer</code> 将会交换数据. 这个操作被称为<code>缓冲交换</code>. 他可以通过以下几种方式来实现:</p>\n<blockquote>\n<ol>\n<li>直接交换两个缓冲区的内存地址</li>\n<li>将<code>back buffer</code>中的数据拷贝到<code>fornt buffer</code>中</li>\n</ol>\n</blockquote>\n<p>缓冲区交换通常和图像显示刷新率保持同步, 这是为了避免发生<code>画面撕裂现象</code>. <code>画面撕裂</code>通常由于在刷新期间发生了缓冲区交换, 这将会导致一副图像的上半部分和下半部分不同, 因为他们的数据分别来自<code>front buffer</code>和<code>back buffer</code>.</p>\n<p>还有一块存储在VRAM中的数据块被称为<code>Depth-buffer</code>或者<code>z-buffer</code>. <code>深度缓冲</code>存储的数据是图像缓冲中的每一个像素数据的<code>depth</code>,<code>depth</code>表明这个像素距离屏幕有多远或者这个像素位于图像中的哪个深度. <code>深度缓冲</code>通常用来隐藏或表面消除的功能, 它只绘制深度小于图像缓冲去深度的像素. <code>Depth</code>同时也表明了从被绘制的场景到虚拟相机(充当人眼的那个位置)的距离. 而<code>z-buffer</code>这个名字来自于相机的Z轴, 它是从相机的坐标空间射向屏幕的方向.<br>随着<code>image buffer</code>和<code>depth buffer</code>的创建, 应用程序可能会请求<code>stencil buffer(模板缓冲区)</code>. <code>stencil buffer</code>包含了一个整型的遮罩, 这和<code>image buffer</code>中的每一个像素都是一一对应的, 他可以用来控制特定的像素是否被绘制. 更高级的<code>stencil buffer</code>可以用来产生实时阴影.<br>大多数3D渲染应用程序中使用VRAM主要通过<code>Texture maps(纹理贴图)</code>, <code>texture maps</code>通常被用来附着到物体的表面以达到更好的视觉细节. 在高级渲染程序中, <code>texture maps</code>通常包含了比简单像素图像更多的信息. 例如: 一个<a href=\"https://en.wikipedia.org/wiki/Bump_mapping\" target=\"_blank\" rel=\"noopener\"><code>bump map(凹凸贴图)</code></a>包含的信息是一个个的向量, 这些向量表明了物体表面对应位置的倾斜程度. </p>\n<h4 id=\"1-2-向量变换\"><a href=\"#1-2-向量变换\" class=\"headerlink\" title=\"1.2 向量变换\"></a>1.2 向量变换</h4><p>几何数据以3维空间的形式传给了图形硬件. 接下来图形硬件需要做的就是就是将这些数据转换到2维空间的视口内. 在<code>rendering pipeline(渲染管线)</code> 过程中有很多与之相关联的坐标系统, 他们之间的转换过程如<code>图1.3</code>. 一个3D 模型的顶点通常存储在对象的<code>object space(模型坐标空间)</code>内, 这个坐标系统取决于特定的模型.每一个模型的位置通常被存储在<code>word space(世界坐标空间)</code>中, 这个坐标空间将所有的对象连接到一个全局的坐标空间中. 在每一个对象被渲染之前, 它的顶点必须被转换到<code>camera space(相机空间)</code>中, 这个坐标空间的x和y轴适合显示区域的x和y平行的. 模型的顶点是可以直接从<code>模型空间</code>转换到<code>相机空间</code>的,具体做法就是通过矩阵乘法将 <code>模型坐标</code>-&gt;<code>世界坐标</code>的变换矩阵M<sub>obj-word</sub> 和 <code>世界坐标</code>-&gt;<code>相机坐标</code>的变换矩阵M<sub>word-camera</sub> 连接起来,得到M<sub>obj-camera</sub>称之为 <code>model-view</code>变换.<br>一旦模型的顶点被转换到了<code>相机空间</code>,他们会经历一个投影变换, 这个变换将会达到人眼视觉系统近大远小的视觉效果. 这个投影是通过四维空间其次坐标来完成的, 在这些顶点完成投影后的坐标空间被称为<code>homogeneous clip space(齐次裁剪空间)</code>, 之所以这么叫它, 是因为在这个坐标空间,图元会被裁剪在可视区域内,确保落在可视区域外面的图元不会被渲染.</p>\n<blockquote>\n<p><img src=\"/img/201708/2017-08-24 5.29.50.png\" alt=\"图1.3(来自原书截图)\"></p>\n</blockquote>\n<p>在齐次坐标空间中, 每个顶点的坐标称为<code>normalized device coordinates(规格化设备坐标, 简称NDC)</code>, 这里出现了一个新的术语<code>normalized(规格化或标准化)</code>, 它的意思其实就是将每个顶点的x,y,z分量映射到[-1,1]区间内, 它表示顶点最终出现在<code>视口</code>中的位置. 顶点还要经历再一次的变换<code>viewport transformation(视口变换)</code>, 这个变换的结果其实就是最终顶点呈现在屏幕上的位置, <code>z分量</code>通常会被映射到[-1,1]区间内, 但是随后它会被缩放到深度缓冲所使用的每一个像素位对应的整型范围.最后, 顶点呈现在了我们的屏幕上.<br>除了从<code>模型空间</code>转换到<code>屏幕空间</code>外, 图形处理器还会针对每一个顶点做一些运算.例如: OpenGL的光照模型将会计算到达每一个顶点的光照强度的该顶点反射颜色以及最终会有多少颜色会被反射进入人眼(相机的位置). 这中运算被称为<code>per-vertex lighting(逐顶点光照)</code>. 一些高级的3D程序会使用逐顶点光照处理, 这将会在物体表面产生很细腻的光照表现(像素级别的).<br>每一个顶点还会携带一个甚至更多的<code>texture coordinates(纹理坐标)</code>. 通常情况下, <code>纹理坐标</code>是由应用程序明确指定的或者是GPU自动生成的. 图元在渲染的时候, 将会根据<code>纹理坐标</code>从对应的纹理中查询到对应的颜色值插入到图元对应的位置. 这些颜色和其他在每个像素被插入的颜色将会决定最终在视口中的显示效果.</p>\n<h4 id=\"1-3-光栅化和片元操作\"><a href=\"#1-3-光栅化和片元操作\" class=\"headerlink\" title=\"1.3 光栅化和片元操作\"></a>1.3 光栅化和片元操作</h4><p>一旦模型的顶点完成了坐标转换最终呈现在了屏幕中, GPU必须决定这些在视口中的像素应该用什么样的图元来呈现. 水平扫描固定间隔的像素填充图元的处理过程叫做<code>raserization(光栅化)</code>. GPU计算每一个像素的深度, 插入顶点颜色和纹理坐标. 这些信息和像素本身的位置结合起来叫做<code>fragment(片元)</code>.<br>图元到片元的转换如<code>图1.4</code>. 应用程序必须在这个过程的第一阶段决定是否进行<code>face culling(表面剔除)</code>.<code>表面剔除</code>只会对多边形图元生效, 它会移除背对着相机或者面对着相机的多边形图元. 但是大多数情况下,<code>表面剔除</code>被用来优化性能, 因为它会去除背对着相机的多边形, 这些不需要被渲染, 因为我们看不到它.</p>\n<blockquote>\n<p><img src=\"/img/201708/2017-08-25 11.28.13.png\" alt=\"图1.4(来自原书截图)\"></p>\n</blockquote>\n<p>图形应用程序指定片元数据在光栅化过程中怎样来确实每一个像素的最终颜色和深度. 这个过程叫做<code>fragment shading 或者 pixel shading(片元着色)</code>. 最终的颜可可能是从纹理获取来的颜色和顶点插入的颜色的成绩, 也可能是复杂的逐顶点光照的结果. 最终的深度通常不会变化, 但是一些高级的3D图形硬件允许我们来按照自己的意愿替换最终计算的深度值. <code>图1.5</code>展示了在光栅化过程中每一个片元产生所执行的操作. 大部分操作都会决定一个图元最终绘制到屏幕上或者被丢弃. 从逻辑上来讲,虽然这些操作会在<code>片元着色</code>之后再进行, 但大多数GPU会在执行<code>片元着色</code>前进行一些测试, 这些测试能够带来一些性能和时间上的优势: 有一些最终根本不会被显示到屏幕上的图元将不会通过测试, 这就节省了不必要的性能开销和时间开销.</p>\n<blockquote>\n<p><img src=\"/img/201708/2017-08-25 2.19.10.png\" alt=\"图1.5(来自原书截图)\"></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"第一章-渲染管线\"><a href=\"#第一章-渲染管线\" class=\"headerlink\" title=\"第一章: 渲染管线\"></a>第一章: 渲染管线</h2><h3 id=\"写在前面的话\"><a href=\"#写在前面的话\" class=\"headerlink\" title=\"写在前面的话:\"></a>写在前面的话:</h3><blockquote>\n<p>本文基本等同于翻译(加上自己的理解), 笔者英语水平有限, 难免会出现错误, 望高手在评论中指出, 谢谢!<br>原书: <a href=\"http://www.mathfor3dgameprogramming.com/\" target=\"_blank\" rel=\"noopener\">Mathematics for 3D Game Programming and Computer Graphics, Third Edition</a> </p>\n</blockquote>\n<h3 id=\"一-渲染管线\"><a href=\"#一-渲染管线\" class=\"headerlink\" title=\"一. 渲染管线\"></a>一. 渲染管线</h3><h4 id=\"1-1-图形处理器\"><a href=\"#1-1-图形处理器\" class=\"headerlink\" title=\"1.1 图形处理器\"></a>1.1 图形处理器</h4><p>一个3D图形场景通常包含了很多独立的对象.这些对象的几何形式通常是由一些特定类型的<code>图元</code>组成的.<code>图元</code>指的是顶点以怎样的方式连接构成了这种形状. 图1.1列出了 OpenGL图形库定义了10种图元. 图形硬件可以渲染一系列独立的点, 一些线段, 或者一组已经填充好了的多边形. 在大多数情况下, 3D模型的表面是由一些\u001b三角形构成的, 每一个三角形又是由顶点列表中的3个顶点组成.</p>\n<blockquote>\n<p><img src=\"/img/201708/2017-08-24 .png\" alt=\"图1.1, 来自原书截图\"></p>\n</blockquote>\n<p>现代的3D图形\b卡通常会执行从CPU发出的一些指令, CPU想GPU发出渲染命令, 然后CPU会执行其他的任务, 而GPU会执行这些渲染操作. 这通常被称为<strong><em>异步操作</em></strong>. 当需要被渲染的图形信息被提交到渲染库(OpenGL等)的时候, 请求渲染操作的函数将会在渲染操作还未完成前很早就返回. 这些在一个渲染命令的子操作和渲染完成之间的滞后时间将不会产生什么问题, 但是在渲染完成的时刻是需要知道的. 幸运的是, 目前OpenGL的一些扩展可程序以在CPU中运行, 这些程序能够在GPU完成渲染的时候发出通知.但同时会带来性能损耗, 这种异步操作会拖慢3D图形程序的执行速度, 因此, 如果想要性能优先, 那么应该避免这些操作.</p>\n<p>那么应用程序和GPU的通信是怎么来进行呢? 通常是通过一些第三方的图形库来实现的, 比如OpenGL. 这些应用将会通过调用OpenGL API方式来向其发出渲染命令. 而OpenGL等图形库又向GPU驱动程序发送渲染命令, 这些驱动程序才知道怎样和GPU交流. OpenGL的这些接口我们称之为<strong><em>Hardware Abstraction Layer(HAL) 硬件抽象层</em></strong>, 因为它提供了一些通用的函数可以用来渲染场景, 这些函数可以在任何支持OpenGL架构的图形硬件上运行. 驱动程序将会把这些OpenGL的API转换成GPU可以执行的命令. 3D图形驱动程序通常会直接实现OpenGL函数以最小化渲染命令的开销. <strong><em>图1.2</em></strong> 展示了CPU和GPU之间的通信过程:</p>\n<blockquote>\n<p><img src=\"/img/201708/2017-08-24 3.48.18.png\" alt=\"图1.2 CPU和GPU之间的通信(来自原书截图)\"></p>\n</blockquote>\n<p>一个3D图形卡有自己的存储空间(显存), 通常被称为<strong><em>VRAM (Video Random Access Memory)</em></strong>. GPU可以在VRAM中存储任何东西, 当时在3D应用程序运行的时候, 有这么几类数据大多数总可以在显存中找到. VRAM中有两个图像缓冲区, 被称为前缓冲和后缓冲 (传说中的<a href=\"https://baike.baidu.com/item/%E5%8F%8C%E7%BC%93%E5%86%B2/10953356?fr=aladdin\" target=\"_blank\" rel=\"noopener\"><strong><em>双缓冲</em></strong></a>). 其中, <code>front image buffers</code> 包含了当前在可视区域内看到的每一个像素的数据. <em>可视区域</em> 指的就是包含了已经被渲染的图象数据的一个区域, 他可能是一个窗口, 也可能是整个屏幕; <code>back image buffer</code>是GPU真正渲染的场景的位置. <code>back buffer</code> 在渲染完成呈现给用户之前是不可见的. 一旦一个图像完成了渲染, <code>back buffer</code> 和 <code>front buffer</code> 将会交换数据. 这个操作被称为<code>缓冲交换</code>. 他可以通过以下几种方式来实现:</p>\n<blockquote>\n<ol>\n<li>直接交换两个缓冲区的内存地址</li>\n<li>将<code>back buffer</code>中的数据拷贝到<code>fornt buffer</code>中</li>\n</ol>\n</blockquote>\n<p>缓冲区交换通常和图像显示刷新率保持同步, 这是为了避免发生<code>画面撕裂现象</code>. <code>画面撕裂</code>通常由于在刷新期间发生了缓冲区交换, 这将会导致一副图像的上半部分和下半部分不同, 因为他们的数据分别来自<code>front buffer</code>和<code>back buffer</code>.</p>\n<p>还有一块存储在VRAM中的数据块被称为<code>Depth-buffer</code>或者<code>z-buffer</code>. <code>深度缓冲</code>存储的数据是图像缓冲中的每一个像素数据的<code>depth</code>,<code>depth</code>表明这个像素距离屏幕有多远或者这个像素位于图像中的哪个深度. <code>深度缓冲</code>通常用来隐藏或表面消除的功能, 它只绘制深度小于图像缓冲去深度的像素. <code>Depth</code>同时也表明了从被绘制的场景到虚拟相机(充当人眼的那个位置)的距离. 而<code>z-buffer</code>这个名字来自于相机的Z轴, 它是从相机的坐标空间射向屏幕的方向.<br>随着<code>image buffer</code>和<code>depth buffer</code>的创建, 应用程序可能会请求<code>stencil buffer(模板缓冲区)</code>. <code>stencil buffer</code>包含了一个整型的遮罩, 这和<code>image buffer</code>中的每一个像素都是一一对应的, 他可以用来控制特定的像素是否被绘制. 更高级的<code>stencil buffer</code>可以用来产生实时阴影.<br>大多数3D渲染应用程序中使用VRAM主要通过<code>Texture maps(纹理贴图)</code>, <code>texture maps</code>通常被用来附着到物体的表面以达到更好的视觉细节. 在高级渲染程序中, <code>texture maps</code>通常包含了比简单像素图像更多的信息. 例如: 一个<a href=\"https://en.wikipedia.org/wiki/Bump_mapping\" target=\"_blank\" rel=\"noopener\"><code>bump map(凹凸贴图)</code></a>包含的信息是一个个的向量, 这些向量表明了物体表面对应位置的倾斜程度. </p>\n<h4 id=\"1-2-向量变换\"><a href=\"#1-2-向量变换\" class=\"headerlink\" title=\"1.2 向量变换\"></a>1.2 向量变换</h4><p>几何数据以3维空间的形式传给了图形硬件. 接下来图形硬件需要做的就是就是将这些数据转换到2维空间的视口内. 在<code>rendering pipeline(渲染管线)</code> 过程中有很多与之相关联的坐标系统, 他们之间的转换过程如<code>图1.3</code>. 一个3D 模型的顶点通常存储在对象的<code>object space(模型坐标空间)</code>内, 这个坐标系统取决于特定的模型.每一个模型的位置通常被存储在<code>word space(世界坐标空间)</code>中, 这个坐标空间将所有的对象连接到一个全局的坐标空间中. 在每一个对象被渲染之前, 它的顶点必须被转换到<code>camera space(相机空间)</code>中, 这个坐标空间的x和y轴适合显示区域的x和y平行的. 模型的顶点是可以直接从<code>模型空间</code>转换到<code>相机空间</code>的,具体做法就是通过矩阵乘法将 <code>模型坐标</code>-&gt;<code>世界坐标</code>的变换矩阵M<sub>obj-word</sub> 和 <code>世界坐标</code>-&gt;<code>相机坐标</code>的变换矩阵M<sub>word-camera</sub> 连接起来,得到M<sub>obj-camera</sub>称之为 <code>model-view</code>变换.<br>一旦模型的顶点被转换到了<code>相机空间</code>,他们会经历一个投影变换, 这个变换将会达到人眼视觉系统近大远小的视觉效果. 这个投影是通过四维空间其次坐标来完成的, 在这些顶点完成投影后的坐标空间被称为<code>homogeneous clip space(齐次裁剪空间)</code>, 之所以这么叫它, 是因为在这个坐标空间,图元会被裁剪在可视区域内,确保落在可视区域外面的图元不会被渲染.</p>\n<blockquote>\n<p><img src=\"/img/201708/2017-08-24 5.29.50.png\" alt=\"图1.3(来自原书截图)\"></p>\n</blockquote>\n<p>在齐次坐标空间中, 每个顶点的坐标称为<code>normalized device coordinates(规格化设备坐标, 简称NDC)</code>, 这里出现了一个新的术语<code>normalized(规格化或标准化)</code>, 它的意思其实就是将每个顶点的x,y,z分量映射到[-1,1]区间内, 它表示顶点最终出现在<code>视口</code>中的位置. 顶点还要经历再一次的变换<code>viewport transformation(视口变换)</code>, 这个变换的结果其实就是最终顶点呈现在屏幕上的位置, <code>z分量</code>通常会被映射到[-1,1]区间内, 但是随后它会被缩放到深度缓冲所使用的每一个像素位对应的整型范围.最后, 顶点呈现在了我们的屏幕上.<br>除了从<code>模型空间</code>转换到<code>屏幕空间</code>外, 图形处理器还会针对每一个顶点做一些运算.例如: OpenGL的光照模型将会计算到达每一个顶点的光照强度的该顶点反射颜色以及最终会有多少颜色会被反射进入人眼(相机的位置). 这中运算被称为<code>per-vertex lighting(逐顶点光照)</code>. 一些高级的3D程序会使用逐顶点光照处理, 这将会在物体表面产生很细腻的光照表现(像素级别的).<br>每一个顶点还会携带一个甚至更多的<code>texture coordinates(纹理坐标)</code>. 通常情况下, <code>纹理坐标</code>是由应用程序明确指定的或者是GPU自动生成的. 图元在渲染的时候, 将会根据<code>纹理坐标</code>从对应的纹理中查询到对应的颜色值插入到图元对应的位置. 这些颜色和其他在每个像素被插入的颜色将会决定最终在视口中的显示效果.</p>\n<h4 id=\"1-3-光栅化和片元操作\"><a href=\"#1-3-光栅化和片元操作\" class=\"headerlink\" title=\"1.3 光栅化和片元操作\"></a>1.3 光栅化和片元操作</h4><p>一旦模型的顶点完成了坐标转换最终呈现在了屏幕中, GPU必须决定这些在视口中的像素应该用什么样的图元来呈现. 水平扫描固定间隔的像素填充图元的处理过程叫做<code>raserization(光栅化)</code>. GPU计算每一个像素的深度, 插入顶点颜色和纹理坐标. 这些信息和像素本身的位置结合起来叫做<code>fragment(片元)</code>.<br>图元到片元的转换如<code>图1.4</code>. 应用程序必须在这个过程的第一阶段决定是否进行<code>face culling(表面剔除)</code>.<code>表面剔除</code>只会对多边形图元生效, 它会移除背对着相机或者面对着相机的多边形图元. 但是大多数情况下,<code>表面剔除</code>被用来优化性能, 因为它会去除背对着相机的多边形, 这些不需要被渲染, 因为我们看不到它.</p>\n<blockquote>\n<p><img src=\"/img/201708/2017-08-25 11.28.13.png\" alt=\"图1.4(来自原书截图)\"></p>\n</blockquote>\n<p>图形应用程序指定片元数据在光栅化过程中怎样来确实每一个像素的最终颜色和深度. 这个过程叫做<code>fragment shading 或者 pixel shading(片元着色)</code>. 最终的颜可可能是从纹理获取来的颜色和顶点插入的颜色的成绩, 也可能是复杂的逐顶点光照的结果. 最终的深度通常不会变化, 但是一些高级的3D图形硬件允许我们来按照自己的意愿替换最终计算的深度值. <code>图1.5</code>展示了在光栅化过程中每一个片元产生所执行的操作. 大部分操作都会决定一个图元最终绘制到屏幕上或者被丢弃. 从逻辑上来讲,虽然这些操作会在<code>片元着色</code>之后再进行, 但大多数GPU会在执行<code>片元着色</code>前进行一些测试, 这些测试能够带来一些性能和时间上的优势: 有一些最终根本不会被显示到屏幕上的图元将不会通过测试, 这就节省了不必要的性能开销和时间开销.</p>\n<blockquote>\n<p><img src=\"/img/201708/2017-08-25 2.19.10.png\" alt=\"图1.5(来自原书截图)\"></p>\n</blockquote>\n"},{"title":"Mathematics.for.3D.Game.Programming.and.Computer.Graphics阅读笔记(二)","date":"2017-08-24T06:08:28.000Z","_content":"## 第二章: 向量\n\n### 写在前面的话: \n> 本文基本等同于翻译(加上自己的理解), 笔者英语水平有限, 难免会出现错误, 望高手在评论中指出, 谢谢!\n> 原书: [Mathematics for 3D Game Programming and Computer Graphics, Third Edition][1_booksite] \n\n#### 2.1 向量的属性\n\n+ `定义`: 这里将向量定义为: `实数组成的n元组`\n\n不过大多数情况下, 这个n指的是2, 3, 4, 一个n维向量可以记为:\n$$V=(v_1,v_2,...,v_n) \\tag{2.1}$$\n$V_i$表示向量$V$的第i个分量, 通常情况下, 下标是这个分量所对应的坐标轴的名字. 例如: 一个三维向量$P$可以记为: $P_x,P_y,P_z$.\n+ `列向量`: 可以使用1列n行来表示和(2.1)式等价的`列向量`\n$$V = \n\\begin{bmatrix}\nv_1\\\\\\\\ v_2\\\\\\\\ \\dots \\\\\\\\ v_n\n\\end{bmatrix} \\tag{2.2}$$\n\n+ `行向量`: 可以用1行n列来表示和(2.1)等价的`行向量`, 同时他也是列向量(2.2)的`转置矩阵`(行变列)\n$$V^T=\n\\begin{bmatrix}\nv_1 & v_2 & \\dots & v_n\n\\end{bmatrix}\\tag{2.3}$$\n\n+ `向量和标量相乘`: 分别用这个标量和向量的每一个分量相乘, 结果是一个向量\n$$\naV=Va=(av_1,av_2,\\dots,av_n) \\tag{2.4}\n$$\n\n+ `向量和向量的加法`: 每个分量分别相加, 结果是一个向量. 比如$P + Q$:\n$$\nP + Q = (p_1 + q_1,p_2 + q_2,\\dots,p_n + q_n)\n\\tag{2.5}$$\n\n+ `向量和向量的减法`: $P - Q$可以认为是$P + (-Q)$\n\n+ #### 向量的运算法则: 给定任意两个标量$a,b$, 任意三个向量$P,Q,R$, 以下定律成立\n> (a). $P + Q = Q + P$\n> (b). $(P + Q) + R = P + (Q + R)$\n> (c). $(ab)P = a(bP)$\n> (d). $a(P + Q) = aP + aQ$\n> (e). $(a + b)P = aP + bP$\n\n+ `n维向量V的模`是一个标量, 记做$\\left \\\\| V \\right \\\\|$, 计算公式如下:\n$$\n\\left \\\\| V \\right \\\\| = \\sqrt{\\sum_{i=1}^{n}V^2_i} \\tag{2.6}\n$$\n向量的模也可以叫做向量的长度. 长度为一的向量叫做`unit vector(单位向量)`. 当$V$代表三维的点或者方向的时候, 公式(2.6)可以记作:\n$$\n\\left \\\\| V \\right \\\\| = \\sqrt{V_x^2 + V_y^2 + V_z^2}\\tag{2.7}\n$$\n一个向量$V$至少有一个分量不为0才能够被单位化, 做法就是用这个向量$V$乘以$\\frac{1}{\\left \\\\| V \\right \\\\|}$. 这个操作通常被称为`normalization(单位化)`, 在3D图形学中应用的很广泛. 这里应该注意的就是`单位化`这儿术语和`normal vector(法向量)`这个术语并没有什么联系, `法向量`指的平面中垂直于这个平面的一个向量. 向量的模遵循以下定律:\n> **定理2.2 给定一个标量$a$, 任意两个向量$P, Q$.**\n> (a). $\\left \\\\| P \\right \\\\| \\geq 0$\n> (b). $P = 0 当且仅当 P = (0,0,\\dots,0)$\n> (c). $\\left \\\\| aP \\right \\\\| =\\left |a\\right | \\left \\\\| P \\right \\\\|$\n> (d). $\\left \\\\| P + Q \\right \\\\| \\leqslant \\left \\\\|P \\right \\\\| \\left \\\\|Q \\right \\\\|$\n\n#### 2.2 向量的点乘\n\n向量的点乘, 通常也叫做`scalar product(数量积) or inner product(內积)`, 在3D图形学中用的很广泛因为他可以衡量两个向量的方向相似程度\n\n+ `向量的点乘法则`: n维向量$P, Q$的內积记作: $P \\cdot Q$, 通过下面的公式来计算\n$$\nP \\cdot Q = \\sum^{n}_{i=1}P_iQ_i \\tag{2.9}\n$$\n其实就是两个向量对应分量的乘积的和. 在三维空间中, 有如下公式:\n$$P\\cdot Q = P_xQ_x + P_yQ_y + P_zQ_z \\tag{2.10}$$\n点乘$P \\cdot Q$也可以表达为两个矩阵相乘:\n$$\nP^TQ = \\begin{bmatrix}\nP_1 & P_2 & \\cdots & P_n\n\\end{bmatrix}\n\\begin{bmatrix}\nQ_1 \\\\\\\\ Q_2 \\\\\\\\ \\vdots \\\\\\\\ Q_n\n\\end{bmatrix} \\tag{2.11}\n$$\n最终的结果是一个1X1的矩阵(可以认为它是一个标量), 这正式公式(2.9)的运算结果.\n下面来看一个点乘的很常见的应用:\n> **定理2.4 给定两个n维向量$P,Q$, 点乘$P \\cdot Q$等于下面的公式**\n> $$P \\cdot Q = \\left \\\\|P \\right \\\\| \\left \\\\|Q \\right \\\\| \\cos \\alpha \\tag{2.12}$$\n> $\\alpha $是从原点到$P,Q$表示的两点的连线的夹角\n\n点乘结果的符号表明两个向量在平面的同一侧或者不同侧, `如图2.3`\n> ![图2.3(来自原书截图)](/img/201708/2017-08-29 3.50.08.png)\n\n点乘的另外一个功能就是可以表示两个向量方向的相似程度. 再次看`图2.3`, 我们可以认为有一个平面通过向量$P$的起点, 并且垂直于向量$P$. 任何和向量$P$在同一侧的向量和$P$的点乘结果都是正数, 任何在平面另一侧的向量和$P$的点乘结果是负数.\n下面还有一些点乘的性质:\n> **定理2.5 给定任意一个标量$a$ 和任意三个向量$P,Q,R$, 下面性质成立.**\n> (a). $P \\cdot Q = Q \\cdot P$\n> (b). $(aP) \\cdot = a(P \\cdot Q)$\n> (c). $P \\cdot (Q + R) = P \\cdot Q + P \\cdot R$\n> (d). $P \\cdot P = \\left \\\\|P \\right \\\\|^2$\n> (e). $\\left | P \\cdot Q \\right | \\leqslant \\left \\\\|P \\right \\\\| \\left \\\\|Q \\right \\\\|$\n\n向量点乘的另一个应用场景就是分解向量$P$的分量, 得到垂直或者平行于另外一个向量$Q$的分量. 就像在`图2.4`所展示的一样, 如果我们将向量$P$看做是一个直角三角形的斜边, 然后将向量$P$在垂直于向量$Q$的方向上投影, 将会产生一条直角边. 在向量$P$和$Q$之间的夹角为$\\alpha$\n由三角学我们可以得知: $\\alpha$的邻边的长度为$\\left \\\\|P \\right \\\\| \\cos \\alpha$, 从`定理2.4`我们可以得知: 不知道角度$\\alpha$同样可以获取它的长度:\n$$\n\\left \\\\|P \\right \\\\| \\cos \\alpha = \\frac{P \\cdot Q}{\\left \\\\| Q \\right \\\\|}\n\\tag{2.17}$$\n为了获取到一个长度和它一样的平行于$Q$的向量,可以用`公式(2.7)`的右边乘以$Q$的单位向量$\\frac{Q}{\\left \\\\|Q \\right \\\\|}$. 我们用下面的公式来得到$P$在$Q$方向上的投影向量$proj_QP$:\n$$\nproj_QP = \\frac{P \\cdot Q}{\\left \\\\|Q \\right \\\\|^2}Q\n\\tag{2.18}$$\n\n> ![图2.4(来自原书截图)](/img/201708/2017-08-29 5.38.28.png)\n> 向量$P$在向量$Q$上的投影向量的长度等于$\\frac{P \\cdot Q}{\\left \\\\| Q \\right \\\\|}$是因为$P \\cdot Q = \\left \\\\| P \\right \\\\| \\left \\\\|Q \\right \\\\| \\cos \\alpha$.\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1_booksite]: http://www.mathfor3dgameprogramming.com/","source":"_posts/mf3gpacg-2.md","raw":"---\ntitle: Mathematics.for.3D.Game.Programming.and.Computer.Graphics阅读笔记(二)\ndate: 2017-08-24 14:08:28\ntags: OpenGL, 图形学\n---\n## 第二章: 向量\n\n### 写在前面的话: \n> 本文基本等同于翻译(加上自己的理解), 笔者英语水平有限, 难免会出现错误, 望高手在评论中指出, 谢谢!\n> 原书: [Mathematics for 3D Game Programming and Computer Graphics, Third Edition][1_booksite] \n\n#### 2.1 向量的属性\n\n+ `定义`: 这里将向量定义为: `实数组成的n元组`\n\n不过大多数情况下, 这个n指的是2, 3, 4, 一个n维向量可以记为:\n$$V=(v_1,v_2,...,v_n) \\tag{2.1}$$\n$V_i$表示向量$V$的第i个分量, 通常情况下, 下标是这个分量所对应的坐标轴的名字. 例如: 一个三维向量$P$可以记为: $P_x,P_y,P_z$.\n+ `列向量`: 可以使用1列n行来表示和(2.1)式等价的`列向量`\n$$V = \n\\begin{bmatrix}\nv_1\\\\\\\\ v_2\\\\\\\\ \\dots \\\\\\\\ v_n\n\\end{bmatrix} \\tag{2.2}$$\n\n+ `行向量`: 可以用1行n列来表示和(2.1)等价的`行向量`, 同时他也是列向量(2.2)的`转置矩阵`(行变列)\n$$V^T=\n\\begin{bmatrix}\nv_1 & v_2 & \\dots & v_n\n\\end{bmatrix}\\tag{2.3}$$\n\n+ `向量和标量相乘`: 分别用这个标量和向量的每一个分量相乘, 结果是一个向量\n$$\naV=Va=(av_1,av_2,\\dots,av_n) \\tag{2.4}\n$$\n\n+ `向量和向量的加法`: 每个分量分别相加, 结果是一个向量. 比如$P + Q$:\n$$\nP + Q = (p_1 + q_1,p_2 + q_2,\\dots,p_n + q_n)\n\\tag{2.5}$$\n\n+ `向量和向量的减法`: $P - Q$可以认为是$P + (-Q)$\n\n+ #### 向量的运算法则: 给定任意两个标量$a,b$, 任意三个向量$P,Q,R$, 以下定律成立\n> (a). $P + Q = Q + P$\n> (b). $(P + Q) + R = P + (Q + R)$\n> (c). $(ab)P = a(bP)$\n> (d). $a(P + Q) = aP + aQ$\n> (e). $(a + b)P = aP + bP$\n\n+ `n维向量V的模`是一个标量, 记做$\\left \\\\| V \\right \\\\|$, 计算公式如下:\n$$\n\\left \\\\| V \\right \\\\| = \\sqrt{\\sum_{i=1}^{n}V^2_i} \\tag{2.6}\n$$\n向量的模也可以叫做向量的长度. 长度为一的向量叫做`unit vector(单位向量)`. 当$V$代表三维的点或者方向的时候, 公式(2.6)可以记作:\n$$\n\\left \\\\| V \\right \\\\| = \\sqrt{V_x^2 + V_y^2 + V_z^2}\\tag{2.7}\n$$\n一个向量$V$至少有一个分量不为0才能够被单位化, 做法就是用这个向量$V$乘以$\\frac{1}{\\left \\\\| V \\right \\\\|}$. 这个操作通常被称为`normalization(单位化)`, 在3D图形学中应用的很广泛. 这里应该注意的就是`单位化`这儿术语和`normal vector(法向量)`这个术语并没有什么联系, `法向量`指的平面中垂直于这个平面的一个向量. 向量的模遵循以下定律:\n> **定理2.2 给定一个标量$a$, 任意两个向量$P, Q$.**\n> (a). $\\left \\\\| P \\right \\\\| \\geq 0$\n> (b). $P = 0 当且仅当 P = (0,0,\\dots,0)$\n> (c). $\\left \\\\| aP \\right \\\\| =\\left |a\\right | \\left \\\\| P \\right \\\\|$\n> (d). $\\left \\\\| P + Q \\right \\\\| \\leqslant \\left \\\\|P \\right \\\\| \\left \\\\|Q \\right \\\\|$\n\n#### 2.2 向量的点乘\n\n向量的点乘, 通常也叫做`scalar product(数量积) or inner product(內积)`, 在3D图形学中用的很广泛因为他可以衡量两个向量的方向相似程度\n\n+ `向量的点乘法则`: n维向量$P, Q$的內积记作: $P \\cdot Q$, 通过下面的公式来计算\n$$\nP \\cdot Q = \\sum^{n}_{i=1}P_iQ_i \\tag{2.9}\n$$\n其实就是两个向量对应分量的乘积的和. 在三维空间中, 有如下公式:\n$$P\\cdot Q = P_xQ_x + P_yQ_y + P_zQ_z \\tag{2.10}$$\n点乘$P \\cdot Q$也可以表达为两个矩阵相乘:\n$$\nP^TQ = \\begin{bmatrix}\nP_1 & P_2 & \\cdots & P_n\n\\end{bmatrix}\n\\begin{bmatrix}\nQ_1 \\\\\\\\ Q_2 \\\\\\\\ \\vdots \\\\\\\\ Q_n\n\\end{bmatrix} \\tag{2.11}\n$$\n最终的结果是一个1X1的矩阵(可以认为它是一个标量), 这正式公式(2.9)的运算结果.\n下面来看一个点乘的很常见的应用:\n> **定理2.4 给定两个n维向量$P,Q$, 点乘$P \\cdot Q$等于下面的公式**\n> $$P \\cdot Q = \\left \\\\|P \\right \\\\| \\left \\\\|Q \\right \\\\| \\cos \\alpha \\tag{2.12}$$\n> $\\alpha $是从原点到$P,Q$表示的两点的连线的夹角\n\n点乘结果的符号表明两个向量在平面的同一侧或者不同侧, `如图2.3`\n> ![图2.3(来自原书截图)](/img/201708/2017-08-29 3.50.08.png)\n\n点乘的另外一个功能就是可以表示两个向量方向的相似程度. 再次看`图2.3`, 我们可以认为有一个平面通过向量$P$的起点, 并且垂直于向量$P$. 任何和向量$P$在同一侧的向量和$P$的点乘结果都是正数, 任何在平面另一侧的向量和$P$的点乘结果是负数.\n下面还有一些点乘的性质:\n> **定理2.5 给定任意一个标量$a$ 和任意三个向量$P,Q,R$, 下面性质成立.**\n> (a). $P \\cdot Q = Q \\cdot P$\n> (b). $(aP) \\cdot = a(P \\cdot Q)$\n> (c). $P \\cdot (Q + R) = P \\cdot Q + P \\cdot R$\n> (d). $P \\cdot P = \\left \\\\|P \\right \\\\|^2$\n> (e). $\\left | P \\cdot Q \\right | \\leqslant \\left \\\\|P \\right \\\\| \\left \\\\|Q \\right \\\\|$\n\n向量点乘的另一个应用场景就是分解向量$P$的分量, 得到垂直或者平行于另外一个向量$Q$的分量. 就像在`图2.4`所展示的一样, 如果我们将向量$P$看做是一个直角三角形的斜边, 然后将向量$P$在垂直于向量$Q$的方向上投影, 将会产生一条直角边. 在向量$P$和$Q$之间的夹角为$\\alpha$\n由三角学我们可以得知: $\\alpha$的邻边的长度为$\\left \\\\|P \\right \\\\| \\cos \\alpha$, 从`定理2.4`我们可以得知: 不知道角度$\\alpha$同样可以获取它的长度:\n$$\n\\left \\\\|P \\right \\\\| \\cos \\alpha = \\frac{P \\cdot Q}{\\left \\\\| Q \\right \\\\|}\n\\tag{2.17}$$\n为了获取到一个长度和它一样的平行于$Q$的向量,可以用`公式(2.7)`的右边乘以$Q$的单位向量$\\frac{Q}{\\left \\\\|Q \\right \\\\|}$. 我们用下面的公式来得到$P$在$Q$方向上的投影向量$proj_QP$:\n$$\nproj_QP = \\frac{P \\cdot Q}{\\left \\\\|Q \\right \\\\|^2}Q\n\\tag{2.18}$$\n\n> ![图2.4(来自原书截图)](/img/201708/2017-08-29 5.38.28.png)\n> 向量$P$在向量$Q$上的投影向量的长度等于$\\frac{P \\cdot Q}{\\left \\\\| Q \\right \\\\|}$是因为$P \\cdot Q = \\left \\\\| P \\right \\\\| \\left \\\\|Q \\right \\\\| \\cos \\alpha$.\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1_booksite]: http://www.mathfor3dgameprogramming.com/","slug":"mf3gpacg-2","published":1,"updated":"2018-03-05T01:12:07.993Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhu06juf0002fkqc70h427pc","content":"<h2 id=\"第二章-向量\"><a href=\"#第二章-向量\" class=\"headerlink\" title=\"第二章: 向量\"></a>第二章: 向量</h2><h3 id=\"写在前面的话\"><a href=\"#写在前面的话\" class=\"headerlink\" title=\"写在前面的话:\"></a>写在前面的话:</h3><blockquote>\n<p>本文基本等同于翻译(加上自己的理解), 笔者英语水平有限, 难免会出现错误, 望高手在评论中指出, 谢谢!<br>原书: <a href=\"http://www.mathfor3dgameprogramming.com/\" target=\"_blank\" rel=\"noopener\">Mathematics for 3D Game Programming and Computer Graphics, Third Edition</a> </p>\n</blockquote>\n<h4 id=\"2-1-向量的属性\"><a href=\"#2-1-向量的属性\" class=\"headerlink\" title=\"2.1 向量的属性\"></a>2.1 向量的属性</h4><ul>\n<li><code>定义</code>: 这里将向量定义为: <code>实数组成的n元组</code></li>\n</ul>\n<p>不过大多数情况下, 这个n指的是2, 3, 4, 一个n维向量可以记为:<br>$$V=(v_1,v_2,…,v_n) \\tag{2.1}$$<br>$V_i$表示向量$V$的第i个分量, 通常情况下, 下标是这个分量所对应的坐标轴的名字. 例如: 一个三维向量$P$可以记为: $P_x,P_y,P_z$.</p>\n<ul>\n<li><p><code>列向量</code>: 可以使用1列n行来表示和(2.1)式等价的<code>列向量</code><br>$$V =<br>\\begin{bmatrix}<br>v_1\\\\ v_2\\\\ \\dots \\\\ v_n<br>\\end{bmatrix} \\tag{2.2}$$</p>\n</li>\n<li><p><code>行向量</code>: 可以用1行n列来表示和(2.1)等价的<code>行向量</code>, 同时他也是列向量(2.2)的<code>转置矩阵</code>(行变列)<br>$$V^T=<br>\\begin{bmatrix}<br>v_1 &amp; v_2 &amp; \\dots &amp; v_n<br>\\end{bmatrix}\\tag{2.3}$$</p>\n</li>\n<li><p><code>向量和标量相乘</code>: 分别用这个标量和向量的每一个分量相乘, 结果是一个向量<br>$$<br>aV=Va=(av_1,av_2,\\dots,av_n) \\tag{2.4}<br>$$</p>\n</li>\n<li><p><code>向量和向量的加法</code>: 每个分量分别相加, 结果是一个向量. 比如$P + Q$:<br>$$<br>P + Q = (p_1 + q_1,p_2 + q_2,\\dots,p_n + q_n)<br>\\tag{2.5}$$</p>\n</li>\n<li><p><code>向量和向量的减法</code>: $P - Q$可以认为是$P + (-Q)$</p>\n</li>\n<li><h4 id=\"向量的运算法则-给定任意两个标量-a-b-任意三个向量-P-Q-R-以下定律成立\"><a href=\"#向量的运算法则-给定任意两个标量-a-b-任意三个向量-P-Q-R-以下定律成立\" class=\"headerlink\" title=\"向量的运算法则: 给定任意两个标量$a,b$, 任意三个向量$P,Q,R$, 以下定律成立\"></a>向量的运算法则: 给定任意两个标量$a,b$, 任意三个向量$P,Q,R$, 以下定律成立</h4><blockquote>\n<p>(a). $P + Q = Q + P$<br>(b). $(P + Q) + R = P + (Q + R)$<br>(c). $(ab)P = a(bP)$<br>(d). $a(P + Q) = aP + aQ$<br>(e). $(a + b)P = aP + bP$</p>\n</blockquote>\n</li>\n<li><p><code>n维向量V的模</code>是一个标量, 记做$\\left \\| V \\right \\|$, 计算公式如下:<br>$$<br>\\left \\| V \\right \\| = \\sqrt{\\sum_{i=1}^{n}V^2_i} \\tag{2.6}<br>$$<br>向量的模也可以叫做向量的长度. 长度为一的向量叫做<code>unit vector(单位向量)</code>. 当$V$代表三维的点或者方向的时候, 公式(2.6)可以记作:<br>$$<br>\\left \\| V \\right \\| = \\sqrt{V_x^2 + V_y^2 + V_z^2}\\tag{2.7}<br>$$<br>一个向量$V$至少有一个分量不为0才能够被单位化, 做法就是用这个向量$V$乘以$\\frac{1}{\\left \\| V \\right \\|}$. 这个操作通常被称为<code>normalization(单位化)</code>, 在3D图形学中应用的很广泛. 这里应该注意的就是<code>单位化</code>这儿术语和<code>normal vector(法向量)</code>这个术语并没有什么联系, <code>法向量</code>指的平面中垂直于这个平面的一个向量. 向量的模遵循以下定律:</p>\n<blockquote>\n<p><strong>定理2.2 给定一个标量$a$, 任意两个向量$P, Q$.</strong><br>(a). $\\left \\| P \\right \\| \\geq 0$<br>(b). $P = 0 当且仅当 P = (0,0,\\dots,0)$<br>(c). $\\left \\| aP \\right \\| =\\left |a\\right | \\left \\| P \\right \\|$<br>(d). $\\left \\| P + Q \\right \\| \\leqslant \\left \\|P \\right \\| \\left \\|Q \\right \\|$</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"2-2-向量的点乘\"><a href=\"#2-2-向量的点乘\" class=\"headerlink\" title=\"2.2 向量的点乘\"></a>2.2 向量的点乘</h4><p>向量的点乘, 通常也叫做<code>scalar product(数量积) or inner product(內积)</code>, 在3D图形学中用的很广泛因为他可以衡量两个向量的方向相似程度</p>\n<ul>\n<li><code>向量的点乘法则</code>: n维向量$P, Q$的內积记作: $P \\cdot Q$, 通过下面的公式来计算<br>$$<br>P \\cdot Q = \\sum^{n}_{i=1}P_iQ_i \\tag{2.9}<br>$$<br>其实就是两个向量对应分量的乘积的和. 在三维空间中, 有如下公式:<br>$$P\\cdot Q = P_xQ_x + P_yQ_y + P_zQ_z \\tag{2.10}$$<br>点乘$P \\cdot Q$也可以表达为两个矩阵相乘:<br>$$<br>P^TQ = \\begin{bmatrix}<br>P_1 &amp; P_2 &amp; \\cdots &amp; P_n<br>\\end{bmatrix}<br>\\begin{bmatrix}<br>Q_1 \\\\ Q_2 \\\\ \\vdots \\\\ Q_n<br>\\end{bmatrix} \\tag{2.11}<br>$$<br>最终的结果是一个1X1的矩阵(可以认为它是一个标量), 这正式公式(2.9)的运算结果.<br>下面来看一个点乘的很常见的应用:<blockquote>\n<p><strong>定理2.4 给定两个n维向量$P,Q$, 点乘$P \\cdot Q$等于下面的公式</strong><br>$$P \\cdot Q = \\left \\|P \\right \\| \\left \\|Q \\right \\| \\cos \\alpha \\tag{2.12}$$<br>$\\alpha $是从原点到$P,Q$表示的两点的连线的夹角</p>\n</blockquote>\n</li>\n</ul>\n<p>点乘结果的符号表明两个向量在平面的同一侧或者不同侧, <code>如图2.3</code></p>\n<blockquote>\n<p><img src=\"/img/201708/2017-08-29 3.50.08.png\" alt=\"图2.3(来自原书截图)\"></p>\n</blockquote>\n<p>点乘的另外一个功能就是可以表示两个向量方向的相似程度. 再次看<code>图2.3</code>, 我们可以认为有一个平面通过向量$P$的起点, 并且垂直于向量$P$. 任何和向量$P$在同一侧的向量和$P$的点乘结果都是正数, 任何在平面另一侧的向量和$P$的点乘结果是负数.<br>下面还有一些点乘的性质:</p>\n<blockquote>\n<p><strong>定理2.5 给定任意一个标量$a$ 和任意三个向量$P,Q,R$, 下面性质成立.</strong><br>(a). $P \\cdot Q = Q \\cdot P$<br>(b). $(aP) \\cdot = a(P \\cdot Q)$<br>(c). $P \\cdot (Q + R) = P \\cdot Q + P \\cdot R$<br>(d). $P \\cdot P = \\left \\|P \\right \\|^2$<br>(e). $\\left | P \\cdot Q \\right | \\leqslant \\left \\|P \\right \\| \\left \\|Q \\right \\|$</p>\n</blockquote>\n<p>向量点乘的另一个应用场景就是分解向量$P$的分量, 得到垂直或者平行于另外一个向量$Q$的分量. 就像在<code>图2.4</code>所展示的一样, 如果我们将向量$P$看做是一个直角三角形的斜边, 然后将向量$P$在垂直于向量$Q$的方向上投影, 将会产生一条直角边. 在向量$P$和$Q$之间的夹角为$\\alpha$<br>由三角学我们可以得知: $\\alpha$的邻边的长度为$\\left \\|P \\right \\| \\cos \\alpha$, 从<code>定理2.4</code>我们可以得知: 不知道角度$\\alpha$同样可以获取它的长度:<br>$$<br>\\left \\|P \\right \\| \\cos \\alpha = \\frac{P \\cdot Q}{\\left \\| Q \\right \\|}<br>\\tag{2.17}$$<br>为了获取到一个长度和它一样的平行于$Q$的向量,可以用<code>公式(2.7)</code>的右边乘以$Q$的单位向量$\\frac{Q}{\\left \\|Q \\right \\|}$. 我们用下面的公式来得到$P$在$Q$方向上的投影向量$proj_QP$:<br>$$<br>proj_QP = \\frac{P \\cdot Q}{\\left \\|Q \\right \\|^2}Q<br>\\tag{2.18}$$</p>\n<blockquote>\n<p><img src=\"/img/201708/2017-08-29 5.38.28.png\" alt=\"图2.4(来自原书截图)\"><br>向量$P$在向量$Q$上的投影向量的长度等于$\\frac{P \\cdot Q}{\\left \\| Q \\right \\|}$是因为$P \\cdot Q = \\left \\| P \\right \\| \\left \\|Q \\right \\| \\cos \\alpha$.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"第二章-向量\"><a href=\"#第二章-向量\" class=\"headerlink\" title=\"第二章: 向量\"></a>第二章: 向量</h2><h3 id=\"写在前面的话\"><a href=\"#写在前面的话\" class=\"headerlink\" title=\"写在前面的话:\"></a>写在前面的话:</h3><blockquote>\n<p>本文基本等同于翻译(加上自己的理解), 笔者英语水平有限, 难免会出现错误, 望高手在评论中指出, 谢谢!<br>原书: <a href=\"http://www.mathfor3dgameprogramming.com/\" target=\"_blank\" rel=\"noopener\">Mathematics for 3D Game Programming and Computer Graphics, Third Edition</a> </p>\n</blockquote>\n<h4 id=\"2-1-向量的属性\"><a href=\"#2-1-向量的属性\" class=\"headerlink\" title=\"2.1 向量的属性\"></a>2.1 向量的属性</h4><ul>\n<li><code>定义</code>: 这里将向量定义为: <code>实数组成的n元组</code></li>\n</ul>\n<p>不过大多数情况下, 这个n指的是2, 3, 4, 一个n维向量可以记为:<br>$$V=(v_1,v_2,…,v_n) \\tag{2.1}$$<br>$V_i$表示向量$V$的第i个分量, 通常情况下, 下标是这个分量所对应的坐标轴的名字. 例如: 一个三维向量$P$可以记为: $P_x,P_y,P_z$.</p>\n<ul>\n<li><p><code>列向量</code>: 可以使用1列n行来表示和(2.1)式等价的<code>列向量</code><br>$$V =<br>\\begin{bmatrix}<br>v_1\\\\ v_2\\\\ \\dots \\\\ v_n<br>\\end{bmatrix} \\tag{2.2}$$</p>\n</li>\n<li><p><code>行向量</code>: 可以用1行n列来表示和(2.1)等价的<code>行向量</code>, 同时他也是列向量(2.2)的<code>转置矩阵</code>(行变列)<br>$$V^T=<br>\\begin{bmatrix}<br>v_1 &amp; v_2 &amp; \\dots &amp; v_n<br>\\end{bmatrix}\\tag{2.3}$$</p>\n</li>\n<li><p><code>向量和标量相乘</code>: 分别用这个标量和向量的每一个分量相乘, 结果是一个向量<br>$$<br>aV=Va=(av_1,av_2,\\dots,av_n) \\tag{2.4}<br>$$</p>\n</li>\n<li><p><code>向量和向量的加法</code>: 每个分量分别相加, 结果是一个向量. 比如$P + Q$:<br>$$<br>P + Q = (p_1 + q_1,p_2 + q_2,\\dots,p_n + q_n)<br>\\tag{2.5}$$</p>\n</li>\n<li><p><code>向量和向量的减法</code>: $P - Q$可以认为是$P + (-Q)$</p>\n</li>\n<li><h4 id=\"向量的运算法则-给定任意两个标量-a-b-任意三个向量-P-Q-R-以下定律成立\"><a href=\"#向量的运算法则-给定任意两个标量-a-b-任意三个向量-P-Q-R-以下定律成立\" class=\"headerlink\" title=\"向量的运算法则: 给定任意两个标量$a,b$, 任意三个向量$P,Q,R$, 以下定律成立\"></a>向量的运算法则: 给定任意两个标量$a,b$, 任意三个向量$P,Q,R$, 以下定律成立</h4><blockquote>\n<p>(a). $P + Q = Q + P$<br>(b). $(P + Q) + R = P + (Q + R)$<br>(c). $(ab)P = a(bP)$<br>(d). $a(P + Q) = aP + aQ$<br>(e). $(a + b)P = aP + bP$</p>\n</blockquote>\n</li>\n<li><p><code>n维向量V的模</code>是一个标量, 记做$\\left \\| V \\right \\|$, 计算公式如下:<br>$$<br>\\left \\| V \\right \\| = \\sqrt{\\sum_{i=1}^{n}V^2_i} \\tag{2.6}<br>$$<br>向量的模也可以叫做向量的长度. 长度为一的向量叫做<code>unit vector(单位向量)</code>. 当$V$代表三维的点或者方向的时候, 公式(2.6)可以记作:<br>$$<br>\\left \\| V \\right \\| = \\sqrt{V_x^2 + V_y^2 + V_z^2}\\tag{2.7}<br>$$<br>一个向量$V$至少有一个分量不为0才能够被单位化, 做法就是用这个向量$V$乘以$\\frac{1}{\\left \\| V \\right \\|}$. 这个操作通常被称为<code>normalization(单位化)</code>, 在3D图形学中应用的很广泛. 这里应该注意的就是<code>单位化</code>这儿术语和<code>normal vector(法向量)</code>这个术语并没有什么联系, <code>法向量</code>指的平面中垂直于这个平面的一个向量. 向量的模遵循以下定律:</p>\n<blockquote>\n<p><strong>定理2.2 给定一个标量$a$, 任意两个向量$P, Q$.</strong><br>(a). $\\left \\| P \\right \\| \\geq 0$<br>(b). $P = 0 当且仅当 P = (0,0,\\dots,0)$<br>(c). $\\left \\| aP \\right \\| =\\left |a\\right | \\left \\| P \\right \\|$<br>(d). $\\left \\| P + Q \\right \\| \\leqslant \\left \\|P \\right \\| \\left \\|Q \\right \\|$</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"2-2-向量的点乘\"><a href=\"#2-2-向量的点乘\" class=\"headerlink\" title=\"2.2 向量的点乘\"></a>2.2 向量的点乘</h4><p>向量的点乘, 通常也叫做<code>scalar product(数量积) or inner product(內积)</code>, 在3D图形学中用的很广泛因为他可以衡量两个向量的方向相似程度</p>\n<ul>\n<li><code>向量的点乘法则</code>: n维向量$P, Q$的內积记作: $P \\cdot Q$, 通过下面的公式来计算<br>$$<br>P \\cdot Q = \\sum^{n}_{i=1}P_iQ_i \\tag{2.9}<br>$$<br>其实就是两个向量对应分量的乘积的和. 在三维空间中, 有如下公式:<br>$$P\\cdot Q = P_xQ_x + P_yQ_y + P_zQ_z \\tag{2.10}$$<br>点乘$P \\cdot Q$也可以表达为两个矩阵相乘:<br>$$<br>P^TQ = \\begin{bmatrix}<br>P_1 &amp; P_2 &amp; \\cdots &amp; P_n<br>\\end{bmatrix}<br>\\begin{bmatrix}<br>Q_1 \\\\ Q_2 \\\\ \\vdots \\\\ Q_n<br>\\end{bmatrix} \\tag{2.11}<br>$$<br>最终的结果是一个1X1的矩阵(可以认为它是一个标量), 这正式公式(2.9)的运算结果.<br>下面来看一个点乘的很常见的应用:<blockquote>\n<p><strong>定理2.4 给定两个n维向量$P,Q$, 点乘$P \\cdot Q$等于下面的公式</strong><br>$$P \\cdot Q = \\left \\|P \\right \\| \\left \\|Q \\right \\| \\cos \\alpha \\tag{2.12}$$<br>$\\alpha $是从原点到$P,Q$表示的两点的连线的夹角</p>\n</blockquote>\n</li>\n</ul>\n<p>点乘结果的符号表明两个向量在平面的同一侧或者不同侧, <code>如图2.3</code></p>\n<blockquote>\n<p><img src=\"/img/201708/2017-08-29 3.50.08.png\" alt=\"图2.3(来自原书截图)\"></p>\n</blockquote>\n<p>点乘的另外一个功能就是可以表示两个向量方向的相似程度. 再次看<code>图2.3</code>, 我们可以认为有一个平面通过向量$P$的起点, 并且垂直于向量$P$. 任何和向量$P$在同一侧的向量和$P$的点乘结果都是正数, 任何在平面另一侧的向量和$P$的点乘结果是负数.<br>下面还有一些点乘的性质:</p>\n<blockquote>\n<p><strong>定理2.5 给定任意一个标量$a$ 和任意三个向量$P,Q,R$, 下面性质成立.</strong><br>(a). $P \\cdot Q = Q \\cdot P$<br>(b). $(aP) \\cdot = a(P \\cdot Q)$<br>(c). $P \\cdot (Q + R) = P \\cdot Q + P \\cdot R$<br>(d). $P \\cdot P = \\left \\|P \\right \\|^2$<br>(e). $\\left | P \\cdot Q \\right | \\leqslant \\left \\|P \\right \\| \\left \\|Q \\right \\|$</p>\n</blockquote>\n<p>向量点乘的另一个应用场景就是分解向量$P$的分量, 得到垂直或者平行于另外一个向量$Q$的分量. 就像在<code>图2.4</code>所展示的一样, 如果我们将向量$P$看做是一个直角三角形的斜边, 然后将向量$P$在垂直于向量$Q$的方向上投影, 将会产生一条直角边. 在向量$P$和$Q$之间的夹角为$\\alpha$<br>由三角学我们可以得知: $\\alpha$的邻边的长度为$\\left \\|P \\right \\| \\cos \\alpha$, 从<code>定理2.4</code>我们可以得知: 不知道角度$\\alpha$同样可以获取它的长度:<br>$$<br>\\left \\|P \\right \\| \\cos \\alpha = \\frac{P \\cdot Q}{\\left \\| Q \\right \\|}<br>\\tag{2.17}$$<br>为了获取到一个长度和它一样的平行于$Q$的向量,可以用<code>公式(2.7)</code>的右边乘以$Q$的单位向量$\\frac{Q}{\\left \\|Q \\right \\|}$. 我们用下面的公式来得到$P$在$Q$方向上的投影向量$proj_QP$:<br>$$<br>proj_QP = \\frac{P \\cdot Q}{\\left \\|Q \\right \\|^2}Q<br>\\tag{2.18}$$</p>\n<blockquote>\n<p><img src=\"/img/201708/2017-08-29 5.38.28.png\" alt=\"图2.4(来自原书截图)\"><br>向量$P$在向量$Q$上的投影向量的长度等于$\\frac{P \\cdot Q}{\\left \\| Q \\right \\|}$是因为$P \\cdot Q = \\left \\| P \\right \\| \\left \\|Q \\right \\| \\cos \\alpha$.</p>\n</blockquote>\n"},{"title":"Unity3D特定文件的打开方式","date":"2018-02-10T13:49:52.000Z","_content":"\n> 在Unity3D编辑器中，双击Shader文件默认的打开应用是和c#脚本一致，一般是Visual Studio。但是Visual Studio原生并没有提供对ShaderLab的语法支持。一般情况下都是用Sublime Text或者Visual Studio Code来作为Shader的编辑器。但是如果能够双击Shader文件直接打开对应的编辑器就再好不过了，后来知道Unity3D提供了编辑器扩展，允许我们监听文件双击打开的消息。是通过 <u>`UnityEdtitor.Callbacks`</u> 来实现的。具体见如下代码\n\n\n### 1. 示例代码\n\n``` csharp\nusing UnityEngine;\nusing UnityEditor;\nusing UnityEditor.Callbacks;\nusing System.IO;\n\npublic class FileopenHandler\n{\n    public static string sublimeTextPath = @\"D:\\Develop_Tools\\Sublime Text 3\\sublime_text.exe\";\n    [OnOpenAsset]\n    public static bool OnOpenShaderFile(int instanceId, int line)\n    {\n        if (EditorUtility.InstanceIDToObject(instanceId) is Shader)\n        {\n            string assetPath = AssetDatabase.GetAssetPath(instanceId);\n            string fullPath = Path.GetFullPath(assetPath);\n            System.Diagnostics.Process process = new System.Diagnostics.Process();\n            System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();\n            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;\n            startInfo.FileName = sublimeTextPath;\n            startInfo.Arguments = \"\\\"\" + fullPath + \"\\\"\";\n            process.StartInfo = startInfo;\n            process.Start();\n            return true;\n        }\n        return false;\n    }\n}\n```\n\n### 2.解释说明\n\n以上代码关键部分在于`[OnOpenAsset]`这个属性。这里告诉Unity3D编辑器，当双击打开一个资源的时候执行下面这个函数。逻辑里面就通过参数实例ID拿到这个资源，判断如果是`Shader`类型的时候，就使用SublimeText编辑器来打开， 其中`sublimeTextPath`保存的是自己电脑上的Sublime路径。需要替换成自己电脑上的路径。","source":"_posts/Unity3D特定文件的打开方式.md","raw":"---\ntitle: Unity3D特定文件的打开方式\ndate: 2018-02-10 21:49:52\ntags: Unity3D\n---\n\n> 在Unity3D编辑器中，双击Shader文件默认的打开应用是和c#脚本一致，一般是Visual Studio。但是Visual Studio原生并没有提供对ShaderLab的语法支持。一般情况下都是用Sublime Text或者Visual Studio Code来作为Shader的编辑器。但是如果能够双击Shader文件直接打开对应的编辑器就再好不过了，后来知道Unity3D提供了编辑器扩展，允许我们监听文件双击打开的消息。是通过 <u>`UnityEdtitor.Callbacks`</u> 来实现的。具体见如下代码\n\n\n### 1. 示例代码\n\n``` csharp\nusing UnityEngine;\nusing UnityEditor;\nusing UnityEditor.Callbacks;\nusing System.IO;\n\npublic class FileopenHandler\n{\n    public static string sublimeTextPath = @\"D:\\Develop_Tools\\Sublime Text 3\\sublime_text.exe\";\n    [OnOpenAsset]\n    public static bool OnOpenShaderFile(int instanceId, int line)\n    {\n        if (EditorUtility.InstanceIDToObject(instanceId) is Shader)\n        {\n            string assetPath = AssetDatabase.GetAssetPath(instanceId);\n            string fullPath = Path.GetFullPath(assetPath);\n            System.Diagnostics.Process process = new System.Diagnostics.Process();\n            System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();\n            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;\n            startInfo.FileName = sublimeTextPath;\n            startInfo.Arguments = \"\\\"\" + fullPath + \"\\\"\";\n            process.StartInfo = startInfo;\n            process.Start();\n            return true;\n        }\n        return false;\n    }\n}\n```\n\n### 2.解释说明\n\n以上代码关键部分在于`[OnOpenAsset]`这个属性。这里告诉Unity3D编辑器，当双击打开一个资源的时候执行下面这个函数。逻辑里面就通过参数实例ID拿到这个资源，判断如果是`Shader`类型的时候，就使用SublimeText编辑器来打开， 其中`sublimeTextPath`保存的是自己电脑上的Sublime路径。需要替换成自己电脑上的路径。","slug":"Unity3D特定文件的打开方式","published":1,"updated":"2018-02-10T14:11:14.262Z","_id":"cjhu06juj0005fkqcbwb8ntql","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>在Unity3D编辑器中，双击Shader文件默认的打开应用是和c#脚本一致，一般是Visual Studio。但是Visual Studio原生并没有提供对ShaderLab的语法支持。一般情况下都是用Sublime Text或者Visual Studio Code来作为Shader的编辑器。但是如果能够双击Shader文件直接打开对应的编辑器就再好不过了，后来知道Unity3D提供了编辑器扩展，允许我们监听文件双击打开的消息。是通过 <u><code>UnityEdtitor.Callbacks</code></u> 来实现的。具体见如下代码</p>\n</blockquote>\n<h3 id=\"1-示例代码\"><a href=\"#1-示例代码\" class=\"headerlink\" title=\"1. 示例代码\"></a>1. 示例代码</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</span><br><span class=\"line\"><span class=\"keyword\">using</span> UnityEditor;</span><br><span class=\"line\"><span class=\"keyword\">using</span> UnityEditor.Callbacks;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">FileopenHandler</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> sublimeTextPath = <span class=\"string\">@\"D:\\Develop_Tools\\Sublime Text 3\\sublime_text.exe\"</span>;</span><br><span class=\"line\">    [<span class=\"meta\">OnOpenAsset</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">OnOpenShaderFile</span>(<span class=\"params\"><span class=\"keyword\">int</span> instanceId, <span class=\"keyword\">int</span> line</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (EditorUtility.InstanceIDToObject(instanceId) <span class=\"keyword\">is</span> Shader)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">string</span> assetPath = AssetDatabase.GetAssetPath(instanceId);</span><br><span class=\"line\">            <span class=\"keyword\">string</span> fullPath = Path.GetFullPath(assetPath);</span><br><span class=\"line\">            System.Diagnostics.Process process = <span class=\"keyword\">new</span> System.Diagnostics.Process();</span><br><span class=\"line\">            System.Diagnostics.ProcessStartInfo startInfo = <span class=\"keyword\">new</span> System.Diagnostics.ProcessStartInfo();</span><br><span class=\"line\">            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;</span><br><span class=\"line\">            startInfo.FileName = sublimeTextPath;</span><br><span class=\"line\">            startInfo.Arguments = <span class=\"string\">\"\\\"\"</span> + fullPath + <span class=\"string\">\"\\\"\"</span>;</span><br><span class=\"line\">            process.StartInfo = startInfo;</span><br><span class=\"line\">            process.Start();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-解释说明\"><a href=\"#2-解释说明\" class=\"headerlink\" title=\"2.解释说明\"></a>2.解释说明</h3><p>以上代码关键部分在于<code>[OnOpenAsset]</code>这个属性。这里告诉Unity3D编辑器，当双击打开一个资源的时候执行下面这个函数。逻辑里面就通过参数实例ID拿到这个资源，判断如果是<code>Shader</code>类型的时候，就使用SublimeText编辑器来打开， 其中<code>sublimeTextPath</code>保存的是自己电脑上的Sublime路径。需要替换成自己电脑上的路径。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在Unity3D编辑器中，双击Shader文件默认的打开应用是和c#脚本一致，一般是Visual Studio。但是Visual Studio原生并没有提供对ShaderLab的语法支持。一般情况下都是用Sublime Text或者Visual Studio Code来作为Shader的编辑器。但是如果能够双击Shader文件直接打开对应的编辑器就再好不过了，后来知道Unity3D提供了编辑器扩展，允许我们监听文件双击打开的消息。是通过 <u><code>UnityEdtitor.Callbacks</code></u> 来实现的。具体见如下代码</p>\n</blockquote>\n<h3 id=\"1-示例代码\"><a href=\"#1-示例代码\" class=\"headerlink\" title=\"1. 示例代码\"></a>1. 示例代码</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</span><br><span class=\"line\"><span class=\"keyword\">using</span> UnityEditor;</span><br><span class=\"line\"><span class=\"keyword\">using</span> UnityEditor.Callbacks;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">FileopenHandler</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> sublimeTextPath = <span class=\"string\">@\"D:\\Develop_Tools\\Sublime Text 3\\sublime_text.exe\"</span>;</span><br><span class=\"line\">    [<span class=\"meta\">OnOpenAsset</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">OnOpenShaderFile</span>(<span class=\"params\"><span class=\"keyword\">int</span> instanceId, <span class=\"keyword\">int</span> line</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (EditorUtility.InstanceIDToObject(instanceId) <span class=\"keyword\">is</span> Shader)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">string</span> assetPath = AssetDatabase.GetAssetPath(instanceId);</span><br><span class=\"line\">            <span class=\"keyword\">string</span> fullPath = Path.GetFullPath(assetPath);</span><br><span class=\"line\">            System.Diagnostics.Process process = <span class=\"keyword\">new</span> System.Diagnostics.Process();</span><br><span class=\"line\">            System.Diagnostics.ProcessStartInfo startInfo = <span class=\"keyword\">new</span> System.Diagnostics.ProcessStartInfo();</span><br><span class=\"line\">            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;</span><br><span class=\"line\">            startInfo.FileName = sublimeTextPath;</span><br><span class=\"line\">            startInfo.Arguments = <span class=\"string\">\"\\\"\"</span> + fullPath + <span class=\"string\">\"\\\"\"</span>;</span><br><span class=\"line\">            process.StartInfo = startInfo;</span><br><span class=\"line\">            process.Start();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-解释说明\"><a href=\"#2-解释说明\" class=\"headerlink\" title=\"2.解释说明\"></a>2.解释说明</h3><p>以上代码关键部分在于<code>[OnOpenAsset]</code>这个属性。这里告诉Unity3D编辑器，当双击打开一个资源的时候执行下面这个函数。逻辑里面就通过参数实例ID拿到这个资源，判断如果是<code>Shader</code>类型的时候，就使用SublimeText编辑器来打开， 其中<code>sublimeTextPath</code>保存的是自己电脑上的Sublime路径。需要替换成自己电脑上的路径。</p>\n"},{"title":"[游戏编程模式]阅读笔记","date":"2017-08-24T06:10:53.000Z","_content":"","source":"_posts/游戏编程模式-阅读笔记.md","raw":"---\ntitle: '[游戏编程模式]阅读笔记'\ndate: 2017-08-24 14:10:53\ntags:\n---\n","slug":"游戏编程模式-阅读笔记","published":1,"updated":"2018-03-05T01:12:07.993Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhu06jul0006fkqc6pnkjmkk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"高数等价无穷小替换公式","date":"2018-03-02T15:32:39.000Z","_content":"\n> 高等数学学习中求极限的常用等价无穷小替换公式\n\n(1)  $\\sin x \\sim x$\n(2)  $1 - \\cos x \\sim \\frac{1}{2} x^2$\n(3)  $\\tan x \\sim x$\n(4)  $\\arcsin x \\sim x$\n(5)  $\\arctan x \\sim x$\n(6)  $a^x - 1 \\sim x\\ln a$\n(7)  $\\ln(x+1) \\sim x$\n(8)  $(1+ \\beta x)^a - 1 \\sim a\\beta x$\n(9)  $\\log{_a}{(1+x)} \\sim \\frac{x}{\\ln a}$\n(10) $x - \\sin x \\sim \\frac{x^3}{6}$","source":"_posts/高数等价无穷小替换公式.md","raw":"---\ntitle: 高数等价无穷小替换公式\ndate: 2018-03-02 23:32:39\ntags: 高等数学\n---\n\n> 高等数学学习中求极限的常用等价无穷小替换公式\n\n(1)  $\\sin x \\sim x$\n(2)  $1 - \\cos x \\sim \\frac{1}{2} x^2$\n(3)  $\\tan x \\sim x$\n(4)  $\\arcsin x \\sim x$\n(5)  $\\arctan x \\sim x$\n(6)  $a^x - 1 \\sim x\\ln a$\n(7)  $\\ln(x+1) \\sim x$\n(8)  $(1+ \\beta x)^a - 1 \\sim a\\beta x$\n(9)  $\\log{_a}{(1+x)} \\sim \\frac{x}{\\ln a}$\n(10) $x - \\sin x \\sim \\frac{x^3}{6}$","slug":"高数等价无穷小替换公式","published":1,"updated":"2018-03-02T15:57:59.178Z","_id":"cjhu06jum0007fkqc8uh35qt7","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>高等数学学习中求极限的常用等价无穷小替换公式</p>\n</blockquote>\n<p>(1)  $\\sin x \\sim x$<br>(2)  $1 - \\cos x \\sim \\frac{1}{2} x^2$<br>(3)  $\\tan x \\sim x$<br>(4)  $\\arcsin x \\sim x$<br>(5)  $\\arctan x \\sim x$<br>(6)  $a^x - 1 \\sim x\\ln a$<br>(7)  $\\ln(x+1) \\sim x$<br>(8)  $(1+ \\beta x)^a - 1 \\sim a\\beta x$<br>(9)  $\\log{_a}{(1+x)} \\sim \\frac{x}{\\ln a}$<br>(10) $x - \\sin x \\sim \\frac{x^3}{6}$</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>高等数学学习中求极限的常用等价无穷小替换公式</p>\n</blockquote>\n<p>(1)  $\\sin x \\sim x$<br>(2)  $1 - \\cos x \\sim \\frac{1}{2} x^2$<br>(3)  $\\tan x \\sim x$<br>(4)  $\\arcsin x \\sim x$<br>(5)  $\\arctan x \\sim x$<br>(6)  $a^x - 1 \\sim x\\ln a$<br>(7)  $\\ln(x+1) \\sim x$<br>(8)  $(1+ \\beta x)^a - 1 \\sim a\\beta x$<br>(9)  $\\log{_a}{(1+x)} \\sim \\frac{x}{\\ln a}$<br>(10) $x - \\sin x \\sim \\frac{x^3}{6}$</p>\n"},{"title":"Unity surface shader 学习（一）-- Material, Shader, Texture扫盲篇","date":"2018-02-10T15:16:46.000Z","_content":"\n# Unity surface shader 学习（一）\n\n写在前面的话：\n> 本博客是我学习Unity shader过程中所记录的笔记，前期的学习都是跟随unity官方文档来学习的\n\n#### 一. unity shader的分类\n+ 表面着色器\n+ 定点着色器和片段着色器\n+ 固定功能着色器\n\n其中，固定功能着色器不做深入学习，这里的学习主要指的是**表面着色器**和**顶点、片段着色器**\n\n#### 二. unity中的渲染方式\n在unity中，渲染是通过**材质**，**shader**和**纹理**来实现的。下面，简单来介绍一下这三者在渲染中各自的功能以及相互之间的联系。\n1.  **材质(Material): ** \n\t描述了一个模型表面的渲染细节和方式。包括了引用的**纹理(Texture)**, 以及纹理是如何覆盖在模型表面的(通过UV来实现)，以及颜色，等各种表现出来的视觉效果。具体有多少，这跟这个材质引用的**shader**有关。这里我觉得和我们生活中所说的材质很类似：生活中我们分辨一个物体的材质最直观快捷的办法就是通过它的外在表现形式。\n2. **着色器(Shader): **\n\t先来看看官网是如何描述的\n> Shaders are small scripts that contain the mathematical calculations and algorithms for calculating the colour of each pixel rendered, based on the lighting input and the Material configuration.\n意思就是说着色器就是负责计算每个被渲染的像素的颜色，它是基于光照的，并且可以通过**材质**来调节一些细节和配置。其实，经常在3D引擎中听到的渲染就是通过shader来实现的。\n3. **纹理(Textuer): **\n\t一般说的纹理，其实就是一张2D位图(bitmap)。没什么深层次的含义。\n\n**他们之间的区别：**\n\t一个**材质**通常需要指定一个**shader**，而**shader**却决定了材质可用的选项（指的是材质的功能和那些可调节的部分，在**Material**的**Inspector面板**中可调节的部分），shader还指定了一个或者多个**纹理**。\n***结论：*** **unity中的材质是shader的载体，提供了一种可视化的方式来对shader的一些参数做调节。材质所表现出来的渲染效果是shader通过计算和处理了它所引用纹理之后所达成的。纹理则是渲染中必不可少的一部分（如果你需要华丽的效果）。**\n","source":"_posts/Unity3D着色器学习-一.md","raw":"---\ntitle: Unity surface shader 学习（一）-- Material, Shader, Texture扫盲篇\ndate: 2018-02-10 23:16:46\ntags: [Unity3D, Shader]\n---\n\n# Unity surface shader 学习（一）\n\n写在前面的话：\n> 本博客是我学习Unity shader过程中所记录的笔记，前期的学习都是跟随unity官方文档来学习的\n\n#### 一. unity shader的分类\n+ 表面着色器\n+ 定点着色器和片段着色器\n+ 固定功能着色器\n\n其中，固定功能着色器不做深入学习，这里的学习主要指的是**表面着色器**和**顶点、片段着色器**\n\n#### 二. unity中的渲染方式\n在unity中，渲染是通过**材质**，**shader**和**纹理**来实现的。下面，简单来介绍一下这三者在渲染中各自的功能以及相互之间的联系。\n1.  **材质(Material): ** \n\t描述了一个模型表面的渲染细节和方式。包括了引用的**纹理(Texture)**, 以及纹理是如何覆盖在模型表面的(通过UV来实现)，以及颜色，等各种表现出来的视觉效果。具体有多少，这跟这个材质引用的**shader**有关。这里我觉得和我们生活中所说的材质很类似：生活中我们分辨一个物体的材质最直观快捷的办法就是通过它的外在表现形式。\n2. **着色器(Shader): **\n\t先来看看官网是如何描述的\n> Shaders are small scripts that contain the mathematical calculations and algorithms for calculating the colour of each pixel rendered, based on the lighting input and the Material configuration.\n意思就是说着色器就是负责计算每个被渲染的像素的颜色，它是基于光照的，并且可以通过**材质**来调节一些细节和配置。其实，经常在3D引擎中听到的渲染就是通过shader来实现的。\n3. **纹理(Textuer): **\n\t一般说的纹理，其实就是一张2D位图(bitmap)。没什么深层次的含义。\n\n**他们之间的区别：**\n\t一个**材质**通常需要指定一个**shader**，而**shader**却决定了材质可用的选项（指的是材质的功能和那些可调节的部分，在**Material**的**Inspector面板**中可调节的部分），shader还指定了一个或者多个**纹理**。\n***结论：*** **unity中的材质是shader的载体，提供了一种可视化的方式来对shader的一些参数做调节。材质所表现出来的渲染效果是shader通过计算和处理了它所引用纹理之后所达成的。纹理则是渲染中必不可少的一部分（如果你需要华丽的效果）。**\n","slug":"Unity3D着色器学习-一","published":1,"updated":"2018-05-30T09:39:28.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhu06jup000afkqck3k2rmxp","content":"<h1 id=\"Unity-surface-shader-学习（一）\"><a href=\"#Unity-surface-shader-学习（一）\" class=\"headerlink\" title=\"Unity surface shader 学习（一）\"></a>Unity surface shader 学习（一）</h1><p>写在前面的话：</p>\n<blockquote>\n<p>本博客是我学习Unity shader过程中所记录的笔记，前期的学习都是跟随unity官方文档来学习的</p>\n</blockquote>\n<h4 id=\"一-unity-shader的分类\"><a href=\"#一-unity-shader的分类\" class=\"headerlink\" title=\"一. unity shader的分类\"></a>一. unity shader的分类</h4><ul>\n<li>表面着色器</li>\n<li>定点着色器和片段着色器</li>\n<li>固定功能着色器</li>\n</ul>\n<p>其中，固定功能着色器不做深入学习，这里的学习主要指的是<strong>表面着色器</strong>和<strong>顶点、片段着色器</strong></p>\n<h4 id=\"二-unity中的渲染方式\"><a href=\"#二-unity中的渲染方式\" class=\"headerlink\" title=\"二. unity中的渲染方式\"></a>二. unity中的渲染方式</h4><p>在unity中，渲染是通过<strong>材质</strong>，<strong>shader</strong>和<strong>纹理</strong>来实现的。下面，简单来介绍一下这三者在渲染中各自的功能以及相互之间的联系。</p>\n<ol>\n<li><strong>材质(Material): </strong><br>描述了一个模型表面的渲染细节和方式。包括了引用的<strong>纹理(Texture)</strong>, 以及纹理是如何覆盖在模型表面的(通过UV来实现)，以及颜色，等各种表现出来的视觉效果。具体有多少，这跟这个材质引用的<strong>shader</strong>有关。这里我觉得和我们生活中所说的材质很类似：生活中我们分辨一个物体的材质最直观快捷的办法就是通过它的外在表现形式。</li>\n<li><strong>着色器(Shader): </strong><br> 先来看看官网是如何描述的<blockquote>\n<p>Shaders are small scripts that contain the mathematical calculations and algorithms for calculating the colour of each pixel rendered, based on the lighting input and the Material configuration.<br>意思就是说着色器就是负责计算每个被渲染的像素的颜色，它是基于光照的，并且可以通过<strong>材质</strong>来调节一些细节和配置。其实，经常在3D引擎中听到的渲染就是通过shader来实现的。</p>\n</blockquote>\n</li>\n<li><strong>纹理(Textuer): </strong><br> 一般说的纹理，其实就是一张2D位图(bitmap)。没什么深层次的含义。</li>\n</ol>\n<p><strong>他们之间的区别：</strong><br>    一个<strong>材质</strong>通常需要指定一个<strong>shader</strong>，而<strong>shader</strong>却决定了材质可用的选项（指的是材质的功能和那些可调节的部分，在<strong>Material</strong>的<strong>Inspector面板</strong>中可调节的部分），shader还指定了一个或者多个<strong>纹理</strong>。<br><strong><em>结论：</em></strong> <strong>unity中的材质是shader的载体，提供了一种可视化的方式来对shader的一些参数做调节。材质所表现出来的渲染效果是shader通过计算和处理了它所引用纹理之后所达成的。纹理则是渲染中必不可少的一部分（如果你需要华丽的效果）。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Unity-surface-shader-学习（一）\"><a href=\"#Unity-surface-shader-学习（一）\" class=\"headerlink\" title=\"Unity surface shader 学习（一）\"></a>Unity surface shader 学习（一）</h1><p>写在前面的话：</p>\n<blockquote>\n<p>本博客是我学习Unity shader过程中所记录的笔记，前期的学习都是跟随unity官方文档来学习的</p>\n</blockquote>\n<h4 id=\"一-unity-shader的分类\"><a href=\"#一-unity-shader的分类\" class=\"headerlink\" title=\"一. unity shader的分类\"></a>一. unity shader的分类</h4><ul>\n<li>表面着色器</li>\n<li>定点着色器和片段着色器</li>\n<li>固定功能着色器</li>\n</ul>\n<p>其中，固定功能着色器不做深入学习，这里的学习主要指的是<strong>表面着色器</strong>和<strong>顶点、片段着色器</strong></p>\n<h4 id=\"二-unity中的渲染方式\"><a href=\"#二-unity中的渲染方式\" class=\"headerlink\" title=\"二. unity中的渲染方式\"></a>二. unity中的渲染方式</h4><p>在unity中，渲染是通过<strong>材质</strong>，<strong>shader</strong>和<strong>纹理</strong>来实现的。下面，简单来介绍一下这三者在渲染中各自的功能以及相互之间的联系。</p>\n<ol>\n<li><strong>材质(Material): </strong><br>描述了一个模型表面的渲染细节和方式。包括了引用的<strong>纹理(Texture)</strong>, 以及纹理是如何覆盖在模型表面的(通过UV来实现)，以及颜色，等各种表现出来的视觉效果。具体有多少，这跟这个材质引用的<strong>shader</strong>有关。这里我觉得和我们生活中所说的材质很类似：生活中我们分辨一个物体的材质最直观快捷的办法就是通过它的外在表现形式。</li>\n<li><strong>着色器(Shader): </strong><br> 先来看看官网是如何描述的<blockquote>\n<p>Shaders are small scripts that contain the mathematical calculations and algorithms for calculating the colour of each pixel rendered, based on the lighting input and the Material configuration.<br>意思就是说着色器就是负责计算每个被渲染的像素的颜色，它是基于光照的，并且可以通过<strong>材质</strong>来调节一些细节和配置。其实，经常在3D引擎中听到的渲染就是通过shader来实现的。</p>\n</blockquote>\n</li>\n<li><strong>纹理(Textuer): </strong><br> 一般说的纹理，其实就是一张2D位图(bitmap)。没什么深层次的含义。</li>\n</ol>\n<p><strong>他们之间的区别：</strong><br>    一个<strong>材质</strong>通常需要指定一个<strong>shader</strong>，而<strong>shader</strong>却决定了材质可用的选项（指的是材质的功能和那些可调节的部分，在<strong>Material</strong>的<strong>Inspector面板</strong>中可调节的部分），shader还指定了一个或者多个<strong>纹理</strong>。<br><strong><em>结论：</em></strong> <strong>unity中的材质是shader的载体，提供了一种可视化的方式来对shader的一些参数做调节。材质所表现出来的渲染效果是shader通过计算和处理了它所引用纹理之后所达成的。纹理则是渲染中必不可少的一部分（如果你需要华丽的效果）。</strong></p>\n"},{"title":"Unity3D Shader学习(二)--表面着色器结构","date":"2018-05-30T11:41:03.000Z","_content":"# Unity3D Shader学习(二)--表面着色器结构\n\n写在前面的话：\n> 本博客是我学习Unity shader过程中所记录的笔记，前期的学习都是跟随unity官方文档来学习的\n\n#### 一.表面着色器的工作方式\n在表面着色器中，把需要的数据作为\"表面函数\"的输入，计算后用来初始化结构`SurfaceOutput`。下面就先来看看它的结构是什么样的\n```c\nstruct SurfaceOutput\n{\n    fixed3 Albedo;  // diffuse color\n    fixed3 Normal;  // tangent space normal, if written\n    fixed3 Emission;\n    half Specular;  // specular power in 0..1 range\n    fixed Gloss;    // specular intensity\n    fixed Alpha;    // alpha for transparencies\n};\n```\n**特别说明一下: ** 在unity5中，表面着色器也可以使用基于物理的光照模型。内置的标准光照和标准镜面反射模型会使用下面的输出结构\n```c\nstruct SurfaceOutputStandard\n{\n    fixed3 Albedo;      // base (diffuse or specular) color\n    fixed3 Normal;      // tangent space normal, if written\n    half3 Emission;\n    half Metallic;      // 0=non-metal, 1=metal\n    half Smoothness;    // 0=rough, 1=smooth\n    half Occlusion;     // occlusion (default 1)\n    fixed Alpha;        // alpha for transparencies\n};\nstruct SurfaceOutputStandardSpecular\n{\n    fixed3 Albedo;      // diffuse color\n    fixed3 Specular;    // specular color\n    fixed3 Normal;      // tangent space normal, if written\n    half3 Emission;\n    half Smoothness;    // 0=rough, 1=smooth\n    half Occlusion;     // occlusion (default 1)\n    fixed Alpha;        // alpha for transparencies\n};\n```\n#### 二.表面着色器的编译指令\n表面着色器是放在`CGPROGRAM..ENDCG`代码块中的，和其他shader 所不同的主要有以下两点：\n+ 必须被放置在`SubShader`代码块中，而不是在`Pass`块中\n+ 必须使用`#pragma surface ...`指令来指定它的`surface`函数\n\n`#pragma surface`指令的具体格式如下面所示：\n```c\n#pragma surface surfaceFunction lightModel [optionalparams]\n```\n\n***下面将会来细致介绍参数***\n\n##### 必选参数\n+ `surfaceFunction`: 这个参数就是我们的表面函数了，它的函数签名是`void surf (Input IN, inout SurfaceOutput o)`。这里的`Input`类型是一个需要自己去定义的结构体(需要遵循它的标准，准确地说是去定制)。这个结构里面应该包含纹理坐标和表面函数所需要的一些额外字段。\n+ `lightModel`: 光照模型，就是指定shader所使用的光照模型。内置的有基于物理的`Standard`和`StandardSpecular`,当然，也可以使用不基于物理的`Lambert(diffuse)`和`BlinnPhong(specular)`。\n\n##### 可选参数\n可选参数比较多，这里不一一列出来，需要[点我查看][1_unity_surface_shader_ref]\n\n##### 表面着色器的输入结构\n表面着色器的输入结构`Input`通常有一个shader所需要的纹理。需要注意的是，纹理坐标字段的名字必须以`\"uv\"`开头(或者以`\"uv2\"`开头标识第二个纹理坐标)。\n下面的列表展示了`Input`结构的可选额外字段\n+ `float3 viewDir`: 顾名思义，这个字段表示了当前视角方向，即表示摄像机的正前方的向量。通常用来计算一些视差效果和边缘光的效果等。\n+ `float4 : COLOR`: 带有`COLOR`语义的字段，表示每个顶点的颜色，顶点之间采用差值来确定颜色。\n+ `float4 screenPos`: 表示屏幕空间的位置，主要用来反射效果或者屏幕空间的效果实现。\n+ `float3 wordPos`: 在世界空间的位置。\n+ `float3 worldRefl`: 如果`surface shader`不写`o.Normal`那么将表示世界空间中的反射向量。\n+ `float3 worldNormal`: 如果`surface shader`不写`o.Normal`,那么用来表示世界空间中的法向量。\n+ `float3 wroldRefl`: 如果`surface shader`写了`o.Normal`, 那么这个字段表示世界空间中的反射向量。如果想要获取逐像素法线贴图的反射向量，使用`WorldReflectionVector (IN, o.Normal)`\n+ `float3 worldNormal`: 如果`surface shader`写了`o.Normal`, 那么这个字段表示世界空间的法向量。如果想获取逐像素法线贴图的法向量，使用`WorldNormalVector (IN, o.Normal)` \n\n\n\n\n（未完，待续）\n\n\n\n[1_unity_surface_shader_ref]: https://docs.unity3d.com/Manual/SL-SurfaceShaders.html","source":"_posts/Unity3D-Shader学习-二-表面着色器结构.md","raw":"---\ntitle: Unity3D Shader学习(二)--表面着色器结构\ndate: 2018-05-30 19:41:03\ntags:  [Unity3D, Shader]\n---\n# Unity3D Shader学习(二)--表面着色器结构\n\n写在前面的话：\n> 本博客是我学习Unity shader过程中所记录的笔记，前期的学习都是跟随unity官方文档来学习的\n\n#### 一.表面着色器的工作方式\n在表面着色器中，把需要的数据作为\"表面函数\"的输入，计算后用来初始化结构`SurfaceOutput`。下面就先来看看它的结构是什么样的\n```c\nstruct SurfaceOutput\n{\n    fixed3 Albedo;  // diffuse color\n    fixed3 Normal;  // tangent space normal, if written\n    fixed3 Emission;\n    half Specular;  // specular power in 0..1 range\n    fixed Gloss;    // specular intensity\n    fixed Alpha;    // alpha for transparencies\n};\n```\n**特别说明一下: ** 在unity5中，表面着色器也可以使用基于物理的光照模型。内置的标准光照和标准镜面反射模型会使用下面的输出结构\n```c\nstruct SurfaceOutputStandard\n{\n    fixed3 Albedo;      // base (diffuse or specular) color\n    fixed3 Normal;      // tangent space normal, if written\n    half3 Emission;\n    half Metallic;      // 0=non-metal, 1=metal\n    half Smoothness;    // 0=rough, 1=smooth\n    half Occlusion;     // occlusion (default 1)\n    fixed Alpha;        // alpha for transparencies\n};\nstruct SurfaceOutputStandardSpecular\n{\n    fixed3 Albedo;      // diffuse color\n    fixed3 Specular;    // specular color\n    fixed3 Normal;      // tangent space normal, if written\n    half3 Emission;\n    half Smoothness;    // 0=rough, 1=smooth\n    half Occlusion;     // occlusion (default 1)\n    fixed Alpha;        // alpha for transparencies\n};\n```\n#### 二.表面着色器的编译指令\n表面着色器是放在`CGPROGRAM..ENDCG`代码块中的，和其他shader 所不同的主要有以下两点：\n+ 必须被放置在`SubShader`代码块中，而不是在`Pass`块中\n+ 必须使用`#pragma surface ...`指令来指定它的`surface`函数\n\n`#pragma surface`指令的具体格式如下面所示：\n```c\n#pragma surface surfaceFunction lightModel [optionalparams]\n```\n\n***下面将会来细致介绍参数***\n\n##### 必选参数\n+ `surfaceFunction`: 这个参数就是我们的表面函数了，它的函数签名是`void surf (Input IN, inout SurfaceOutput o)`。这里的`Input`类型是一个需要自己去定义的结构体(需要遵循它的标准，准确地说是去定制)。这个结构里面应该包含纹理坐标和表面函数所需要的一些额外字段。\n+ `lightModel`: 光照模型，就是指定shader所使用的光照模型。内置的有基于物理的`Standard`和`StandardSpecular`,当然，也可以使用不基于物理的`Lambert(diffuse)`和`BlinnPhong(specular)`。\n\n##### 可选参数\n可选参数比较多，这里不一一列出来，需要[点我查看][1_unity_surface_shader_ref]\n\n##### 表面着色器的输入结构\n表面着色器的输入结构`Input`通常有一个shader所需要的纹理。需要注意的是，纹理坐标字段的名字必须以`\"uv\"`开头(或者以`\"uv2\"`开头标识第二个纹理坐标)。\n下面的列表展示了`Input`结构的可选额外字段\n+ `float3 viewDir`: 顾名思义，这个字段表示了当前视角方向，即表示摄像机的正前方的向量。通常用来计算一些视差效果和边缘光的效果等。\n+ `float4 : COLOR`: 带有`COLOR`语义的字段，表示每个顶点的颜色，顶点之间采用差值来确定颜色。\n+ `float4 screenPos`: 表示屏幕空间的位置，主要用来反射效果或者屏幕空间的效果实现。\n+ `float3 wordPos`: 在世界空间的位置。\n+ `float3 worldRefl`: 如果`surface shader`不写`o.Normal`那么将表示世界空间中的反射向量。\n+ `float3 worldNormal`: 如果`surface shader`不写`o.Normal`,那么用来表示世界空间中的法向量。\n+ `float3 wroldRefl`: 如果`surface shader`写了`o.Normal`, 那么这个字段表示世界空间中的反射向量。如果想要获取逐像素法线贴图的反射向量，使用`WorldReflectionVector (IN, o.Normal)`\n+ `float3 worldNormal`: 如果`surface shader`写了`o.Normal`, 那么这个字段表示世界空间的法向量。如果想获取逐像素法线贴图的法向量，使用`WorldNormalVector (IN, o.Normal)` \n\n\n\n\n（未完，待续）\n\n\n\n[1_unity_surface_shader_ref]: https://docs.unity3d.com/Manual/SL-SurfaceShaders.html","slug":"Unity3D-Shader学习-二-表面着色器结构","published":1,"updated":"2018-06-17T01:59:40.864Z","_id":"cjhu06juq000bfkqcgikndi98","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Unity3D-Shader学习-二-–表面着色器结构\"><a href=\"#Unity3D-Shader学习-二-–表面着色器结构\" class=\"headerlink\" title=\"Unity3D Shader学习(二)–表面着色器结构\"></a>Unity3D Shader学习(二)–表面着色器结构</h1><p>写在前面的话：</p>\n<blockquote>\n<p>本博客是我学习Unity shader过程中所记录的笔记，前期的学习都是跟随unity官方文档来学习的</p>\n</blockquote>\n<h4 id=\"一-表面着色器的工作方式\"><a href=\"#一-表面着色器的工作方式\" class=\"headerlink\" title=\"一.表面着色器的工作方式\"></a>一.表面着色器的工作方式</h4><p>在表面着色器中，把需要的数据作为”表面函数”的输入，计算后用来初始化结构<code>SurfaceOutput</code>。下面就先来看看它的结构是什么样的<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SurfaceOutput</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    fixed3 Albedo;  <span class=\"comment\">// diffuse color</span></span><br><span class=\"line\">    fixed3 Normal;  <span class=\"comment\">// tangent space normal, if written</span></span><br><span class=\"line\">    fixed3 Emission;</span><br><span class=\"line\">    half Specular;  <span class=\"comment\">// specular power in 0..1 range</span></span><br><span class=\"line\">    fixed Gloss;    <span class=\"comment\">// specular intensity</span></span><br><span class=\"line\">    fixed Alpha;    <span class=\"comment\">// alpha for transparencies</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p><strong>特别说明一下: </strong> 在unity5中，表面着色器也可以使用基于物理的光照模型。内置的标准光照和标准镜面反射模型会使用下面的输出结构<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SurfaceOutputStandard</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    fixed3 Albedo;      <span class=\"comment\">// base (diffuse or specular) color</span></span><br><span class=\"line\">    fixed3 Normal;      <span class=\"comment\">// tangent space normal, if written</span></span><br><span class=\"line\">    half3 Emission;</span><br><span class=\"line\">    half Metallic;      <span class=\"comment\">// 0=non-metal, 1=metal</span></span><br><span class=\"line\">    half Smoothness;    <span class=\"comment\">// 0=rough, 1=smooth</span></span><br><span class=\"line\">    half Occlusion;     <span class=\"comment\">// occlusion (default 1)</span></span><br><span class=\"line\">    fixed Alpha;        <span class=\"comment\">// alpha for transparencies</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SurfaceOutputStandardSpecular</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    fixed3 Albedo;      <span class=\"comment\">// diffuse color</span></span><br><span class=\"line\">    fixed3 Specular;    <span class=\"comment\">// specular color</span></span><br><span class=\"line\">    fixed3 Normal;      <span class=\"comment\">// tangent space normal, if written</span></span><br><span class=\"line\">    half3 Emission;</span><br><span class=\"line\">    half Smoothness;    <span class=\"comment\">// 0=rough, 1=smooth</span></span><br><span class=\"line\">    half Occlusion;     <span class=\"comment\">// occlusion (default 1)</span></span><br><span class=\"line\">    fixed Alpha;        <span class=\"comment\">// alpha for transparencies</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"二-表面着色器的编译指令\"><a href=\"#二-表面着色器的编译指令\" class=\"headerlink\" title=\"二.表面着色器的编译指令\"></a>二.表面着色器的编译指令</h4><p>表面着色器是放在<code>CGPROGRAM..ENDCG</code>代码块中的，和其他shader 所不同的主要有以下两点：</p>\n<ul>\n<li>必须被放置在<code>SubShader</code>代码块中，而不是在<code>Pass</code>块中</li>\n<li>必须使用<code>#pragma surface ...</code>指令来指定它的<code>surface</code>函数</li>\n</ul>\n<p><code>#pragma surface</code>指令的具体格式如下面所示：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> surface surfaceFunction lightModel [optionalparams]</span></span><br></pre></td></tr></table></figure></p>\n<p><strong><em>下面将会来细致介绍参数</em></strong></p>\n<h5 id=\"必选参数\"><a href=\"#必选参数\" class=\"headerlink\" title=\"必选参数\"></a>必选参数</h5><ul>\n<li><code>surfaceFunction</code>: 这个参数就是我们的表面函数了，它的函数签名是<code>void surf (Input IN, inout SurfaceOutput o)</code>。这里的<code>Input</code>类型是一个需要自己去定义的结构体(需要遵循它的标准，准确地说是去定制)。这个结构里面应该包含纹理坐标和表面函数所需要的一些额外字段。</li>\n<li><code>lightModel</code>: 光照模型，就是指定shader所使用的光照模型。内置的有基于物理的<code>Standard</code>和<code>StandardSpecular</code>,当然，也可以使用不基于物理的<code>Lambert(diffuse)</code>和<code>BlinnPhong(specular)</code>。</li>\n</ul>\n<h5 id=\"可选参数\"><a href=\"#可选参数\" class=\"headerlink\" title=\"可选参数\"></a>可选参数</h5><p>可选参数比较多，这里不一一列出来，需要<a href=\"https://docs.unity3d.com/Manual/SL-SurfaceShaders.html\" target=\"_blank\" rel=\"noopener\">点我查看</a></p>\n<h5 id=\"表面着色器的输入结构\"><a href=\"#表面着色器的输入结构\" class=\"headerlink\" title=\"表面着色器的输入结构\"></a>表面着色器的输入结构</h5><p>表面着色器的输入结构<code>Input</code>通常有一个shader所需要的纹理。需要注意的是，纹理坐标字段的名字必须以<code>&quot;uv&quot;</code>开头(或者以<code>&quot;uv2&quot;</code>开头标识第二个纹理坐标)。<br>下面的列表展示了<code>Input</code>结构的可选额外字段</p>\n<ul>\n<li><code>float3 viewDir</code>: 顾名思义，这个字段表示了当前视角方向，即表示摄像机的正前方的向量。通常用来计算一些视差效果和边缘光的效果等。</li>\n<li><code>float4 : COLOR</code>: 带有<code>COLOR</code>语义的字段，表示每个顶点的颜色，顶点之间采用差值来确定颜色。</li>\n<li><code>float4 screenPos</code>: 表示屏幕空间的位置，主要用来反射效果或者屏幕空间的效果实现。</li>\n<li><code>float3 wordPos</code>: 在世界空间的位置。</li>\n<li><code>float3 worldRefl</code>: 如果<code>surface shader</code>不写<code>o.Normal</code>那么将表示世界空间中的反射向量。</li>\n<li><code>float3 worldNormal</code>: 如果<code>surface shader</code>不写<code>o.Normal</code>,那么用来表示世界空间中的法向量。</li>\n<li><code>float3 wroldRefl</code>: 如果<code>surface shader</code>写了<code>o.Normal</code>, 那么这个字段表示世界空间中的反射向量。如果想要获取逐像素法线贴图的反射向量，使用<code>WorldReflectionVector (IN, o.Normal)</code></li>\n<li><code>float3 worldNormal</code>: 如果<code>surface shader</code>写了<code>o.Normal</code>, 那么这个字段表示世界空间的法向量。如果想获取逐像素法线贴图的法向量，使用<code>WorldNormalVector (IN, o.Normal)</code> </li>\n</ul>\n<p>（未完，待续）</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Unity3D-Shader学习-二-–表面着色器结构\"><a href=\"#Unity3D-Shader学习-二-–表面着色器结构\" class=\"headerlink\" title=\"Unity3D Shader学习(二)–表面着色器结构\"></a>Unity3D Shader学习(二)–表面着色器结构</h1><p>写在前面的话：</p>\n<blockquote>\n<p>本博客是我学习Unity shader过程中所记录的笔记，前期的学习都是跟随unity官方文档来学习的</p>\n</blockquote>\n<h4 id=\"一-表面着色器的工作方式\"><a href=\"#一-表面着色器的工作方式\" class=\"headerlink\" title=\"一.表面着色器的工作方式\"></a>一.表面着色器的工作方式</h4><p>在表面着色器中，把需要的数据作为”表面函数”的输入，计算后用来初始化结构<code>SurfaceOutput</code>。下面就先来看看它的结构是什么样的<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SurfaceOutput</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    fixed3 Albedo;  <span class=\"comment\">// diffuse color</span></span><br><span class=\"line\">    fixed3 Normal;  <span class=\"comment\">// tangent space normal, if written</span></span><br><span class=\"line\">    fixed3 Emission;</span><br><span class=\"line\">    half Specular;  <span class=\"comment\">// specular power in 0..1 range</span></span><br><span class=\"line\">    fixed Gloss;    <span class=\"comment\">// specular intensity</span></span><br><span class=\"line\">    fixed Alpha;    <span class=\"comment\">// alpha for transparencies</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p><strong>特别说明一下: </strong> 在unity5中，表面着色器也可以使用基于物理的光照模型。内置的标准光照和标准镜面反射模型会使用下面的输出结构<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SurfaceOutputStandard</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    fixed3 Albedo;      <span class=\"comment\">// base (diffuse or specular) color</span></span><br><span class=\"line\">    fixed3 Normal;      <span class=\"comment\">// tangent space normal, if written</span></span><br><span class=\"line\">    half3 Emission;</span><br><span class=\"line\">    half Metallic;      <span class=\"comment\">// 0=non-metal, 1=metal</span></span><br><span class=\"line\">    half Smoothness;    <span class=\"comment\">// 0=rough, 1=smooth</span></span><br><span class=\"line\">    half Occlusion;     <span class=\"comment\">// occlusion (default 1)</span></span><br><span class=\"line\">    fixed Alpha;        <span class=\"comment\">// alpha for transparencies</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SurfaceOutputStandardSpecular</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    fixed3 Albedo;      <span class=\"comment\">// diffuse color</span></span><br><span class=\"line\">    fixed3 Specular;    <span class=\"comment\">// specular color</span></span><br><span class=\"line\">    fixed3 Normal;      <span class=\"comment\">// tangent space normal, if written</span></span><br><span class=\"line\">    half3 Emission;</span><br><span class=\"line\">    half Smoothness;    <span class=\"comment\">// 0=rough, 1=smooth</span></span><br><span class=\"line\">    half Occlusion;     <span class=\"comment\">// occlusion (default 1)</span></span><br><span class=\"line\">    fixed Alpha;        <span class=\"comment\">// alpha for transparencies</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"二-表面着色器的编译指令\"><a href=\"#二-表面着色器的编译指令\" class=\"headerlink\" title=\"二.表面着色器的编译指令\"></a>二.表面着色器的编译指令</h4><p>表面着色器是放在<code>CGPROGRAM..ENDCG</code>代码块中的，和其他shader 所不同的主要有以下两点：</p>\n<ul>\n<li>必须被放置在<code>SubShader</code>代码块中，而不是在<code>Pass</code>块中</li>\n<li>必须使用<code>#pragma surface ...</code>指令来指定它的<code>surface</code>函数</li>\n</ul>\n<p><code>#pragma surface</code>指令的具体格式如下面所示：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> surface surfaceFunction lightModel [optionalparams]</span></span><br></pre></td></tr></table></figure></p>\n<p><strong><em>下面将会来细致介绍参数</em></strong></p>\n<h5 id=\"必选参数\"><a href=\"#必选参数\" class=\"headerlink\" title=\"必选参数\"></a>必选参数</h5><ul>\n<li><code>surfaceFunction</code>: 这个参数就是我们的表面函数了，它的函数签名是<code>void surf (Input IN, inout SurfaceOutput o)</code>。这里的<code>Input</code>类型是一个需要自己去定义的结构体(需要遵循它的标准，准确地说是去定制)。这个结构里面应该包含纹理坐标和表面函数所需要的一些额外字段。</li>\n<li><code>lightModel</code>: 光照模型，就是指定shader所使用的光照模型。内置的有基于物理的<code>Standard</code>和<code>StandardSpecular</code>,当然，也可以使用不基于物理的<code>Lambert(diffuse)</code>和<code>BlinnPhong(specular)</code>。</li>\n</ul>\n<h5 id=\"可选参数\"><a href=\"#可选参数\" class=\"headerlink\" title=\"可选参数\"></a>可选参数</h5><p>可选参数比较多，这里不一一列出来，需要<a href=\"https://docs.unity3d.com/Manual/SL-SurfaceShaders.html\" target=\"_blank\" rel=\"noopener\">点我查看</a></p>\n<h5 id=\"表面着色器的输入结构\"><a href=\"#表面着色器的输入结构\" class=\"headerlink\" title=\"表面着色器的输入结构\"></a>表面着色器的输入结构</h5><p>表面着色器的输入结构<code>Input</code>通常有一个shader所需要的纹理。需要注意的是，纹理坐标字段的名字必须以<code>&quot;uv&quot;</code>开头(或者以<code>&quot;uv2&quot;</code>开头标识第二个纹理坐标)。<br>下面的列表展示了<code>Input</code>结构的可选额外字段</p>\n<ul>\n<li><code>float3 viewDir</code>: 顾名思义，这个字段表示了当前视角方向，即表示摄像机的正前方的向量。通常用来计算一些视差效果和边缘光的效果等。</li>\n<li><code>float4 : COLOR</code>: 带有<code>COLOR</code>语义的字段，表示每个顶点的颜色，顶点之间采用差值来确定颜色。</li>\n<li><code>float4 screenPos</code>: 表示屏幕空间的位置，主要用来反射效果或者屏幕空间的效果实现。</li>\n<li><code>float3 wordPos</code>: 在世界空间的位置。</li>\n<li><code>float3 worldRefl</code>: 如果<code>surface shader</code>不写<code>o.Normal</code>那么将表示世界空间中的反射向量。</li>\n<li><code>float3 worldNormal</code>: 如果<code>surface shader</code>不写<code>o.Normal</code>,那么用来表示世界空间中的法向量。</li>\n<li><code>float3 wroldRefl</code>: 如果<code>surface shader</code>写了<code>o.Normal</code>, 那么这个字段表示世界空间中的反射向量。如果想要获取逐像素法线贴图的反射向量，使用<code>WorldReflectionVector (IN, o.Normal)</code></li>\n<li><code>float3 worldNormal</code>: 如果<code>surface shader</code>写了<code>o.Normal</code>, 那么这个字段表示世界空间的法向量。如果想获取逐像素法线贴图的法向量，使用<code>WorldNormalVector (IN, o.Normal)</code> </li>\n</ul>\n<p>（未完，待续）</p>\n"},{"title":"将阿拉伯数字转换成大写形式(非汉字形式)","date":"2017-04-22T10:03:00.000Z","_content":"### 分析\n#### 一.不包含数字0的情况\n\n1. 如有数字`12345678` 读作: 一千二百三十四万五千六百七十八\n2. 可以发现规律如下:\n\n\n>  `一`千`二`百`三`十`四`万`五`千`六`百`七`十`八`, 首先, 每一位的数字都会发音, 这个发音列表下\n\n |1|2|3|4|5|6|7|8|9|0|\n |:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|\n |一|二|三|四|五|六|七|八|九|零|\n \n> 其次就是`千,百,十,万,千,百,十`,同样,列表如下\n \n |数字|1|2|3|4|5|6|7|8|\n |-|-|-|-|-|-|-|-|-|\n |索引|0|1|2|3|4|5|6|7|\n |对应单位:|千|百|十|万|千|百|十|个|\n |自身发音:|一|二|三|四|五|六|七|八|\n \n> 转换方法: 直接发音和单位相间连接,最后一位不处理,即不添加`个`字 \n\n#### 二.包含数字零的情况\n1. 数字0在中间且不连续\n2. 数字0在中间连续\n3. 数字0在末尾(一个或多个)\n4. 中间末尾都有,中间连续\n5. 中间末尾都有,中间不连续\n","source":"_drafts/numberConvert.md","raw":"title: 将阿拉伯数字转换成大写形式(非汉字形式)\ntags:\n  - 杂项\ncategories: []\ndate: 2017-04-22 18:03:00\n---\n### 分析\n#### 一.不包含数字0的情况\n\n1. 如有数字`12345678` 读作: 一千二百三十四万五千六百七十八\n2. 可以发现规律如下:\n\n\n>  `一`千`二`百`三`十`四`万`五`千`六`百`七`十`八`, 首先, 每一位的数字都会发音, 这个发音列表下\n\n |1|2|3|4|5|6|7|8|9|0|\n |:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|\n |一|二|三|四|五|六|七|八|九|零|\n \n> 其次就是`千,百,十,万,千,百,十`,同样,列表如下\n \n |数字|1|2|3|4|5|6|7|8|\n |-|-|-|-|-|-|-|-|-|\n |索引|0|1|2|3|4|5|6|7|\n |对应单位:|千|百|十|万|千|百|十|个|\n |自身发音:|一|二|三|四|五|六|七|八|\n \n> 转换方法: 直接发音和单位相间连接,最后一位不处理,即不添加`个`字 \n\n#### 二.包含数字零的情况\n1. 数字0在中间且不连续\n2. 数字0在中间连续\n3. 数字0在末尾(一个或多个)\n4. 中间末尾都有,中间连续\n5. 中间末尾都有,中间不连续\n","slug":"numberConvert","published":0,"updated":"2018-03-05T01:12:07.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhu06juu000efkqcbfd674e3","content":"<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><h4 id=\"一-不包含数字0的情况\"><a href=\"#一-不包含数字0的情况\" class=\"headerlink\" title=\"一.不包含数字0的情况\"></a>一.不包含数字0的情况</h4><ol>\n<li>如有数字<code>12345678</code> 读作: 一千二百三十四万五千六百七十八</li>\n<li>可以发现规律如下:</li>\n</ol>\n<blockquote>\n<p> <code>一</code>千<code>二</code>百<code>三</code>十<code>四</code>万<code>五</code>千<code>六</code>百<code>七</code>十<code>八</code>, 首先, 每一位的数字都会发音, 这个发音列表下</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">1</th>\n<th style=\"text-align:center\">2</th>\n<th style=\"text-align:center\">3</th>\n<th style=\"text-align:center\">4</th>\n<th style=\"text-align:center\">5</th>\n<th style=\"text-align:center\">6</th>\n<th style=\"text-align:center\">7</th>\n<th style=\"text-align:center\">8</th>\n<th style=\"text-align:center\">9</th>\n<th style=\"text-align:center\">0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">一</td>\n<td style=\"text-align:center\">二</td>\n<td style=\"text-align:center\">三</td>\n<td style=\"text-align:center\">四</td>\n<td style=\"text-align:center\">五</td>\n<td style=\"text-align:center\">六</td>\n<td style=\"text-align:center\">七</td>\n<td style=\"text-align:center\">八</td>\n<td style=\"text-align:center\">九</td>\n<td style=\"text-align:center\">零</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>其次就是<code>千,百,十,万,千,百,十</code>,同样,列表如下</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>数字</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>索引</td>\n<td>0</td>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>4</td>\n<td>5</td>\n<td>6</td>\n<td>7</td>\n</tr>\n<tr>\n<td>对应单位:</td>\n<td>千</td>\n<td>百</td>\n<td>十</td>\n<td>万</td>\n<td>千</td>\n<td>百</td>\n<td>十</td>\n<td>个</td>\n</tr>\n<tr>\n<td>自身发音:</td>\n<td>一</td>\n<td>二</td>\n<td>三</td>\n<td>四</td>\n<td>五</td>\n<td>六</td>\n<td>七</td>\n<td>八</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>转换方法: 直接发音和单位相间连接,最后一位不处理,即不添加<code>个</code>字 </p>\n</blockquote>\n<h4 id=\"二-包含数字零的情况\"><a href=\"#二-包含数字零的情况\" class=\"headerlink\" title=\"二.包含数字零的情况\"></a>二.包含数字零的情况</h4><ol>\n<li>数字0在中间且不连续</li>\n<li>数字0在中间连续</li>\n<li>数字0在末尾(一个或多个)</li>\n<li>中间末尾都有,中间连续</li>\n<li>中间末尾都有,中间不连续</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><h4 id=\"一-不包含数字0的情况\"><a href=\"#一-不包含数字0的情况\" class=\"headerlink\" title=\"一.不包含数字0的情况\"></a>一.不包含数字0的情况</h4><ol>\n<li>如有数字<code>12345678</code> 读作: 一千二百三十四万五千六百七十八</li>\n<li>可以发现规律如下:</li>\n</ol>\n<blockquote>\n<p> <code>一</code>千<code>二</code>百<code>三</code>十<code>四</code>万<code>五</code>千<code>六</code>百<code>七</code>十<code>八</code>, 首先, 每一位的数字都会发音, 这个发音列表下</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">1</th>\n<th style=\"text-align:center\">2</th>\n<th style=\"text-align:center\">3</th>\n<th style=\"text-align:center\">4</th>\n<th style=\"text-align:center\">5</th>\n<th style=\"text-align:center\">6</th>\n<th style=\"text-align:center\">7</th>\n<th style=\"text-align:center\">8</th>\n<th style=\"text-align:center\">9</th>\n<th style=\"text-align:center\">0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">一</td>\n<td style=\"text-align:center\">二</td>\n<td style=\"text-align:center\">三</td>\n<td style=\"text-align:center\">四</td>\n<td style=\"text-align:center\">五</td>\n<td style=\"text-align:center\">六</td>\n<td style=\"text-align:center\">七</td>\n<td style=\"text-align:center\">八</td>\n<td style=\"text-align:center\">九</td>\n<td style=\"text-align:center\">零</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>其次就是<code>千,百,十,万,千,百,十</code>,同样,列表如下</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>数字</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>索引</td>\n<td>0</td>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>4</td>\n<td>5</td>\n<td>6</td>\n<td>7</td>\n</tr>\n<tr>\n<td>对应单位:</td>\n<td>千</td>\n<td>百</td>\n<td>十</td>\n<td>万</td>\n<td>千</td>\n<td>百</td>\n<td>十</td>\n<td>个</td>\n</tr>\n<tr>\n<td>自身发音:</td>\n<td>一</td>\n<td>二</td>\n<td>三</td>\n<td>四</td>\n<td>五</td>\n<td>六</td>\n<td>七</td>\n<td>八</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>转换方法: 直接发音和单位相间连接,最后一位不处理,即不添加<code>个</code>字 </p>\n</blockquote>\n<h4 id=\"二-包含数字零的情况\"><a href=\"#二-包含数字零的情况\" class=\"headerlink\" title=\"二.包含数字零的情况\"></a>二.包含数字零的情况</h4><ol>\n<li>数字0在中间且不连续</li>\n<li>数字0在中间连续</li>\n<li>数字0在末尾(一个或多个)</li>\n<li>中间末尾都有,中间连续</li>\n<li>中间末尾都有,中间不连续</li>\n</ol>\n"},{"title":"OpenGL学习笔记(一)--window下VS2013环境搭建OpenGL开发环境","date":"2017-05-29T08:05:00.000Z","_content":"\n### 1. 环境搭建\n> 需要: Win10; VS2013(其他版本的VS未经测试, 但总体流程和操作相差不大); [GLFW3][1](windows 32位版本); [GLEW][2]\n\n- #### 新建C++项目\n1. 首先使用VS2013新建一个C++的控制台项目`OpenGL_Lean`, 然后打开生成解决方案(可自己先新建一个main.cpp, 写上main函数,后面会用到)\n\n- #### `GLEW`和`GLFW`安装步骤:\n\n##### 1. 分别解压`glfw`和`glew`得到两个文件夹\n\n> glfw解压后文件夹结构如下图 **(图1.1)**\n![解压glfw之后的文件夹结构](/img/201705/2017-05-29_164226.png)\n\n> glew文件夹结构 **(图1.2)**\n![解压glew之后的文件夹结构](/img/201705/2017-05-29_164227.png)\n\n##### 2. 复制库文件和头文件\n\n首先找到VS2013的安装目录 (如果是默认安装, 那么应该在`C:\\Program Files (x86)\\Microsoft Visual Studio 12.0`)\n+ **第一步: 复制动态库文件:** \n分别复制glew (`bin\\Release\\Win32\\glew32.dll`) 和glfw (`lib-vc2013\\glfw3.dll`) 这两个`DLL`文件到第一步新建的项目的OpenGL_Learn里面的Debug文件夹下(也可以直接复制到c:\\windows\\system32下), 复制完成后如下图:\n![Debug文件夹结构](/img/201705/dll-pic.png)\n\n+ **第二步: 复制静态库文件:**\n分别复制glew(`lib\\Release\\glew32s.lib`) 和glfw (`lib-vc2013\\glfw3.lib`)这两个`lib`文件到`[VS2013安装目录]\\vc\\lib`下面\n\n+ **第三步: 复制头文件:**\n分别复制glew: `include\\GL`和glfw: `include\\GLFW`文件夹到`[VS2013安装目录]\\vc\\include`. 复制完成之后VS2013的`vc\\include`文件夹应该是这样的\n![include文件夹内的结构](/img/201705/2017-05-29_190301.png)    \n\n##### 3. 在VS2013中设置依赖库\n\n打开VS的解决方案资源管理器, 在刚才的项目上右键, 点击属性打开属性设置对话框, 如下图\n![VS2013属性设置面板](/img/201705/2017-05-30_001220.png)\n**然后按照上图展开`链接器`>输入, 在项目依赖库里面填入glfw3.lib;glew32s.lib两个静态库, 如上图所示**\n\n##### 4. 设置项目类型(显示控制台或者不显示)\n+ 显示控制台窗口: 个人在开发阶段喜欢同时显示控制台窗口, 因为这样可以看到标准输入输出信息, 方便调试和排查错误.\n> 打开方式: 无需特殊打开, 默认如此\n+ 不显示控制台窗口: 只显示OpenGL图形窗口\n> 打开方式: 依次打开`属性`\n\n\n\n\n[1]: https://github.com/glfw/glfw/releases/download/3.2.1/glfw-3.2.1.zip\n[2]: https://downloads.sourceforge.net/project/glew/glew/2.0.0/glew-2.0.0.zipr=http%3A%2F%2Fglew.sourceforge.net%2F&ts=1496045710&use_mirror=nchc\n","source":"_posts/OpenGL-Learn-1.md","raw":"title: OpenGL学习笔记(一)--window下VS2013环境搭建OpenGL开发环境\ntags:\n  - 'OpenGL, 图形学'\ncategories: []\ndate: 2017-05-29 16:05:00\n---\n\n### 1. 环境搭建\n> 需要: Win10; VS2013(其他版本的VS未经测试, 但总体流程和操作相差不大); [GLFW3][1](windows 32位版本); [GLEW][2]\n\n- #### 新建C++项目\n1. 首先使用VS2013新建一个C++的控制台项目`OpenGL_Lean`, 然后打开生成解决方案(可自己先新建一个main.cpp, 写上main函数,后面会用到)\n\n- #### `GLEW`和`GLFW`安装步骤:\n\n##### 1. 分别解压`glfw`和`glew`得到两个文件夹\n\n> glfw解压后文件夹结构如下图 **(图1.1)**\n![解压glfw之后的文件夹结构](/img/201705/2017-05-29_164226.png)\n\n> glew文件夹结构 **(图1.2)**\n![解压glew之后的文件夹结构](/img/201705/2017-05-29_164227.png)\n\n##### 2. 复制库文件和头文件\n\n首先找到VS2013的安装目录 (如果是默认安装, 那么应该在`C:\\Program Files (x86)\\Microsoft Visual Studio 12.0`)\n+ **第一步: 复制动态库文件:** \n分别复制glew (`bin\\Release\\Win32\\glew32.dll`) 和glfw (`lib-vc2013\\glfw3.dll`) 这两个`DLL`文件到第一步新建的项目的OpenGL_Learn里面的Debug文件夹下(也可以直接复制到c:\\windows\\system32下), 复制完成后如下图:\n![Debug文件夹结构](/img/201705/dll-pic.png)\n\n+ **第二步: 复制静态库文件:**\n分别复制glew(`lib\\Release\\glew32s.lib`) 和glfw (`lib-vc2013\\glfw3.lib`)这两个`lib`文件到`[VS2013安装目录]\\vc\\lib`下面\n\n+ **第三步: 复制头文件:**\n分别复制glew: `include\\GL`和glfw: `include\\GLFW`文件夹到`[VS2013安装目录]\\vc\\include`. 复制完成之后VS2013的`vc\\include`文件夹应该是这样的\n![include文件夹内的结构](/img/201705/2017-05-29_190301.png)    \n\n##### 3. 在VS2013中设置依赖库\n\n打开VS的解决方案资源管理器, 在刚才的项目上右键, 点击属性打开属性设置对话框, 如下图\n![VS2013属性设置面板](/img/201705/2017-05-30_001220.png)\n**然后按照上图展开`链接器`>输入, 在项目依赖库里面填入glfw3.lib;glew32s.lib两个静态库, 如上图所示**\n\n##### 4. 设置项目类型(显示控制台或者不显示)\n+ 显示控制台窗口: 个人在开发阶段喜欢同时显示控制台窗口, 因为这样可以看到标准输入输出信息, 方便调试和排查错误.\n> 打开方式: 无需特殊打开, 默认如此\n+ 不显示控制台窗口: 只显示OpenGL图形窗口\n> 打开方式: 依次打开`属性`\n\n\n\n\n[1]: https://github.com/glfw/glfw/releases/download/3.2.1/glfw-3.2.1.zip\n[2]: https://downloads.sourceforge.net/project/glew/glew/2.0.0/glew-2.0.0.zipr=http%3A%2F%2Fglew.sourceforge.net%2F&ts=1496045710&use_mirror=nchc\n","slug":"OpenGL-Learn-1","published":1,"updated":"2018-03-05T01:12:07.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhu06juy000ffkqcdfyjevha","content":"<h3 id=\"1-环境搭建\"><a href=\"#1-环境搭建\" class=\"headerlink\" title=\"1. 环境搭建\"></a>1. 环境搭建</h3><blockquote>\n<p>需要: Win10; VS2013(其他版本的VS未经测试, 但总体流程和操作相差不大); <a href=\"https://github.com/glfw/glfw/releases/download/3.2.1/glfw-3.2.1.zip\" target=\"_blank\" rel=\"noopener\">GLFW3</a>(windows 32位版本); <a href=\"https://downloads.sourceforge.net/project/glew/glew/2.0.0/glew-2.0.0.zipr=http%3A%2F%2Fglew.sourceforge.net%2F&amp;ts=1496045710&amp;use_mirror=nchc\" target=\"_blank\" rel=\"noopener\">GLEW</a></p>\n</blockquote>\n<ul>\n<li><h4 id=\"新建C-项目\"><a href=\"#新建C-项目\" class=\"headerlink\" title=\"新建C++项目\"></a>新建C++项目</h4></li>\n</ul>\n<ol>\n<li>首先使用VS2013新建一个C++的控制台项目<code>OpenGL_Lean</code>, 然后打开生成解决方案(可自己先新建一个main.cpp, 写上main函数,后面会用到)</li>\n</ol>\n<ul>\n<li><h4 id=\"GLEW和GLFW安装步骤\"><a href=\"#GLEW和GLFW安装步骤\" class=\"headerlink\" title=\"GLEW和GLFW安装步骤:\"></a><code>GLEW</code>和<code>GLFW</code>安装步骤:</h4></li>\n</ul>\n<h5 id=\"1-分别解压glfw和glew得到两个文件夹\"><a href=\"#1-分别解压glfw和glew得到两个文件夹\" class=\"headerlink\" title=\"1. 分别解压glfw和glew得到两个文件夹\"></a>1. 分别解压<code>glfw</code>和<code>glew</code>得到两个文件夹</h5><blockquote>\n<p>glfw解压后文件夹结构如下图 <strong>(图1.1)</strong><br><img src=\"/img/201705/2017-05-29_164226.png\" alt=\"解压glfw之后的文件夹结构\"></p>\n</blockquote>\n<blockquote>\n<p>glew文件夹结构 <strong>(图1.2)</strong><br><img src=\"/img/201705/2017-05-29_164227.png\" alt=\"解压glew之后的文件夹结构\"></p>\n</blockquote>\n<h5 id=\"2-复制库文件和头文件\"><a href=\"#2-复制库文件和头文件\" class=\"headerlink\" title=\"2. 复制库文件和头文件\"></a>2. 复制库文件和头文件</h5><p>首先找到VS2013的安装目录 (如果是默认安装, 那么应该在<code>C:\\Program Files (x86)\\Microsoft Visual Studio 12.0</code>)</p>\n<ul>\n<li><p><strong>第一步: 复制动态库文件:</strong><br>分别复制glew (<code>bin\\Release\\Win32\\glew32.dll</code>) 和glfw (<code>lib-vc2013\\glfw3.dll</code>) 这两个<code>DLL</code>文件到第一步新建的项目的OpenGL_Learn里面的Debug文件夹下(也可以直接复制到c:\\windows\\system32下), 复制完成后如下图:<br><img src=\"/img/201705/dll-pic.png\" alt=\"Debug文件夹结构\"></p>\n</li>\n<li><p><strong>第二步: 复制静态库文件:</strong><br>分别复制glew(<code>lib\\Release\\glew32s.lib</code>) 和glfw (<code>lib-vc2013\\glfw3.lib</code>)这两个<code>lib</code>文件到<code>[VS2013安装目录]\\vc\\lib</code>下面</p>\n</li>\n<li><p><strong>第三步: 复制头文件:</strong><br>分别复制glew: <code>include\\GL</code>和glfw: <code>include\\GLFW</code>文件夹到<code>[VS2013安装目录]\\vc\\include</code>. 复制完成之后VS2013的<code>vc\\include</code>文件夹应该是这样的<br><img src=\"/img/201705/2017-05-29_190301.png\" alt=\"include文件夹内的结构\">    </p>\n</li>\n</ul>\n<h5 id=\"3-在VS2013中设置依赖库\"><a href=\"#3-在VS2013中设置依赖库\" class=\"headerlink\" title=\"3. 在VS2013中设置依赖库\"></a>3. 在VS2013中设置依赖库</h5><p>打开VS的解决方案资源管理器, 在刚才的项目上右键, 点击属性打开属性设置对话框, 如下图<br><img src=\"/img/201705/2017-05-30_001220.png\" alt=\"VS2013属性设置面板\"><br><strong>然后按照上图展开<code>链接器</code>&gt;输入, 在项目依赖库里面填入glfw3.lib;glew32s.lib两个静态库, 如上图所示</strong></p>\n<h5 id=\"4-设置项目类型-显示控制台或者不显示\"><a href=\"#4-设置项目类型-显示控制台或者不显示\" class=\"headerlink\" title=\"4. 设置项目类型(显示控制台或者不显示)\"></a>4. 设置项目类型(显示控制台或者不显示)</h5><ul>\n<li>显示控制台窗口: 个人在开发阶段喜欢同时显示控制台窗口, 因为这样可以看到标准输入输出信息, 方便调试和排查错误.<blockquote>\n<p>打开方式: 无需特殊打开, 默认如此</p>\n</blockquote>\n</li>\n<li>不显示控制台窗口: 只显示OpenGL图形窗口<blockquote>\n<p>打开方式: 依次打开<code>属性</code></p>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-环境搭建\"><a href=\"#1-环境搭建\" class=\"headerlink\" title=\"1. 环境搭建\"></a>1. 环境搭建</h3><blockquote>\n<p>需要: Win10; VS2013(其他版本的VS未经测试, 但总体流程和操作相差不大); <a href=\"https://github.com/glfw/glfw/releases/download/3.2.1/glfw-3.2.1.zip\" target=\"_blank\" rel=\"noopener\">GLFW3</a>(windows 32位版本); <a href=\"https://downloads.sourceforge.net/project/glew/glew/2.0.0/glew-2.0.0.zipr=http%3A%2F%2Fglew.sourceforge.net%2F&amp;ts=1496045710&amp;use_mirror=nchc\" target=\"_blank\" rel=\"noopener\">GLEW</a></p>\n</blockquote>\n<ul>\n<li><h4 id=\"新建C-项目\"><a href=\"#新建C-项目\" class=\"headerlink\" title=\"新建C++项目\"></a>新建C++项目</h4></li>\n</ul>\n<ol>\n<li>首先使用VS2013新建一个C++的控制台项目<code>OpenGL_Lean</code>, 然后打开生成解决方案(可自己先新建一个main.cpp, 写上main函数,后面会用到)</li>\n</ol>\n<ul>\n<li><h4 id=\"GLEW和GLFW安装步骤\"><a href=\"#GLEW和GLFW安装步骤\" class=\"headerlink\" title=\"GLEW和GLFW安装步骤:\"></a><code>GLEW</code>和<code>GLFW</code>安装步骤:</h4></li>\n</ul>\n<h5 id=\"1-分别解压glfw和glew得到两个文件夹\"><a href=\"#1-分别解压glfw和glew得到两个文件夹\" class=\"headerlink\" title=\"1. 分别解压glfw和glew得到两个文件夹\"></a>1. 分别解压<code>glfw</code>和<code>glew</code>得到两个文件夹</h5><blockquote>\n<p>glfw解压后文件夹结构如下图 <strong>(图1.1)</strong><br><img src=\"/img/201705/2017-05-29_164226.png\" alt=\"解压glfw之后的文件夹结构\"></p>\n</blockquote>\n<blockquote>\n<p>glew文件夹结构 <strong>(图1.2)</strong><br><img src=\"/img/201705/2017-05-29_164227.png\" alt=\"解压glew之后的文件夹结构\"></p>\n</blockquote>\n<h5 id=\"2-复制库文件和头文件\"><a href=\"#2-复制库文件和头文件\" class=\"headerlink\" title=\"2. 复制库文件和头文件\"></a>2. 复制库文件和头文件</h5><p>首先找到VS2013的安装目录 (如果是默认安装, 那么应该在<code>C:\\Program Files (x86)\\Microsoft Visual Studio 12.0</code>)</p>\n<ul>\n<li><p><strong>第一步: 复制动态库文件:</strong><br>分别复制glew (<code>bin\\Release\\Win32\\glew32.dll</code>) 和glfw (<code>lib-vc2013\\glfw3.dll</code>) 这两个<code>DLL</code>文件到第一步新建的项目的OpenGL_Learn里面的Debug文件夹下(也可以直接复制到c:\\windows\\system32下), 复制完成后如下图:<br><img src=\"/img/201705/dll-pic.png\" alt=\"Debug文件夹结构\"></p>\n</li>\n<li><p><strong>第二步: 复制静态库文件:</strong><br>分别复制glew(<code>lib\\Release\\glew32s.lib</code>) 和glfw (<code>lib-vc2013\\glfw3.lib</code>)这两个<code>lib</code>文件到<code>[VS2013安装目录]\\vc\\lib</code>下面</p>\n</li>\n<li><p><strong>第三步: 复制头文件:</strong><br>分别复制glew: <code>include\\GL</code>和glfw: <code>include\\GLFW</code>文件夹到<code>[VS2013安装目录]\\vc\\include</code>. 复制完成之后VS2013的<code>vc\\include</code>文件夹应该是这样的<br><img src=\"/img/201705/2017-05-29_190301.png\" alt=\"include文件夹内的结构\">    </p>\n</li>\n</ul>\n<h5 id=\"3-在VS2013中设置依赖库\"><a href=\"#3-在VS2013中设置依赖库\" class=\"headerlink\" title=\"3. 在VS2013中设置依赖库\"></a>3. 在VS2013中设置依赖库</h5><p>打开VS的解决方案资源管理器, 在刚才的项目上右键, 点击属性打开属性设置对话框, 如下图<br><img src=\"/img/201705/2017-05-30_001220.png\" alt=\"VS2013属性设置面板\"><br><strong>然后按照上图展开<code>链接器</code>&gt;输入, 在项目依赖库里面填入glfw3.lib;glew32s.lib两个静态库, 如上图所示</strong></p>\n<h5 id=\"4-设置项目类型-显示控制台或者不显示\"><a href=\"#4-设置项目类型-显示控制台或者不显示\" class=\"headerlink\" title=\"4. 设置项目类型(显示控制台或者不显示)\"></a>4. 设置项目类型(显示控制台或者不显示)</h5><ul>\n<li>显示控制台窗口: 个人在开发阶段喜欢同时显示控制台窗口, 因为这样可以看到标准输入输出信息, 方便调试和排查错误.<blockquote>\n<p>打开方式: 无需特殊打开, 默认如此</p>\n</blockquote>\n</li>\n<li>不显示控制台窗口: 只显示OpenGL图形窗口<blockquote>\n<p>打开方式: 依次打开<code>属性</code></p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"Git学习","date":"2017-07-28T05:20:24.000Z","comment":true,"_content":"### 一. 初始化\n\n+ 初始化当前目录为一个git仓库:  `git init`\n+ 设置git账户:\n\n```git\ngit config --global user.name \"You Name\"\ngit config --global user.email \"your email address\"\n```\n\n### 二. 仓库操作\n\n#### 1. 版本管理\n+ 添加文件到暂存区: `git add [Files]`\n+ 将暂存区的文件提交: `git commit -m ['msg']`\n\n#### 2. 指定不纳入版本管理的文件: \n>在git仓库下打开.gitignore文件(Mac/Linux系统下这个文件是个隐藏的, 可以在终端中用命令调用文本编辑器来打开`vim .gitignore`), 顾名思义, 这个文件名字告诉我们就是用来忽略掉在版本管理中我们不关心的文件, 具体用法如下:\n1. 在git中, 每一行代表一个用来匹配的模式\n2. 空行不会匹配任何模式, 因此可以用来当做分割线使得.gitignore文件看起来更美观\n3. 以#开头的是一个注释\n4. 尾部的空格将会被忽略掉, 除非他们用反斜杠 \"\\\" 括起来\n5. 前缀\"!\" 代表一个取反的操作: 会消除前一个模式中指定的忽略的文件. 例如\n`\\*.swp`\n`!lib.swp`\n这个模式代表将会忽略掉不是以lib.swp结尾的所有.swp文件\n6.(...未完)\n\n#### 3.查看仓库状\n+ 可以查看\b工作区状态: `git status`\n\n\n#### 4. 仓库的创建\n+ 克隆一个远端仓库到指定的目录中: `git clone ['url']`\n+ 克隆一个远端仓库到已存在的目录中: `git clone ['url'] ['path']`\n\n#### 5. 操作\n+ 删除在工作区删除了但版本库里面尚未删除的文件: `git rm [文件名]`\n+ 只从暂存区删除而不从工作区删除文件:   `git rm --cached [文件名]`\n> 例如: deleteme.rb添加到了暂存区, 现在不想让它被暂存, 就可以使用这条命令: \n`git rm --cached deleteme.rb`\n\n#### 6. `git stash`命令\n+ 解释:\n> 当你想清空当前的工作目录的时候, 可以使用`git stash`命令来记录当前的工作目录和暂存区的状态. 这个命令可以保存你的本地修改并且将你的工作目录恢复到和HEAD commit一致的状态\n> \n> **简而言之**: 就是可以既更新版本库的最新版本, 又可以保存本地的修改(纯属个人理解)\n\n\n+ `git stash list`: 列出已经备份过的改变\n+ `git stash show`: 显示已经记录在stash中的文件状态和它的原始状态的不同\n+ `git stash save`: 将本地的修改作为一个新的stash, 并且重置工作目录(`git stash`命令也会被解析为`git stash save`)\n\n#### 7. `git mv`命令\n+ 解释:\n> 从暂存区中移除已跟踪的文件或重命名已跟踪的文件","source":"_posts/Git学习.md","raw":"---\ntitle: Git学习\ndate: 2017-07-28 13:20:24\ntags: 工具;版本管理\ncomment: true\n---\n### 一. 初始化\n\n+ 初始化当前目录为一个git仓库:  `git init`\n+ 设置git账户:\n\n```git\ngit config --global user.name \"You Name\"\ngit config --global user.email \"your email address\"\n```\n\n### 二. 仓库操作\n\n#### 1. 版本管理\n+ 添加文件到暂存区: `git add [Files]`\n+ 将暂存区的文件提交: `git commit -m ['msg']`\n\n#### 2. 指定不纳入版本管理的文件: \n>在git仓库下打开.gitignore文件(Mac/Linux系统下这个文件是个隐藏的, 可以在终端中用命令调用文本编辑器来打开`vim .gitignore`), 顾名思义, 这个文件名字告诉我们就是用来忽略掉在版本管理中我们不关心的文件, 具体用法如下:\n1. 在git中, 每一行代表一个用来匹配的模式\n2. 空行不会匹配任何模式, 因此可以用来当做分割线使得.gitignore文件看起来更美观\n3. 以#开头的是一个注释\n4. 尾部的空格将会被忽略掉, 除非他们用反斜杠 \"\\\" 括起来\n5. 前缀\"!\" 代表一个取反的操作: 会消除前一个模式中指定的忽略的文件. 例如\n`\\*.swp`\n`!lib.swp`\n这个模式代表将会忽略掉不是以lib.swp结尾的所有.swp文件\n6.(...未完)\n\n#### 3.查看仓库状\n+ 可以查看\b工作区状态: `git status`\n\n\n#### 4. 仓库的创建\n+ 克隆一个远端仓库到指定的目录中: `git clone ['url']`\n+ 克隆一个远端仓库到已存在的目录中: `git clone ['url'] ['path']`\n\n#### 5. 操作\n+ 删除在工作区删除了但版本库里面尚未删除的文件: `git rm [文件名]`\n+ 只从暂存区删除而不从工作区删除文件:   `git rm --cached [文件名]`\n> 例如: deleteme.rb添加到了暂存区, 现在不想让它被暂存, 就可以使用这条命令: \n`git rm --cached deleteme.rb`\n\n#### 6. `git stash`命令\n+ 解释:\n> 当你想清空当前的工作目录的时候, 可以使用`git stash`命令来记录当前的工作目录和暂存区的状态. 这个命令可以保存你的本地修改并且将你的工作目录恢复到和HEAD commit一致的状态\n> \n> **简而言之**: 就是可以既更新版本库的最新版本, 又可以保存本地的修改(纯属个人理解)\n\n\n+ `git stash list`: 列出已经备份过的改变\n+ `git stash show`: 显示已经记录在stash中的文件状态和它的原始状态的不同\n+ `git stash save`: 将本地的修改作为一个新的stash, 并且重置工作目录(`git stash`命令也会被解析为`git stash save`)\n\n#### 7. `git mv`命令\n+ 解释:\n> 从暂存区中移除已跟踪的文件或重命名已跟踪的文件","slug":"Git学习","published":1,"updated":"2018-03-05T01:12:07.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhu06jw8000ufkqc40mmbpgq","content":"<h3 id=\"一-初始化\"><a href=\"#一-初始化\" class=\"headerlink\" title=\"一. 初始化\"></a>一. 初始化</h3><ul>\n<li>初始化当前目录为一个git仓库:  <code>git init</code></li>\n<li>设置git账户:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;You Name&quot;</span><br><span class=\"line\">git config --global user.email &quot;your email address&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"二-仓库操作\"><a href=\"#二-仓库操作\" class=\"headerlink\" title=\"二. 仓库操作\"></a>二. 仓库操作</h3><h4 id=\"1-版本管理\"><a href=\"#1-版本管理\" class=\"headerlink\" title=\"1. 版本管理\"></a>1. 版本管理</h4><ul>\n<li>添加文件到暂存区: <code>git add [Files]</code></li>\n<li>将暂存区的文件提交: <code>git commit -m [&#39;msg&#39;]</code></li>\n</ul>\n<h4 id=\"2-指定不纳入版本管理的文件\"><a href=\"#2-指定不纳入版本管理的文件\" class=\"headerlink\" title=\"2. 指定不纳入版本管理的文件:\"></a>2. 指定不纳入版本管理的文件:</h4><blockquote>\n<p>在git仓库下打开.gitignore文件(Mac/Linux系统下这个文件是个隐藏的, 可以在终端中用命令调用文本编辑器来打开<code>vim .gitignore</code>), 顾名思义, 这个文件名字告诉我们就是用来忽略掉在版本管理中我们不关心的文件, 具体用法如下:</p>\n<ol>\n<li>在git中, 每一行代表一个用来匹配的模式</li>\n<li>空行不会匹配任何模式, 因此可以用来当做分割线使得.gitignore文件看起来更美观</li>\n<li>以#开头的是一个注释</li>\n<li>尾部的空格将会被忽略掉, 除非他们用反斜杠 “\\” 括起来</li>\n<li>前缀”!” 代表一个取反的操作: 会消除前一个模式中指定的忽略的文件. 例如<br><code>\\*.swp</code><br><code>!lib.swp</code><br>这个模式代表将会忽略掉不是以lib.swp结尾的所有.swp文件<br>6.(…未完)</li>\n</ol>\n</blockquote>\n<h4 id=\"3-查看仓库状\"><a href=\"#3-查看仓库状\" class=\"headerlink\" title=\"3.查看仓库状\"></a>3.查看仓库状</h4><ul>\n<li>可以查看\b工作区状态: <code>git status</code></li>\n</ul>\n<h4 id=\"4-仓库的创建\"><a href=\"#4-仓库的创建\" class=\"headerlink\" title=\"4. 仓库的创建\"></a>4. 仓库的创建</h4><ul>\n<li>克隆一个远端仓库到指定的目录中: <code>git clone [&#39;url&#39;]</code></li>\n<li>克隆一个远端仓库到已存在的目录中: <code>git clone [&#39;url&#39;] [&#39;path&#39;]</code></li>\n</ul>\n<h4 id=\"5-操作\"><a href=\"#5-操作\" class=\"headerlink\" title=\"5. 操作\"></a>5. 操作</h4><ul>\n<li>删除在工作区删除了但版本库里面尚未删除的文件: <code>git rm [文件名]</code></li>\n<li>只从暂存区删除而不从工作区删除文件:   <code>git rm --cached [文件名]</code><blockquote>\n<p>例如: deleteme.rb添加到了暂存区, 现在不想让它被暂存, 就可以使用这条命令:<br><code>git rm --cached deleteme.rb</code></p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"6-git-stash命令\"><a href=\"#6-git-stash命令\" class=\"headerlink\" title=\"6. git stash命令\"></a>6. <code>git stash</code>命令</h4><ul>\n<li>解释:<blockquote>\n<p>当你想清空当前的工作目录的时候, 可以使用<code>git stash</code>命令来记录当前的工作目录和暂存区的状态. 这个命令可以保存你的本地修改并且将你的工作目录恢复到和HEAD commit一致的状态</p>\n<p><strong>简而言之</strong>: 就是可以既更新版本库的最新版本, 又可以保存本地的修改(纯属个人理解)</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><code>git stash list</code>: 列出已经备份过的改变</li>\n<li><code>git stash show</code>: 显示已经记录在stash中的文件状态和它的原始状态的不同</li>\n<li><code>git stash save</code>: 将本地的修改作为一个新的stash, 并且重置工作目录(<code>git stash</code>命令也会被解析为<code>git stash save</code>)</li>\n</ul>\n<h4 id=\"7-git-mv命令\"><a href=\"#7-git-mv命令\" class=\"headerlink\" title=\"7. git mv命令\"></a>7. <code>git mv</code>命令</h4><ul>\n<li>解释:<blockquote>\n<p>从暂存区中移除已跟踪的文件或重命名已跟踪的文件</p>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一-初始化\"><a href=\"#一-初始化\" class=\"headerlink\" title=\"一. 初始化\"></a>一. 初始化</h3><ul>\n<li>初始化当前目录为一个git仓库:  <code>git init</code></li>\n<li>设置git账户:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;You Name&quot;</span><br><span class=\"line\">git config --global user.email &quot;your email address&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"二-仓库操作\"><a href=\"#二-仓库操作\" class=\"headerlink\" title=\"二. 仓库操作\"></a>二. 仓库操作</h3><h4 id=\"1-版本管理\"><a href=\"#1-版本管理\" class=\"headerlink\" title=\"1. 版本管理\"></a>1. 版本管理</h4><ul>\n<li>添加文件到暂存区: <code>git add [Files]</code></li>\n<li>将暂存区的文件提交: <code>git commit -m [&#39;msg&#39;]</code></li>\n</ul>\n<h4 id=\"2-指定不纳入版本管理的文件\"><a href=\"#2-指定不纳入版本管理的文件\" class=\"headerlink\" title=\"2. 指定不纳入版本管理的文件:\"></a>2. 指定不纳入版本管理的文件:</h4><blockquote>\n<p>在git仓库下打开.gitignore文件(Mac/Linux系统下这个文件是个隐藏的, 可以在终端中用命令调用文本编辑器来打开<code>vim .gitignore</code>), 顾名思义, 这个文件名字告诉我们就是用来忽略掉在版本管理中我们不关心的文件, 具体用法如下:</p>\n<ol>\n<li>在git中, 每一行代表一个用来匹配的模式</li>\n<li>空行不会匹配任何模式, 因此可以用来当做分割线使得.gitignore文件看起来更美观</li>\n<li>以#开头的是一个注释</li>\n<li>尾部的空格将会被忽略掉, 除非他们用反斜杠 “\\” 括起来</li>\n<li>前缀”!” 代表一个取反的操作: 会消除前一个模式中指定的忽略的文件. 例如<br><code>\\*.swp</code><br><code>!lib.swp</code><br>这个模式代表将会忽略掉不是以lib.swp结尾的所有.swp文件<br>6.(…未完)</li>\n</ol>\n</blockquote>\n<h4 id=\"3-查看仓库状\"><a href=\"#3-查看仓库状\" class=\"headerlink\" title=\"3.查看仓库状\"></a>3.查看仓库状</h4><ul>\n<li>可以查看\b工作区状态: <code>git status</code></li>\n</ul>\n<h4 id=\"4-仓库的创建\"><a href=\"#4-仓库的创建\" class=\"headerlink\" title=\"4. 仓库的创建\"></a>4. 仓库的创建</h4><ul>\n<li>克隆一个远端仓库到指定的目录中: <code>git clone [&#39;url&#39;]</code></li>\n<li>克隆一个远端仓库到已存在的目录中: <code>git clone [&#39;url&#39;] [&#39;path&#39;]</code></li>\n</ul>\n<h4 id=\"5-操作\"><a href=\"#5-操作\" class=\"headerlink\" title=\"5. 操作\"></a>5. 操作</h4><ul>\n<li>删除在工作区删除了但版本库里面尚未删除的文件: <code>git rm [文件名]</code></li>\n<li>只从暂存区删除而不从工作区删除文件:   <code>git rm --cached [文件名]</code><blockquote>\n<p>例如: deleteme.rb添加到了暂存区, 现在不想让它被暂存, 就可以使用这条命令:<br><code>git rm --cached deleteme.rb</code></p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"6-git-stash命令\"><a href=\"#6-git-stash命令\" class=\"headerlink\" title=\"6. git stash命令\"></a>6. <code>git stash</code>命令</h4><ul>\n<li>解释:<blockquote>\n<p>当你想清空当前的工作目录的时候, 可以使用<code>git stash</code>命令来记录当前的工作目录和暂存区的状态. 这个命令可以保存你的本地修改并且将你的工作目录恢复到和HEAD commit一致的状态</p>\n<p><strong>简而言之</strong>: 就是可以既更新版本库的最新版本, 又可以保存本地的修改(纯属个人理解)</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><code>git stash list</code>: 列出已经备份过的改变</li>\n<li><code>git stash show</code>: 显示已经记录在stash中的文件状态和它的原始状态的不同</li>\n<li><code>git stash save</code>: 将本地的修改作为一个新的stash, 并且重置工作目录(<code>git stash</code>命令也会被解析为<code>git stash save</code>)</li>\n</ul>\n<h4 id=\"7-git-mv命令\"><a href=\"#7-git-mv命令\" class=\"headerlink\" title=\"7. git mv命令\"></a>7. <code>git mv</code>命令</h4><ul>\n<li>解释:<blockquote>\n<p>从暂存区中移除已跟踪的文件或重命名已跟踪的文件</p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"Python解密m3u8视频","date":"2018-05-06T16:00:18.000Z","_content":"\n### 背景说明\n>说到了m3u8，就不得不先在此提一下它的一些历史以及用途和格式标准定义。在此，我们借鉴下面这个地址的博文[***点我传送***][1_hls]，如果读者对此感兴趣，请自行了解。如果只是单纯的需要解密m3u8视频并将*.ts合并成一个视频文件(如mp4)，请往下阅读。\n\n### 文件夹结构说明\n> 先来看看m3u8文件的庐山真面目，请看图1.1，黄色框起来的部分就对应其中的一个加密的*.ts文件：\n> 图1.1![图1.1, 来自某m3u8视频文件](/img/201805/2018-05-07_000536.png)\n\n> 我的目录结构如图1.2所示\n> 图1.2![图1.2, 我的目录结构](/img/201805/2018-05-07_002257.png)\n> ***normal_list***:  文件夹里面存放我处理过后的m3u8文件：**(这里的处理指的是将上图中黄色高亮框起来的部分的路径替换成正确的路径，URI和ts文件路径 因为m3u8是从手机qq浏览器缓存下来的，所以m3u8文件中的路径最初并不是现在这个路径，替换方法请读者自己解决，博主使用Python写了一个小脚本使用正则表达式批量替换的)**\n> ***output***: 文件夹是打算作为解密之后mp4文件的输出路径，即最终视频mp4的是存放这里的。\n> ***video***: 文件夹是存放的是下载下来的m3u8真正的视频数据文件，就是有很多*.ts和*.key文件，从图1.1里面的URI字段也可以看出来这一点\n\n### 思路\n> 从图1.1中可以看出，这个m3u8采用的加密方式是AES-128, 关于AES加密算法，请读者自己去了解。AES加密算法有很多种模式，m3u8用的方式是[*CBC*][2_cbcwiki](Cipher Block Chaining)模式。因此，可以这样来解密\n1. 遍历所有的m3u8文件\n2. 解析每个m3u8，获取URI, IV, TS路径，放到一个列表L中\n3. 遍历L，加载读取URI中的key, 加载读取IV, 加载读取TS数据，使用AES解密，将结果累加到字节数组res中\n4. 将res写入文件就是最终解密成功的视频文件\n\n\n### 环境\n+ `Python 3.6.5`\n+ `pycryptodom`: Python的一个加密解密的第三方库\n+ 安装：\n```\npip install pycryptodome\n```\n\n### Python代码实现\n```python\nfrom Crypto.Cipher import AES\nimport re, os\n\ninput_path = \"D:/Videos/Manu/normal_list\" #输入路径，请替换成自己的\noutput_path = \"D:/Videos/Manu/output\" #输出路径，请替换成自己的\n\n# 这里是为了划分数据段，因为AES128加密每次操作的数据长度是128位，也就是16个字节\ndef splite_data(data):\n    res = []\n    LEN = 16\n    idx = 0\n    seg = data[idx:LEN]\n    while len(seg) == LEN:\n        res.append(seg)\n        idx += LEN\n        seg = data[idx:idx+LEN]\n    if LEN > len(seg) > 0:\n        res.append(seg.zjust(LEN, b'\\0'))\n    return res\n\n# 解密单个ts文件\ndef decrypt_single_ts(key_path, iv_str, ts_path):\n    fi = open(key_path, 'rb')\n    key = fi.read()\n    fi.close()\n    fi = open(ts_path, 'rb')\n    ts = fi.read()\n    fi.close()\n    iv = bytes.fromhex(iv_str)\n    pad_len = AES.block_size - len(ts) % AES.block_size\n    if pad_len != AES.block_size:\n        ts = ts[:-pad_len] + bytes([0] * pad_len)\n    cipher = AES.new(key, AES.MODE_CBC, iv=iv)\n    out_data = cipher.decrypt(ts)\n    if pad_len != AES.block_size:\n        out_data = out_data[:-pad_len]\n    return out_data\n\n# 解密并合并一个m3u8文件\ndef decrypt_single(m3u8_path):\n    fp = open(m3u8_path, 'r')\n    lines = fp.readlines()\n    fp.close()\n    pat_uri = r\"URI=\\\"(.+)\\\"\" #搜索URI的模式\n    pat_iv = r\"IV=0x(\\w+)\" #搜索IV的模式\n    regex_uri = re.compile(pat_uri)\n    regex_iv = re.compile(pat_iv)\n    datas = b''\n    for idx in range(2, len(lines), 3):\n        if lines[idx] is not None and \"ENDLIST\" not in lines[idx]:\n            key = regex_uri.search(lines[idx])[1].strip()\n            iv = regex_iv.search(lines[idx])[1].strip()\n            ts = lines[idx + 2].strip()\n            datas += decrypt_single_ts(key, iv, ts)\n    return datas\n\n\ndef decrypt():\n    file_list = os.listdir(input_path) # m3u8文件列表\n    for fi in file_list:\n        full_path = os.path.join(input_path, fi)\n        data = decrypt_single(full_path) #解密一个m3u8\n        fi_output_path = os.path.join(output_path, os.path.splitext(fi)[0] + \".mp4\") #获取输出路径\n        fi = open(fi_output_path, 'wb')\n        fi.write(data) #写入解密数据\n        fi.close()\n\nif __name__ == '__main__':\n    decrypt()\n```\n\n### 注意事项：\n+ 请先替换m3u8文件中的URI和key的路径\n+ 请将输入和输出路径替换成自己的\n+ ***替换成功后才可以使用上述代码进行解密操作***\n\n[1_hls]: https://blog.csdn.net/cabbage2008/article/details/50522190\n[2_cbcwiki]: https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation","source":"_posts/Python解密m3u8视频.md","raw":"---\ntitle: Python解密m3u8视频\ndate: 2018-05-07 00:00:18\ntags: Python\n---\n\n### 背景说明\n>说到了m3u8，就不得不先在此提一下它的一些历史以及用途和格式标准定义。在此，我们借鉴下面这个地址的博文[***点我传送***][1_hls]，如果读者对此感兴趣，请自行了解。如果只是单纯的需要解密m3u8视频并将*.ts合并成一个视频文件(如mp4)，请往下阅读。\n\n### 文件夹结构说明\n> 先来看看m3u8文件的庐山真面目，请看图1.1，黄色框起来的部分就对应其中的一个加密的*.ts文件：\n> 图1.1![图1.1, 来自某m3u8视频文件](/img/201805/2018-05-07_000536.png)\n\n> 我的目录结构如图1.2所示\n> 图1.2![图1.2, 我的目录结构](/img/201805/2018-05-07_002257.png)\n> ***normal_list***:  文件夹里面存放我处理过后的m3u8文件：**(这里的处理指的是将上图中黄色高亮框起来的部分的路径替换成正确的路径，URI和ts文件路径 因为m3u8是从手机qq浏览器缓存下来的，所以m3u8文件中的路径最初并不是现在这个路径，替换方法请读者自己解决，博主使用Python写了一个小脚本使用正则表达式批量替换的)**\n> ***output***: 文件夹是打算作为解密之后mp4文件的输出路径，即最终视频mp4的是存放这里的。\n> ***video***: 文件夹是存放的是下载下来的m3u8真正的视频数据文件，就是有很多*.ts和*.key文件，从图1.1里面的URI字段也可以看出来这一点\n\n### 思路\n> 从图1.1中可以看出，这个m3u8采用的加密方式是AES-128, 关于AES加密算法，请读者自己去了解。AES加密算法有很多种模式，m3u8用的方式是[*CBC*][2_cbcwiki](Cipher Block Chaining)模式。因此，可以这样来解密\n1. 遍历所有的m3u8文件\n2. 解析每个m3u8，获取URI, IV, TS路径，放到一个列表L中\n3. 遍历L，加载读取URI中的key, 加载读取IV, 加载读取TS数据，使用AES解密，将结果累加到字节数组res中\n4. 将res写入文件就是最终解密成功的视频文件\n\n\n### 环境\n+ `Python 3.6.5`\n+ `pycryptodom`: Python的一个加密解密的第三方库\n+ 安装：\n```\npip install pycryptodome\n```\n\n### Python代码实现\n```python\nfrom Crypto.Cipher import AES\nimport re, os\n\ninput_path = \"D:/Videos/Manu/normal_list\" #输入路径，请替换成自己的\noutput_path = \"D:/Videos/Manu/output\" #输出路径，请替换成自己的\n\n# 这里是为了划分数据段，因为AES128加密每次操作的数据长度是128位，也就是16个字节\ndef splite_data(data):\n    res = []\n    LEN = 16\n    idx = 0\n    seg = data[idx:LEN]\n    while len(seg) == LEN:\n        res.append(seg)\n        idx += LEN\n        seg = data[idx:idx+LEN]\n    if LEN > len(seg) > 0:\n        res.append(seg.zjust(LEN, b'\\0'))\n    return res\n\n# 解密单个ts文件\ndef decrypt_single_ts(key_path, iv_str, ts_path):\n    fi = open(key_path, 'rb')\n    key = fi.read()\n    fi.close()\n    fi = open(ts_path, 'rb')\n    ts = fi.read()\n    fi.close()\n    iv = bytes.fromhex(iv_str)\n    pad_len = AES.block_size - len(ts) % AES.block_size\n    if pad_len != AES.block_size:\n        ts = ts[:-pad_len] + bytes([0] * pad_len)\n    cipher = AES.new(key, AES.MODE_CBC, iv=iv)\n    out_data = cipher.decrypt(ts)\n    if pad_len != AES.block_size:\n        out_data = out_data[:-pad_len]\n    return out_data\n\n# 解密并合并一个m3u8文件\ndef decrypt_single(m3u8_path):\n    fp = open(m3u8_path, 'r')\n    lines = fp.readlines()\n    fp.close()\n    pat_uri = r\"URI=\\\"(.+)\\\"\" #搜索URI的模式\n    pat_iv = r\"IV=0x(\\w+)\" #搜索IV的模式\n    regex_uri = re.compile(pat_uri)\n    regex_iv = re.compile(pat_iv)\n    datas = b''\n    for idx in range(2, len(lines), 3):\n        if lines[idx] is not None and \"ENDLIST\" not in lines[idx]:\n            key = regex_uri.search(lines[idx])[1].strip()\n            iv = regex_iv.search(lines[idx])[1].strip()\n            ts = lines[idx + 2].strip()\n            datas += decrypt_single_ts(key, iv, ts)\n    return datas\n\n\ndef decrypt():\n    file_list = os.listdir(input_path) # m3u8文件列表\n    for fi in file_list:\n        full_path = os.path.join(input_path, fi)\n        data = decrypt_single(full_path) #解密一个m3u8\n        fi_output_path = os.path.join(output_path, os.path.splitext(fi)[0] + \".mp4\") #获取输出路径\n        fi = open(fi_output_path, 'wb')\n        fi.write(data) #写入解密数据\n        fi.close()\n\nif __name__ == '__main__':\n    decrypt()\n```\n\n### 注意事项：\n+ 请先替换m3u8文件中的URI和key的路径\n+ 请将输入和输出路径替换成自己的\n+ ***替换成功后才可以使用上述代码进行解密操作***\n\n[1_hls]: https://blog.csdn.net/cabbage2008/article/details/50522190\n[2_cbcwiki]: https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation","slug":"Python解密m3u8视频","published":1,"updated":"2018-06-17T02:31:05.240Z","_id":"cjii6o72k0000owdklsxg2g9j","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"背景说明\"><a href=\"#背景说明\" class=\"headerlink\" title=\"背景说明\"></a>背景说明</h3><blockquote>\n<p>说到了m3u8，就不得不先在此提一下它的一些历史以及用途和格式标准定义。在此，我们借鉴下面这个地址的博文<a href=\"https://blog.csdn.net/cabbage2008/article/details/50522190\" target=\"_blank\" rel=\"noopener\"><strong><em>点我传送</em></strong></a>，如果读者对此感兴趣，请自行了解。如果只是单纯的需要解密m3u8视频并将*.ts合并成一个视频文件(如mp4)，请往下阅读。</p>\n</blockquote>\n<h3 id=\"文件夹结构说明\"><a href=\"#文件夹结构说明\" class=\"headerlink\" title=\"文件夹结构说明\"></a>文件夹结构说明</h3><blockquote>\n<p>先来看看m3u8文件的庐山真面目，请看图1.1，黄色框起来的部分就对应其中的一个加密的*.ts文件：<br>图1.1<img src=\"/img/201805/2018-05-07_000536.png\" alt=\"图1.1, 来自某m3u8视频文件\"></p>\n</blockquote>\n<blockquote>\n<p>我的目录结构如图1.2所示<br>图1.2<img src=\"/img/201805/2018-05-07_002257.png\" alt=\"图1.2, 我的目录结构\"><br><strong><em>normal_list</em></strong>:  文件夹里面存放我处理过后的m3u8文件：<strong>(这里的处理指的是将上图中黄色高亮框起来的部分的路径替换成正确的路径，URI和ts文件路径 因为m3u8是从手机qq浏览器缓存下来的，所以m3u8文件中的路径最初并不是现在这个路径，替换方法请读者自己解决，博主使用Python写了一个小脚本使用正则表达式批量替换的)</strong><br><strong><em>output</em></strong>: 文件夹是打算作为解密之后mp4文件的输出路径，即最终视频mp4的是存放这里的。<br><strong><em>video</em></strong>: 文件夹是存放的是下载下来的m3u8真正的视频数据文件，就是有很多<em>.ts和</em>.key文件，从图1.1里面的URI字段也可以看出来这一点</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><blockquote>\n<p>从图1.1中可以看出，这个m3u8采用的加密方式是AES-128, 关于AES加密算法，请读者自己去了解。AES加密算法有很多种模式，m3u8用的方式是<a href=\"https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation\" target=\"_blank\" rel=\"noopener\"><em>CBC</em></a>(Cipher Block Chaining)模式。因此，可以这样来解密</p>\n<ol>\n<li>遍历所有的m3u8文件</li>\n<li>解析每个m3u8，获取URI, IV, TS路径，放到一个列表L中</li>\n<li>遍历L，加载读取URI中的key, 加载读取IV, 加载读取TS数据，使用AES解密，将结果累加到字节数组res中</li>\n<li>将res写入文件就是最终解密成功的视频文件</li>\n</ol>\n</blockquote>\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><ul>\n<li><code>Python 3.6.5</code></li>\n<li><code>pycryptodom</code>: Python的一个加密解密的第三方库</li>\n<li>安装：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pycryptodome</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Python代码实现\"><a href=\"#Python代码实现\" class=\"headerlink\" title=\"Python代码实现\"></a>Python代码实现</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> AES</span><br><span class=\"line\"><span class=\"keyword\">import</span> re, os</span><br><span class=\"line\"></span><br><span class=\"line\">input_path = <span class=\"string\">\"D:/Videos/Manu/normal_list\"</span> <span class=\"comment\">#输入路径，请替换成自己的</span></span><br><span class=\"line\">output_path = <span class=\"string\">\"D:/Videos/Manu/output\"</span> <span class=\"comment\">#输出路径，请替换成自己的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这里是为了划分数据段，因为AES128加密每次操作的数据长度是128位，也就是16个字节</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">splite_data</span><span class=\"params\">(data)</span>:</span></span><br><span class=\"line\">    res = []</span><br><span class=\"line\">    LEN = <span class=\"number\">16</span></span><br><span class=\"line\">    idx = <span class=\"number\">0</span></span><br><span class=\"line\">    seg = data[idx:LEN]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> len(seg) == LEN:</span><br><span class=\"line\">        res.append(seg)</span><br><span class=\"line\">        idx += LEN</span><br><span class=\"line\">        seg = data[idx:idx+LEN]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> LEN &gt; len(seg) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        res.append(seg.zjust(LEN, <span class=\"string\">b'\\0'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解密单个ts文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decrypt_single_ts</span><span class=\"params\">(key_path, iv_str, ts_path)</span>:</span></span><br><span class=\"line\">    fi = open(key_path, <span class=\"string\">'rb'</span>)</span><br><span class=\"line\">    key = fi.read()</span><br><span class=\"line\">    fi.close()</span><br><span class=\"line\">    fi = open(ts_path, <span class=\"string\">'rb'</span>)</span><br><span class=\"line\">    ts = fi.read()</span><br><span class=\"line\">    fi.close()</span><br><span class=\"line\">    iv = bytes.fromhex(iv_str)</span><br><span class=\"line\">    pad_len = AES.block_size - len(ts) % AES.block_size</span><br><span class=\"line\">    <span class=\"keyword\">if</span> pad_len != AES.block_size:</span><br><span class=\"line\">        ts = ts[:-pad_len] + bytes([<span class=\"number\">0</span>] * pad_len)</span><br><span class=\"line\">    cipher = AES.new(key, AES.MODE_CBC, iv=iv)</span><br><span class=\"line\">    out_data = cipher.decrypt(ts)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> pad_len != AES.block_size:</span><br><span class=\"line\">        out_data = out_data[:-pad_len]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> out_data</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解密并合并一个m3u8文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decrypt_single</span><span class=\"params\">(m3u8_path)</span>:</span></span><br><span class=\"line\">    fp = open(m3u8_path, <span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lines = fp.readlines()</span><br><span class=\"line\">    fp.close()</span><br><span class=\"line\">    pat_uri = <span class=\"string\">r\"URI=\\\"(.+)\\\"\"</span> <span class=\"comment\">#搜索URI的模式</span></span><br><span class=\"line\">    pat_iv = <span class=\"string\">r\"IV=0x(\\w+)\"</span> <span class=\"comment\">#搜索IV的模式</span></span><br><span class=\"line\">    regex_uri = re.compile(pat_uri)</span><br><span class=\"line\">    regex_iv = re.compile(pat_iv)</span><br><span class=\"line\">    datas = <span class=\"string\">b''</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> idx <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>, len(lines), <span class=\"number\">3</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> lines[idx] <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span> <span class=\"keyword\">and</span> <span class=\"string\">\"ENDLIST\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> lines[idx]:</span><br><span class=\"line\">            key = regex_uri.search(lines[idx])[<span class=\"number\">1</span>].strip()</span><br><span class=\"line\">            iv = regex_iv.search(lines[idx])[<span class=\"number\">1</span>].strip()</span><br><span class=\"line\">            ts = lines[idx + <span class=\"number\">2</span>].strip()</span><br><span class=\"line\">            datas += decrypt_single_ts(key, iv, ts)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> datas</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decrypt</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    file_list = os.listdir(input_path) <span class=\"comment\"># m3u8文件列表</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> fi <span class=\"keyword\">in</span> file_list:</span><br><span class=\"line\">        full_path = os.path.join(input_path, fi)</span><br><span class=\"line\">        data = decrypt_single(full_path) <span class=\"comment\">#解密一个m3u8</span></span><br><span class=\"line\">        fi_output_path = os.path.join(output_path, os.path.splitext(fi)[<span class=\"number\">0</span>] + <span class=\"string\">\".mp4\"</span>) <span class=\"comment\">#获取输出路径</span></span><br><span class=\"line\">        fi = open(fi_output_path, <span class=\"string\">'wb'</span>)</span><br><span class=\"line\">        fi.write(data) <span class=\"comment\">#写入解密数据</span></span><br><span class=\"line\">        fi.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    decrypt()</span><br></pre></td></tr></table></figure>\n<h3 id=\"注意事项：\"><a href=\"#注意事项：\" class=\"headerlink\" title=\"注意事项：\"></a>注意事项：</h3><ul>\n<li>请先替换m3u8文件中的URI和key的路径</li>\n<li>请将输入和输出路径替换成自己的</li>\n<li><strong><em>替换成功后才可以使用上述代码进行解密操作</em></strong></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"背景说明\"><a href=\"#背景说明\" class=\"headerlink\" title=\"背景说明\"></a>背景说明</h3><blockquote>\n<p>说到了m3u8，就不得不先在此提一下它的一些历史以及用途和格式标准定义。在此，我们借鉴下面这个地址的博文<a href=\"https://blog.csdn.net/cabbage2008/article/details/50522190\" target=\"_blank\" rel=\"noopener\"><strong><em>点我传送</em></strong></a>，如果读者对此感兴趣，请自行了解。如果只是单纯的需要解密m3u8视频并将*.ts合并成一个视频文件(如mp4)，请往下阅读。</p>\n</blockquote>\n<h3 id=\"文件夹结构说明\"><a href=\"#文件夹结构说明\" class=\"headerlink\" title=\"文件夹结构说明\"></a>文件夹结构说明</h3><blockquote>\n<p>先来看看m3u8文件的庐山真面目，请看图1.1，黄色框起来的部分就对应其中的一个加密的*.ts文件：<br>图1.1<img src=\"/img/201805/2018-05-07_000536.png\" alt=\"图1.1, 来自某m3u8视频文件\"></p>\n</blockquote>\n<blockquote>\n<p>我的目录结构如图1.2所示<br>图1.2<img src=\"/img/201805/2018-05-07_002257.png\" alt=\"图1.2, 我的目录结构\"><br><strong><em>normal_list</em></strong>:  文件夹里面存放我处理过后的m3u8文件：<strong>(这里的处理指的是将上图中黄色高亮框起来的部分的路径替换成正确的路径，URI和ts文件路径 因为m3u8是从手机qq浏览器缓存下来的，所以m3u8文件中的路径最初并不是现在这个路径，替换方法请读者自己解决，博主使用Python写了一个小脚本使用正则表达式批量替换的)</strong><br><strong><em>output</em></strong>: 文件夹是打算作为解密之后mp4文件的输出路径，即最终视频mp4的是存放这里的。<br><strong><em>video</em></strong>: 文件夹是存放的是下载下来的m3u8真正的视频数据文件，就是有很多<em>.ts和</em>.key文件，从图1.1里面的URI字段也可以看出来这一点</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><blockquote>\n<p>从图1.1中可以看出，这个m3u8采用的加密方式是AES-128, 关于AES加密算法，请读者自己去了解。AES加密算法有很多种模式，m3u8用的方式是<a href=\"https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation\" target=\"_blank\" rel=\"noopener\"><em>CBC</em></a>(Cipher Block Chaining)模式。因此，可以这样来解密</p>\n<ol>\n<li>遍历所有的m3u8文件</li>\n<li>解析每个m3u8，获取URI, IV, TS路径，放到一个列表L中</li>\n<li>遍历L，加载读取URI中的key, 加载读取IV, 加载读取TS数据，使用AES解密，将结果累加到字节数组res中</li>\n<li>将res写入文件就是最终解密成功的视频文件</li>\n</ol>\n</blockquote>\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><ul>\n<li><code>Python 3.6.5</code></li>\n<li><code>pycryptodom</code>: Python的一个加密解密的第三方库</li>\n<li>安装：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pycryptodome</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Python代码实现\"><a href=\"#Python代码实现\" class=\"headerlink\" title=\"Python代码实现\"></a>Python代码实现</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> AES</span><br><span class=\"line\"><span class=\"keyword\">import</span> re, os</span><br><span class=\"line\"></span><br><span class=\"line\">input_path = <span class=\"string\">\"D:/Videos/Manu/normal_list\"</span> <span class=\"comment\">#输入路径，请替换成自己的</span></span><br><span class=\"line\">output_path = <span class=\"string\">\"D:/Videos/Manu/output\"</span> <span class=\"comment\">#输出路径，请替换成自己的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这里是为了划分数据段，因为AES128加密每次操作的数据长度是128位，也就是16个字节</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">splite_data</span><span class=\"params\">(data)</span>:</span></span><br><span class=\"line\">    res = []</span><br><span class=\"line\">    LEN = <span class=\"number\">16</span></span><br><span class=\"line\">    idx = <span class=\"number\">0</span></span><br><span class=\"line\">    seg = data[idx:LEN]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> len(seg) == LEN:</span><br><span class=\"line\">        res.append(seg)</span><br><span class=\"line\">        idx += LEN</span><br><span class=\"line\">        seg = data[idx:idx+LEN]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> LEN &gt; len(seg) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        res.append(seg.zjust(LEN, <span class=\"string\">b'\\0'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解密单个ts文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decrypt_single_ts</span><span class=\"params\">(key_path, iv_str, ts_path)</span>:</span></span><br><span class=\"line\">    fi = open(key_path, <span class=\"string\">'rb'</span>)</span><br><span class=\"line\">    key = fi.read()</span><br><span class=\"line\">    fi.close()</span><br><span class=\"line\">    fi = open(ts_path, <span class=\"string\">'rb'</span>)</span><br><span class=\"line\">    ts = fi.read()</span><br><span class=\"line\">    fi.close()</span><br><span class=\"line\">    iv = bytes.fromhex(iv_str)</span><br><span class=\"line\">    pad_len = AES.block_size - len(ts) % AES.block_size</span><br><span class=\"line\">    <span class=\"keyword\">if</span> pad_len != AES.block_size:</span><br><span class=\"line\">        ts = ts[:-pad_len] + bytes([<span class=\"number\">0</span>] * pad_len)</span><br><span class=\"line\">    cipher = AES.new(key, AES.MODE_CBC, iv=iv)</span><br><span class=\"line\">    out_data = cipher.decrypt(ts)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> pad_len != AES.block_size:</span><br><span class=\"line\">        out_data = out_data[:-pad_len]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> out_data</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解密并合并一个m3u8文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decrypt_single</span><span class=\"params\">(m3u8_path)</span>:</span></span><br><span class=\"line\">    fp = open(m3u8_path, <span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lines = fp.readlines()</span><br><span class=\"line\">    fp.close()</span><br><span class=\"line\">    pat_uri = <span class=\"string\">r\"URI=\\\"(.+)\\\"\"</span> <span class=\"comment\">#搜索URI的模式</span></span><br><span class=\"line\">    pat_iv = <span class=\"string\">r\"IV=0x(\\w+)\"</span> <span class=\"comment\">#搜索IV的模式</span></span><br><span class=\"line\">    regex_uri = re.compile(pat_uri)</span><br><span class=\"line\">    regex_iv = re.compile(pat_iv)</span><br><span class=\"line\">    datas = <span class=\"string\">b''</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> idx <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>, len(lines), <span class=\"number\">3</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> lines[idx] <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span> <span class=\"keyword\">and</span> <span class=\"string\">\"ENDLIST\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> lines[idx]:</span><br><span class=\"line\">            key = regex_uri.search(lines[idx])[<span class=\"number\">1</span>].strip()</span><br><span class=\"line\">            iv = regex_iv.search(lines[idx])[<span class=\"number\">1</span>].strip()</span><br><span class=\"line\">            ts = lines[idx + <span class=\"number\">2</span>].strip()</span><br><span class=\"line\">            datas += decrypt_single_ts(key, iv, ts)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> datas</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decrypt</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    file_list = os.listdir(input_path) <span class=\"comment\"># m3u8文件列表</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> fi <span class=\"keyword\">in</span> file_list:</span><br><span class=\"line\">        full_path = os.path.join(input_path, fi)</span><br><span class=\"line\">        data = decrypt_single(full_path) <span class=\"comment\">#解密一个m3u8</span></span><br><span class=\"line\">        fi_output_path = os.path.join(output_path, os.path.splitext(fi)[<span class=\"number\">0</span>] + <span class=\"string\">\".mp4\"</span>) <span class=\"comment\">#获取输出路径</span></span><br><span class=\"line\">        fi = open(fi_output_path, <span class=\"string\">'wb'</span>)</span><br><span class=\"line\">        fi.write(data) <span class=\"comment\">#写入解密数据</span></span><br><span class=\"line\">        fi.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    decrypt()</span><br></pre></td></tr></table></figure>\n<h3 id=\"注意事项：\"><a href=\"#注意事项：\" class=\"headerlink\" title=\"注意事项：\"></a>注意事项：</h3><ul>\n<li>请先替换m3u8文件中的URI和key的路径</li>\n<li>请将输入和输出路径替换成自己的</li>\n<li><strong><em>替换成功后才可以使用上述代码进行解密操作</em></strong></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjhu06ju80000fkqcflw308ji","tag_id":"cjhu06jui0004fkqck89ofyhz","_id":"cjhu06jup0009fkqce3v9m42y"},{"post_id":"cjhu06juf0002fkqc70h427pc","tag_id":"cjhu06jui0004fkqck89ofyhz","_id":"cjhu06jut000dfkqcol5apbw1"},{"post_id":"cjhu06juj0005fkqcbwb8ntql","tag_id":"cjhu06jus000cfkqcmme6t2sq","_id":"cjhu06jv1000hfkqcizrmcxc5"},{"post_id":"cjhu06juy000ffkqcdfyjevha","tag_id":"cjhu06jui0004fkqck89ofyhz","_id":"cjhu06jv2000ifkqcr6g337fd"},{"post_id":"cjhu06jum0007fkqc8uh35qt7","tag_id":"cjhu06jv0000gfkqcwovff1gu","_id":"cjhu06jv4000kfkqcvmo3wzg5"},{"post_id":"cjhu06jup000afkqck3k2rmxp","tag_id":"cjhu06jus000cfkqcmme6t2sq","_id":"cjhu06jv7000nfkqc92gm439c"},{"post_id":"cjhu06jup000afkqck3k2rmxp","tag_id":"cjhu06jv5000lfkqcrjze2o8b","_id":"cjhu06jv8000ofkqc9t9tal7w"},{"post_id":"cjhu06juu000efkqcbfd674e3","tag_id":"cjhu06jv9000qfkqcprln8may","_id":"cjhu06jvb000tfkqc877bluto"},{"post_id":"cjhu06jw8000ufkqc40mmbpgq","tag_id":"cjhu06jw9000vfkqcryaula6v","_id":"cjhu06jwb000wfkqcklioyfth"},{"post_id":"cjhu06juq000bfkqcgikndi98","tag_id":"cjhu06jus000cfkqcmme6t2sq","_id":"cjhu6pd4m0011fkqcglehgyua"},{"post_id":"cjhu06juq000bfkqcgikndi98","tag_id":"cjhu06jv5000lfkqcrjze2o8b","_id":"cjhu6pd4n0012fkqcex1gvf8h"},{"post_id":"cjii6o72k0000owdklsxg2g9j","tag_id":"cjii6o72k0001owdkuh9wr1ae","_id":"cjii6o72k0002owdkhuazrdv0"}],"Tag":[{"name":"OpenGL, 图形学","_id":"cjhu06jui0004fkqck89ofyhz"},{"name":"Unity3D","_id":"cjhu06jus000cfkqcmme6t2sq"},{"name":"高等数学","_id":"cjhu06jv0000gfkqcwovff1gu"},{"name":"Shader","_id":"cjhu06jv5000lfkqcrjze2o8b"},{"name":"杂项","_id":"cjhu06jv9000qfkqcprln8may"},{"name":"工具;版本管理","_id":"cjhu06jw9000vfkqcryaula6v"},{"name":"Python","_id":"cjii6o72k0001owdkuh9wr1ae"}]}}