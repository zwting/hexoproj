{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/img/201705/2017-05-29_164226.png","path":"img/201705/2017-05-29_164226.png","modified":0,"renderable":0},{"_id":"source/img/201705/2017-05-29_164227.png","path":"img/201705/2017-05-29_164227.png","modified":0,"renderable":0},{"_id":"source/img/201705/2017-05-29_184313.png","path":"img/201705/2017-05-29_184313.png","modified":0,"renderable":0},{"_id":"source/img/201705/2017-05-30_001220.png","path":"img/201705/2017-05-30_001220.png","modified":0,"renderable":0},{"_id":"source/img/201705/dll-pic.png","path":"img/201705/dll-pic.png","modified":0,"renderable":0},{"_id":"source/img/201705/2017-05-29_190301.png","path":"img/201705/2017-05-29_190301.png","modified":0,"renderable":0},{"_id":"source/img/201708/2017-08-24 5.29.50.png","path":"img/201708/2017-08-24 5.29.50.png","modified":0,"renderable":0},{"_id":"source/img/201708/2017-08-25 2.19.10.png","path":"img/201708/2017-08-25 2.19.10.png","modified":0,"renderable":0},{"_id":"source/img/201708/2017-08-29 3.50.08.png","path":"img/201708/2017-08-29 3.50.08.png","modified":0,"renderable":0},{"_id":"source/img/201708/2017-08-25 11.28.13.png","path":"img/201708/2017-08-25 11.28.13.png","modified":0,"renderable":0},{"_id":"source/img/201708/2017-08-29 5.38.28.png","path":"img/201708/2017-08-29 5.38.28.png","modified":0,"renderable":0},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/fav_hd.png","path":"img/fav_hd.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"source/img/201708/2017-08-24 .png","path":"img/201708/2017-08-24 .png","modified":0,"renderable":0},{"_id":"source/img/201708/2017-08-24 3.48.18.png","path":"img/201708/2017-08-24 3.48.18.png","modified":0,"renderable":0},{"_id":"themes/icarus/source/css/images/avatar.png","path":"css/images/avatar.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/styles.css","path":"libs/open-sans/styles.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","path":"libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","path":"libs/jquery/2.1.3/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"320bf3d498fae06e9e70a6faa729ddc46951b8f0","modified":1518176589636},{"_id":"source/CNAME","hash":"86b803144a4ae1fb086b2e749a598675e11fc26b","modified":1518176589636},{"_id":"source/robots.txt","hash":"5d6f306e189f25494d8437fa7a375b3d805e83ec","modified":1518176589666},{"_id":"themes/icarus/.gitignore","hash":"ece1c3037855e866d5816467cdfb2cef4e36e0a7","modified":1518178989975},{"_id":"themes/icarus/README.md","hash":"c2407cbda23f087be719d6dc3f7207a8e01ffd73","modified":1518178989975},{"_id":"themes/icarus/LICENSE","hash":"73ed09aa00f7bda6319fc7d5b722fb40e0c2017e","modified":1518178989975},{"_id":"themes/icarus/_config.yml","hash":"d0b9d3f4bf30f1fa2a356a09d3908c2e654a260d","modified":1518241109962},{"_id":"themes/icarus/_config.yml.example","hash":"e3c80d9c35fbccb29038bc15aa930b1f77f7698c","modified":1518182153350},{"_id":"themes/icarus/package.json","hash":"c156985c2689895a228188a29ceaae8f7d0bb34f","modified":1518178989995},{"_id":"source/_drafts/numberConvert.md","hash":"26543e1f637872f5dee45b0a1a82f18b01ef8114","modified":1518176589636},{"_id":"source/_posts/Git学习.md","hash":"be35e442fdbae9cb7b12dd54b5d7ff690544c8c6","modified":1518176589636},{"_id":"source/_posts/OpenGL-Learn-1.md","hash":"8db9daaafe52fe45572a56b498e3bd348334f325","modified":1518176589636},{"_id":"source/_posts/Unity3D特定文件的打开方式.md","hash":"b03a549ababc2d71780e5287ffd9429edb0732f6","modified":1518271405720},{"_id":"source/_posts/mf3gpacg-2.md","hash":"16ecdead207732ff0842a0bc433269d22f33a1e8","modified":1518176589636},{"_id":"source/_posts/mf3gpacg_1.md","hash":"9c77eb68b35d08b366cfc4ac3e94ca5549c535f4","modified":1518176589636},{"_id":"source/_posts/游戏编程模式-阅读笔记.md","hash":"fcbc09fa2c9baf80d69574a16cac5a0f097810bb","modified":1518176589636},{"_id":"source/tags/index.md","hash":"f913370f50299b9b8b4cfd73fbdd5c07f4950549","modified":1518241509119},{"_id":"themes/icarus/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1518178989965},{"_id":"themes/icarus/.git/config","hash":"ff515a4892e11b6cf58078d451b1d87b89e7eaeb","modified":1518178989965},{"_id":"themes/icarus/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1518178779597},{"_id":"themes/icarus/.git/index","hash":"f3d3a0aad3d715b444138426e8c982bea37fe0ce","modified":1518178990055},{"_id":"themes/icarus/.git/packed-refs","hash":"a3c13b37ddb6b9d47351f993eefc214f4f694e1c","modified":1518178989955},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE.md","hash":"2ea8f838582b199302121509c750bebb0ae1fb0f","modified":1518178989975},{"_id":"themes/icarus/layout/archive.ejs","hash":"6a4adb703df447a754225fa665e679816e432ea2","modified":1518178989985},{"_id":"themes/icarus/layout/categories.ejs","hash":"7be3918bcfb9f04b5213aeda4ad19c952128bee3","modified":1518178989985},{"_id":"themes/icarus/layout/category.ejs","hash":"1d407f9176db84e83062c52ad4755aaea9e74401","modified":1518178989985},{"_id":"themes/icarus/layout/index.ejs","hash":"c329f4598a0af4d8678ba789fdc84fcdf10122de","modified":1518178989985},{"_id":"themes/icarus/layout/layout.ejs","hash":"2bc1e3071a5ec25096584d01726a3b7c4d53ffaf","modified":1518178989985},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1518178989985},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1518178989985},{"_id":"themes/icarus/layout/tag.ejs","hash":"f6c220d4e5c231028bc71ddc11aec97d7b5a9943","modified":1518178989995},{"_id":"themes/icarus/layout/tags.ejs","hash":"2a5b11bdf0dbf7300e11eae34bba00490ed77a0f","modified":1518178989995},{"_id":"themes/icarus/languages/en.yml","hash":"2b888a89957e07f440452a12ef338af979abb4c6","modified":1518178989975},{"_id":"themes/icarus/languages/es.yml","hash":"f48b21e020b48a38747a5cd0a2c853d717ad8a7f","modified":1518178989975},{"_id":"themes/icarus/languages/id.yml","hash":"83021037b6dad8dd48f48e3b4a822d07d56fc272","modified":1518178989975},{"_id":"themes/icarus/languages/fr.yml","hash":"7b386bf21226433cb7da7989aba07ce33da5b359","modified":1518178989975},{"_id":"themes/icarus/languages/ja.yml","hash":"e13df67ba3666c0d95d60c081e41fb86f6f48663","modified":1518178989975},{"_id":"themes/icarus/languages/ko.yml","hash":"5e6e5b5d20c940cf0be26957f3a3f6a141f338e0","modified":1518178989975},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"3cf767f94766ac3a93d6efb9ef954e20d16b2b44","modified":1518178989985},{"_id":"themes/icarus/languages/tr.yml","hash":"50d94b21e1838db1214f6874f4f81b47c8c521db","modified":1518178989985},{"_id":"themes/icarus/languages/ru.yml","hash":"7423608a9608766ab5998d6b8d3e8d76b792e30e","modified":1518178989985},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"fdce6e6716768cfac9355c4e88a05260efeeae1c","modified":1518178989985},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"646a7ef3e85481b013ffb2f4d9f9a8900f092d73","modified":1518178989985},{"_id":"themes/icarus/scripts/thumbnail.js","hash":"4a7385e533f3567758bc995a8be5eb3e7839ac9c","modified":1518178989995},{"_id":"themes/icarus/scripts/meta.js","hash":"2e5ac0cb9c90c072ca4b33e88f1892e954935ab7","modified":1518178989995},{"_id":"source/img/201705/2017-05-29_164226.png","hash":"5c0e9fbe06aa762ed27c17cd87fc8b63701b48ae","modified":1518176589636},{"_id":"source/img/201705/2017-05-29_164227.png","hash":"85e5d3f10a3e17972091c31cbb380c33da7f1120","modified":1518176589636},{"_id":"source/img/201705/2017-05-29_184313.png","hash":"18beffca7ecccf4a07aefdb7e88eee566e0a9880","modified":1518176589646},{"_id":"source/img/201705/2017-05-30_001220.png","hash":"e49b2d9ead5f764cbd9365c18409d36746b9dca9","modified":1518176589646},{"_id":"source/img/201705/dll-pic.png","hash":"188b08612407e5b6ba61abc10b8cbd73d6fd3861","modified":1518176589646},{"_id":"source/img/201705/2017-05-29_190301.png","hash":"e3a82f3eb02a45331149a60f2138aa31dafa9e6d","modified":1518176589646},{"_id":"source/img/201708/2017-08-24 5.29.50.png","hash":"2f619bd870d25948eabdbbcef8ba612c1f548f1b","modified":1518176589656},{"_id":"source/img/201708/2017-08-25 2.19.10.png","hash":"411db3b323203c0ee55146016a5909a8369e92d2","modified":1518176589656},{"_id":"source/img/201708/2017-08-29 3.50.08.png","hash":"e950923794e86be972a3c7dafa4b158ec2c52691","modified":1518176589656},{"_id":"source/img/201708/2017-08-25 11.28.13.png","hash":"2f694128e4c880093bff8e2d36be0128378caba9","modified":1518176589656},{"_id":"source/img/201708/2017-08-29 5.38.28.png","hash":"5cf6191104056da08e0c4d7d255843e6e2f3352b","modified":1518176589656},{"_id":"themes/icarus/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1518178779597},{"_id":"themes/icarus/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1518178779597},{"_id":"themes/icarus/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1518178779597},{"_id":"themes/icarus/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1518178779597},{"_id":"themes/icarus/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1518178779597},{"_id":"themes/icarus/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1518178779597},{"_id":"themes/icarus/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1518178779597},{"_id":"themes/icarus/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1518178779597},{"_id":"themes/icarus/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1518178779597},{"_id":"themes/icarus/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1518178779597},{"_id":"themes/icarus/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1518178779597},{"_id":"themes/icarus/.git/logs/HEAD","hash":"774d977ec63c84157a6653d32d514ca14612a215","modified":1518178989965},{"_id":"themes/icarus/_source/about/index.md","hash":"3c9b7a6853bfcdd019317c95f2aa33829b269cbc","modified":1518178989975},{"_id":"themes/icarus/_source/categories/index.md","hash":"62fe9cd3a09f7971c8bfb84f18ed7863f84cb30a","modified":1518178989975},{"_id":"themes/icarus/_source/tags/index.md","hash":"f913370f50299b9b8b4cfd73fbdd5c07f4950549","modified":1518178989975},{"_id":"themes/icarus/layout/common/article.ejs","hash":"ebc18807a58c974ad824ff7800b4e801bdf94a39","modified":1518178989985},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"d1812a87a26a48723c30d32bf4a1f57f3b01908e","modified":1518178989985},{"_id":"themes/icarus/layout/common/head.ejs","hash":"6b6063ff2f8f65cb4ce3fc6d197a81d30f813017","modified":1518178989985},{"_id":"themes/icarus/layout/common/header.ejs","hash":"c75d5c3e956f70b0b82552f1e3f5749f0229ddd7","modified":1518178989985},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"6c39352254c93f1fbedb4e81d2fdc94f34f54c2e","modified":1518178989985},{"_id":"themes/icarus/layout/common/profile.ejs","hash":"d4dfa98d6481f9cd8f78b7a749276a76241b35d1","modified":1518178989985},{"_id":"themes/icarus/layout/common/sidebar.ejs","hash":"ba03c02607a3330b03727a12ecbbafe9cc3ee450","modified":1518178989985},{"_id":"themes/icarus/layout/common/timeline.ejs","hash":"a2ba07bd70a82a80df71133dc0cea1248a1e3b3e","modified":1518178989985},{"_id":"themes/icarus/layout/common/thumbnail.ejs","hash":"b80d8733a620be64a6f7d73f0b012a986755fd91","modified":1518178989985},{"_id":"themes/icarus/layout/comment/changyan.ejs","hash":"67b9c24a2973bb208e183ce46201d3c209a1bd4a","modified":1518178989985},{"_id":"themes/icarus/layout/comment/counter.ejs","hash":"f744b41f3cc258e2a5a6df6abf6cf9ba9f05c19c","modified":1518178989985},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"b83fd91a30ca2bd62e2d43ae48e0523e0e1994c0","modified":1518178989985},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"6a53104fc01fd4a7a34b46c2828e76d02cacb0dd","modified":1518178989985},{"_id":"themes/icarus/layout/comment/duoshuo.ejs","hash":"adc024b7205e934e64c98a5b912c41117a4425bd","modified":1518178989985},{"_id":"themes/icarus/layout/comment/gitment.ejs","hash":"c7998209b9a766eeba6976dd4bdffb1f87469358","modified":1518178989985},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"b3dd067a6099f0e088f3374d37b8a726bafe15e5","modified":1518178989985},{"_id":"themes/icarus/layout/comment/index.ejs","hash":"61f0398161f27ea5d134212a2ed601acdba0402f","modified":1518178989985},{"_id":"themes/icarus/layout/comment/livere.ejs","hash":"d2d0d8113a5a7d2cddf1d8ce067e07d40874e56c","modified":1518178989985},{"_id":"themes/icarus/layout/comment/scripts.ejs","hash":"869b13c45f043451c73c46b347967667e18f6d0b","modified":1518178989985},{"_id":"themes/icarus/layout/comment/valine.ejs","hash":"0ea90a606f0d386a5ae0da83c0501cbb25319fde","modified":1518178989985},{"_id":"themes/icarus/layout/comment/youyan.ejs","hash":"b4c49b97b757d01ba0c4e16f9862a2ec05f37b1f","modified":1518178989985},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"3218b9f6345aaa537f742ab4781bd27a3f40c378","modified":1518178989985},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"760a8f9ee9b81f6eb27a5f2c8c5159b220a88a74","modified":1518178989985},{"_id":"themes/icarus/layout/plugin/scripts.ejs","hash":"2a41940ab86d3f7b095436b56ea304689c2b5121","modified":1518178989985},{"_id":"themes/icarus/layout/search/index-mobile.ejs","hash":"8e2e28b37a908f60e4953bf9175a7af329d15d40","modified":1518178989995},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"8cc6f6e601b14d310f20eaf29dc55d6c60ab4ee4","modified":1518178989985},{"_id":"themes/icarus/layout/search/index.ejs","hash":"fb1ac5d6b44dbc96cbef7ecdbb6397c3d4fe3e0f","modified":1518178989995},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"21ec59e4534ac2417d6b215b6cfe3825245ad340","modified":1518178989995},{"_id":"themes/icarus/layout/search/swiftype.ejs","hash":"cce9c44180d9490f45b30b8f052ac82675a9d66a","modified":1518178989995},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"b79f714da69c121729a136df0c94c09a85966d44","modified":1518178989995},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"d2a0826700c51d9edaf21fa6cbb047b5127cec8a","modified":1518178989995},{"_id":"themes/icarus/layout/share/default.ejs","hash":"8532f15f400dbc7c1e89ab26972fc4e404001849","modified":1518178989995},{"_id":"themes/icarus/layout/share/jiathis.ejs","hash":"442abbc0fe5cab4171179257d172150f2a789638","modified":1518178989995},{"_id":"themes/icarus/layout/share/index.ejs","hash":"52c094140d19e7e2fce57fe43968b2bd86aa4ef0","modified":1518178989995},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"d6412cd574744f994f16e3a70ce29a71b449133a","modified":1518178989995},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"81c6c0a3450e1ab56a725bb953a5021a07c0e212","modified":1518178989995},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"23d637daed63e86ec7c4a12f5a48908905ed7819","modified":1518178989995},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"cf8a87b0573c9ff11d82ca5edb86267f77e11589","modified":1518178989995},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"7767972b9d0cba456f0e0cff1b96b516936414ea","modified":1518178989995},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"a4b28996e0e7df2e582387455c02f5c33f691bbd","modified":1518178989995},{"_id":"themes/icarus/source/css/_extend.styl","hash":"c18c58c67f49b8afe92fa8852ff7e203ce5958de","modified":1518178989995},{"_id":"themes/icarus/source/css/_variables.styl","hash":"28d73a420f32c73595fcc559528544cf998590c7","modified":1518178990015},{"_id":"themes/icarus/source/css/style.styl","hash":"5c22522034beed5018efd77e34c01584a815b23d","modified":1518178990015},{"_id":"themes/icarus/source/img/avatar.png","hash":"ad2ea701cac63c8473086fb81844e654338f9e5b","modified":1518182906115},{"_id":"themes/icarus/source/img/fav_hd.png","hash":"ad2ea701cac63c8473086fb81844e654338f9e5b","modified":1518182915752},{"_id":"themes/icarus/source/js/insight.js","hash":"691bc7ce086b55b360bb6ec517b2ad6e53ebadc7","modified":1518178990015},{"_id":"themes/icarus/source/js/main.js","hash":"39739be85d5800a16c288a476d70c7fea05c9a27","modified":1518178990015},{"_id":"source/img/201708/2017-08-24 .png","hash":"11d302eda64fc1a91d4297a929f14bd3516a4061","modified":1518176589646},{"_id":"source/img/201708/2017-08-24 3.48.18.png","hash":"5f0b2b91fffdf09cf1aeccd498d3ded30d09f438","modified":1518176589646},{"_id":"themes/icarus/.git/objects/pack/pack-d611b37c0bcd4551d83280da27dfe6b037cb9080.idx","hash":"d5f1880cc5e2a0af3346488f0fde44cbd75a0fa4","modified":1518178989715},{"_id":"themes/icarus/.git/refs/heads/master","hash":"93cadec7110d74453ec94cf59c8dc39d1e7e6459","modified":1518178989965},{"_id":"themes/icarus/layout/common/post/banner.ejs","hash":"431b445dfa5dec4b710069c7f1b5fae3f0a907a5","modified":1518178989985},{"_id":"themes/icarus/layout/common/post/category.ejs","hash":"96f999573eb908f7129a1c09e486d46d630c0a7d","modified":1518178989985},{"_id":"themes/icarus/layout/common/post/date.ejs","hash":"fc90dbfc227563029ece7cff13585083b62935bc","modified":1518178989985},{"_id":"themes/icarus/layout/common/post/nav.ejs","hash":"79d15e00ead668bf44a48f4e870ac0cde9dbdee3","modified":1518178989985},{"_id":"themes/icarus/layout/common/post/gallery.ejs","hash":"1ccdc66206e84668fa1f0d2440a8ed983aa321fd","modified":1518178989985},{"_id":"themes/icarus/layout/common/post/tag.ejs","hash":"7df16851b35da0ea09f7323bdbfb977198823f4c","modified":1518178989985},{"_id":"themes/icarus/layout/common/post/title.ejs","hash":"3620e4dad9c7f9c31efd4ad6cf5872cfb9d418c2","modified":1518178989985},{"_id":"themes/icarus/source/css/_highlight/agate.styl","hash":"c01db6c4e7648b217048a8deefeee189688a9290","modified":1518178989995},{"_id":"themes/icarus/source/css/_highlight/androidstudio.styl","hash":"b0923fe15d0b5eb24d3c6236cb2fc30ee14a4c56","modified":1518178989995},{"_id":"themes/icarus/source/css/_highlight/arduino-light.styl","hash":"591962bfc758a521b4cb907750c19a1a2423b4d5","modified":1518178989995},{"_id":"themes/icarus/source/css/_highlight/ascetic.styl","hash":"ca087a3c70998c7ac6b0b42d5cf7a653b8707591","modified":1518178989995},{"_id":"themes/icarus/source/css/_highlight/arta.styl","hash":"3bc322455f657aa29f455f91009034af08cdc65c","modified":1518178989995},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-dark.styl","hash":"a6b1960d8a3b39d035e06ce92af4f00a259b5c56","modified":1518178989995},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-light.styl","hash":"f47de0b9d66617728f68096ed48371dd6bb9e67a","modified":1518178989995},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-dark.styl","hash":"68021a92fd7d6895426d0cc7f0929aa95633d742","modified":1518178989995},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-light.styl","hash":"657fe215931fd06e21b56374df699a94890f7ab4","modified":1518178989995},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-dark.styl","hash":"6c051f034c229c49ffc9a2ec96c032441b0c6586","modified":1518178989995},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-light.styl","hash":"2b416a0567a53aa0fa8898b196ddd44315c1a5f3","modified":1518178989995},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-dark.styl","hash":"15559324ee3a5f9bf6724ec9606f6f2e16cdc24d","modified":1518178989995},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-light.styl","hash":"8d7c7242974aa2454fa792c5d7a47c5f9632355a","modified":1518178989995},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-dark.styl","hash":"bf62cafe316eb874f1f43679957dc3add4fbea34","modified":1518178989995},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-light.styl","hash":"c1db353e8613607580d40b12ddc162d029560576","modified":1518178989995},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"64ab6ab93a092a890d3d0fdeb23e4b6a2d0f2887","modified":1518178989995},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-light.styl","hash":"8659eaae6a0c2e00b4b9199803e50adf4ff0128d","modified":1518178989995},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-dark.styl","hash":"8a6c187afcd60152306c003e1a5903e57d9428dd","modified":1518178989995},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-light.styl","hash":"96181544eeadc5b0749229f11607e7c01f81e078","modified":1518178989995},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-dark.styl","hash":"5261a100e84cf34f4752c24dfaddfa05c7be96f7","modified":1518178989995},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-light.styl","hash":"8a5207a0c30262a0bf5e1a41411a306f7a89a7e7","modified":1518178989995},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-dark.styl","hash":"434b7f0bdd5f91bf79d5b4ca46820db4a8e10166","modified":1518178989995},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-light.styl","hash":"08e2df313c272d5c70c93e713639663c168180d0","modified":1518178989995},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"fa0cccd0f0dc015218cf8c1bba0b53c8c9383135","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/brown-paper.styl","hash":"d14846542a26b75fd26df5b5df6c5493733f73f6","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"add3d88c9d12567dcfae7a8e49984d119fc72227","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/color-brewer.styl","hash":"9c4905eab730d0b389e6972e907057577f7e25f1","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/codepen-embed.styl","hash":"7432ce9edb047b6382d28c82054a7e2a77e476c3","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/dark.styl","hash":"df4c1dc05567ad0812d0cd3133cb2a2a5fd23c04","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/darkula.styl","hash":"3c943561a885092286ec8db14e9177036bf8d21f","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/docco.styl","hash":"7bd3389ce16d20488ab336d557056cc703c921c7","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/far.styl","hash":"5989aea14ccd0153d17ee19b3e125dae06c75f3c","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/foundation.styl","hash":"28c59a31467c33bd51cbf3b6085782c2a724ff6c","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/github-gist.styl","hash":"71f4b0fca91a587e6eba15a5306dca963bb8f441","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/github.styl","hash":"a84eb710b302006120c3e7f8ca18f9e6fbc231c3","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/googlecode.styl","hash":"7f5082ae008925a23eb713f160773fe647eb3ff7","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/grayscale.styl","hash":"c83804abe39faebd80f8f4ff64fbd7137674cb1c","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/highlightjs.styl","hash":"fd796a58c5d4590cda67c998187933788d45f30a","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/hopscotch.styl","hash":"7ec8d75a9c9d58f65868ea64289873302d3fad5e","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/hybrid.styl","hash":"d3ee1bcefc94f5f87a2b76a689f4c31594501d07","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/idea.styl","hash":"e284c1760e8da0848f56cd5601d867ceeb0192d7","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/index.styl","hash":"36c44375229613a5bb9ee84a8e90214978070439","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/ir-black.styl","hash":"c59db73998af32ce8419a5d2d335bcc9cfbaae45","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/kimbie.dark.styl","hash":"3b998c640eeb2c6192fee24bc78b4137de475dd7","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/kimbie.light.styl","hash":"e901738455ec9a1bddde7b62bbd8595de6033e1e","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/magula.styl","hash":"ab179306c12a1cf2949482beaca328e379ef034a","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/mono-blue.styl","hash":"14fb8678739b77f35771b6d63101ddbf1e7a9fbc","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/monokai-sublime.styl","hash":"32955f699687b5fc2e4072804cb90925912d3c7c","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/monokai.styl","hash":"8489fc71bedefa8f271808126296fce6381f9e04","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/obsidian.styl","hash":"8145db8ec349548f09d91d7a05c00c83ff84d146","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/paraiso-dark.styl","hash":"50f1cee8a5b3b165b4184ead0a99dc564b62ef4f","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/paraiso-light.styl","hash":"e428e8202b01e83b0f018a96058d806e7f4c76bf","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/pojoaque.styl","hash":"d9f4b35c9f6115029600a8a023b559013e2b4e75","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/railscasts.styl","hash":"1ff800d9b6de464fafe591682cc48bf983202758","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/rainbow.styl","hash":"516c7080d64b12730357358dee2adc42c43c4516","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/school-book.styl","hash":"186c37e9c39e65aa291cce3317e35904693598d1","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/solarized-dark.styl","hash":"577458d1f6c02bc42e312066bf7dd7e427cab057","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/solarized-light.styl","hash":"bb04944fc06c12ecd7b56ad933dbedde60c2259a","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/sunburst.styl","hash":"482bbb2bc461b22e9d6ce55f0f84767e1cfae99a","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-blue.styl","hash":"eeafa86697c857c4e9a84ad48c0d56a7154997a3","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-bright.styl","hash":"f3cd5ed391d40265e36fcd9f7daced52773fb886","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"1cd947f3d414fa5c1435caea509f27c99f6dc5b3","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/tomorrow.styl","hash":"502335f0fac07ed74ca78207bcf3ef8dd2252cf6","modified":1518178990015},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night.styl","hash":"b2a175caa23631f764b2f6fe2bac9739f5f5e078","modified":1518178990005},{"_id":"themes/icarus/source/css/_highlight/vs.styl","hash":"14fbb0c43af440a290280b26968c8a5c0786b27f","modified":1518178990015},{"_id":"themes/icarus/source/css/_highlight/xcode.styl","hash":"5fa8999c7f807c1aae29c7a1cdf681678576fb69","modified":1518178990015},{"_id":"themes/icarus/source/css/_highlight/zenburn.styl","hash":"6908313d2666d31fc9d8658fd7e8dda3de2bb596","modified":1518178990015},{"_id":"themes/icarus/source/css/_partial/archive.styl","hash":"4dd216a147dd65ddc37521fe8a1a01aa929aeea5","modified":1518178990015},{"_id":"themes/icarus/source/css/_partial/article.styl","hash":"c05ead4c95e2dd0b69f9041f3032301d2e000eb3","modified":1518178990015},{"_id":"themes/icarus/source/css/_partial/comment.styl","hash":"7fc8a32cf235d0a977d9ff0c49263c0541025222","modified":1518178990015},{"_id":"themes/icarus/source/css/_partial/footer.styl","hash":"06c2c9029ebfb16880a203c218657048a83a3e4b","modified":1518178990015},{"_id":"themes/icarus/source/css/_partial/header.styl","hash":"218713de00dc6c503e7036fce2aab81dd94b4c0c","modified":1518178990015},{"_id":"themes/icarus/source/css/_partial/insight.styl","hash":"8a84868a13c7edb733347655b33dc169c682e8b8","modified":1518178990015},{"_id":"themes/icarus/source/css/_partial/profile.styl","hash":"dfa3eab5933c6af4dfb7268c511157cbb926dcfa","modified":1518178990015},{"_id":"themes/icarus/source/css/_partial/sidebar.styl","hash":"fb211c3c747565e6fa2304f436b42d14ef84d71a","modified":1518178990015},{"_id":"themes/icarus/source/css/_partial/timeline.styl","hash":"ba1ea8a87ca7c667f0d3cc40033b52bdf168fbdd","modified":1518178990015},{"_id":"themes/icarus/source/css/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1518178990015},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1518178990015},{"_id":"themes/icarus/source/css/images/logo.png","hash":"e606a0584f98268b2fe92303f3254520862ef659","modified":1518178990015},{"_id":"themes/icarus/source/css/_util/grid.styl","hash":"866fc18d6368c4131b03601a15af7703a9a42b61","modified":1518178990015},{"_id":"themes/icarus/source/css/_util/mixin.styl","hash":"3f8730ec2b1b582ba93b14f0e50a41fbbce52755","modified":1518178990015},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","hash":"45fa2fad51cecfc41107dbd4637450b746a7cbc3","modified":1518178990025},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"1c7fd3bd976f671ba396ad4dbbb7157006243bf5","modified":1518178990025},{"_id":"themes/icarus/source/libs/open-sans/styles.css","hash":"08c8c7eeaf34cb2f8c3312a3ce2e96b58ce2b4c0","modified":1518178990045},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","hash":"6335d719343cca455152ad71a1aaed9868339236","modified":1518178990045},{"_id":"themes/icarus/.git/logs/refs/heads/master","hash":"774d977ec63c84157a6653d32d514ca14612a215","modified":1518178989965},{"_id":"themes/icarus/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1518178989965},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.css","hash":"bf188c224998b995d0119cfd18fade22e53f573c","modified":1518178990015},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.min.css","hash":"bd7c2763e15e568bdccc85e38432d79f65f8d9a1","modified":1518178990015},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1518178990035},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1518178990035},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1518178990035},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1518178990035},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1518178990035},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1518178990035},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1518178990035},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1518178990035},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1518178990035},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1518178990035},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1518178990035},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1518178990035},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1518178990035},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1518178990035},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1518178990035},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1518178990035},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1518178990035},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1518178990045},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1518178990045},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1518178990045},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1518178990045},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"10c9630e41bb8d6bb7f75a3bfe8cdb33451ed7ba","modified":1518178990025},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"5281d2cfb0ef278940c4860ea9aa7ef86d3dbc8d","modified":1518178990025},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1518178990025},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","hash":"6ee19f99bca3ecf2fa0d6f07fb5c200db07ddd11","modified":1518178990025},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","hash":"2866c3f1eda31ed34485ff3511bcfb706d78ac56","modified":1518178990025},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1518178990025},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","hash":"91788030e3c7107b6b4bf50a82d4309368850488","modified":1518178990025},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","hash":"d26b528a13ee1ef245bdb0aa3db149be3fe9cba6","modified":1518178990025},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1518178990025},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1518178990025},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1518178990025},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1518178990025},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1518178990035},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1518178990025},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1518178990025},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1518178990025},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1518178990025},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","hash":"ba52bd55c0ab647e277c42b0e48a0ac25cbd3099","modified":1518178990035},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"44203a1490749aff6aba9784868b6c888d3fb86e","modified":1518178990035},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","hash":"6369e9704550f4207fa798dc6018da1d259fd318","modified":1518178990035},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"a5c468d260e3a8e68c9026aa2b5f31ce1860b8bf","modified":1518178990035},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","hash":"8a026dc31f912cbd3b8a110bb87984b372661f65","modified":1518178990035},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","hash":"fbdbcb46ae9fd668ba5e4dce5635c040359e3359","modified":1518178990035},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","hash":"562f883ba3a5e8ea570fd5d0c40afe527938c026","modified":1518178990035},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","hash":"ec662f97ed5a15c2bd8cf87d5c93cd9a6b4df07a","modified":1518178990035},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","hash":"b000585441e9bff2f5b7c538d623b698d48049a6","modified":1518178990035},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","hash":"afe725882964c87a148ac6ab54955cb0da0974c4","modified":1518178990035},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","hash":"99fe3cc63161f0d678360a939fbd54c5d1c11eeb","modified":1518178990035},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"e570807e2786a0acb393c1195c820a660312fffe","modified":1518178990035},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","hash":"11c8509a3e398cb8c2a32ff559ccdda6d9d71740","modified":1518178990035},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","hash":"050e7684bfbb133bed5375938fe0021f1fa88f7f","modified":1518178990035},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","hash":"69a127964e508699f5f13467dd1b58fbf04bcca9","modified":1518178990035},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","hash":"8daabc26ceadc43741904b99db7e01bfababbd04","modified":1518178990035},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","hash":"6d424527be45ff4deedd198e195fdeb74f1c6567","modified":1518178990035},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","hash":"dc9c6447d3574fcba3868c35bb48e0bed9be6b7e","modified":1518178990035},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1518178990045},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1518178990045},{"_id":"themes/icarus/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1518178990015},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1518178990015},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1518178990025},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1518178990025},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1518178990025},{"_id":"themes/icarus/.git/logs/refs/remotes/origin/HEAD","hash":"774d977ec63c84157a6653d32d514ca14612a215","modified":1518178989965},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1518178990025},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1518178990025},{"_id":"themes/icarus/.git/objects/pack/pack-d611b37c0bcd4551d83280da27dfe6b037cb9080.pack","hash":"e23244db5daa5b1caddcae6cfe0140b878c30145","modified":1518178989835},{"_id":"public/baidusitemap.xml","hash":"4d63fb8d0fa77fc077f281a685d1caee1190542b","modified":1518271535179},{"_id":"public/atom.xml","hash":"276dc95a1d0668bddde63087e94fad1b48b4951f","modified":1518271535179},{"_id":"public/content.json","hash":"4e36be8fb8141125d3674c19528066f612903d57","modified":1518271535277},{"_id":"public/sitemap.xml","hash":"c17f691b50f222efe69502fa76a7806cf913ecad","modified":1518271535279},{"_id":"public/tags/index.html","hash":"bf1c7390e11f7e608bfe0f69af64c0e475a73c7d","modified":1518271535284},{"_id":"public/2018/Unity3D特定文件的打开方式.html","hash":"220221bca2820d5c294fdb1282c66bc1929d0587","modified":1518271535284},{"_id":"public/2017/游戏编程模式-阅读笔记.html","hash":"09507374903c3040f84539855e9fdd3e90bf8cda","modified":1518271535284},{"_id":"public/2017/mf3gpacg-2.html","hash":"adddf23f3ff4f0a9f486dd69ee07e6c88c4a5d35","modified":1518271535284},{"_id":"public/2017/mf3gpacg_1.html","hash":"0c5a01653ccbc18594e6c0b6a53598a4da52b915","modified":1518271535284},{"_id":"public/2017/Git学习.html","hash":"7863f239641a6b32363afa3694b3ea5fb6bd6086","modified":1518271535284},{"_id":"public/2017/OpenGL-Learn-1.html","hash":"a220e0ebe21cee66f40c38a0f24fdb38fdcdd307","modified":1518271535284},{"_id":"public/archives/index.html","hash":"766c9857ff1674d9bc7340f70401f60ef66d93d5","modified":1518271535284},{"_id":"public/archives/2017/index.html","hash":"ea7e694a37c7e4f559b3695486aa712f00bbbfb3","modified":1518271535284},{"_id":"public/archives/2017/05/index.html","hash":"9814af27322414b2ea95136d94ad074f23a97a84","modified":1518271535284},{"_id":"public/archives/2017/07/index.html","hash":"be8990d6375c1315e8524652454d070a762e5b1d","modified":1518271535284},{"_id":"public/archives/2017/08/index.html","hash":"bedd8016d8be6d179868035a06026ce56561b66b","modified":1518271535284},{"_id":"public/archives/2018/index.html","hash":"b052b7c03f6724acc369a9e01eca51a2e5c20e81","modified":1518271535284},{"_id":"public/archives/2018/02/index.html","hash":"bd87bc97796f85fac79d10af983a10102d2bf410","modified":1518271535285},{"_id":"public/index.html","hash":"4ecf9a918c36998c0ee6e86db49e1acca6575b92","modified":1518271535285},{"_id":"public/tags/工具-版本管理/index.html","hash":"46f3482066d8d6e008600d9a69da75b9b80abdf3","modified":1518271535285},{"_id":"public/tags/OpenGL-图形学/index.html","hash":"6002e34b0f5791504ceb8a876a6c1251e9ec9496","modified":1518271535285},{"_id":"public/tags/Unity3D/index.html","hash":"79d1a9744d67b16a156594b06e0a7eef8063c1c2","modified":1518271535285},{"_id":"public/CNAME","hash":"86b803144a4ae1fb086b2e749a598675e11fc26b","modified":1518271535293},{"_id":"public/robots.txt","hash":"5d6f306e189f25494d8437fa7a375b3d805e83ec","modified":1518271535293},{"_id":"public/img/201705/2017-05-29_164226.png","hash":"5c0e9fbe06aa762ed27c17cd87fc8b63701b48ae","modified":1518271535293},{"_id":"public/img/201705/2017-05-29_164227.png","hash":"85e5d3f10a3e17972091c31cbb380c33da7f1120","modified":1518271535293},{"_id":"public/img/201705/2017-05-29_184313.png","hash":"18beffca7ecccf4a07aefdb7e88eee566e0a9880","modified":1518271535293},{"_id":"public/img/201705/2017-05-30_001220.png","hash":"e49b2d9ead5f764cbd9365c18409d36746b9dca9","modified":1518271535294},{"_id":"public/img/201705/dll-pic.png","hash":"188b08612407e5b6ba61abc10b8cbd73d6fd3861","modified":1518271535294},{"_id":"public/img/201708/2017-08-24 5.29.50.png","hash":"2f619bd870d25948eabdbbcef8ba612c1f548f1b","modified":1518271535294},{"_id":"public/img/201705/2017-05-29_190301.png","hash":"e3a82f3eb02a45331149a60f2138aa31dafa9e6d","modified":1518271535294},{"_id":"public/img/201708/2017-08-25 2.19.10.png","hash":"411db3b323203c0ee55146016a5909a8369e92d2","modified":1518271535294},{"_id":"public/img/201708/2017-08-29 3.50.08.png","hash":"e950923794e86be972a3c7dafa4b158ec2c52691","modified":1518271535294},{"_id":"public/img/201708/2017-08-25 11.28.13.png","hash":"2f694128e4c880093bff8e2d36be0128378caba9","modified":1518271535294},{"_id":"public/img/201708/2017-08-29 5.38.28.png","hash":"5cf6191104056da08e0c4d7d255843e6e2f3352b","modified":1518271535294},{"_id":"public/img/avatar.png","hash":"ad2ea701cac63c8473086fb81844e654338f9e5b","modified":1518271535294},{"_id":"public/img/fav_hd.png","hash":"ad2ea701cac63c8473086fb81844e654338f9e5b","modified":1518271535294},{"_id":"public/css/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1518271535294},{"_id":"public/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1518271535294},{"_id":"public/css/images/logo.png","hash":"e606a0584f98268b2fe92303f3254520862ef659","modified":1518271535294},{"_id":"public/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1518271535294},{"_id":"public/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1518271535294},{"_id":"public/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1518271535294},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1518271535294},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1518271535294},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1518271535294},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1518271535294},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1518271535294},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1518271535294},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1518271535294},{"_id":"public/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1518271535294},{"_id":"public/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1518271535294},{"_id":"public/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1518271535295},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1518271535295},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1518271535295},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1518271535295},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1518271535295},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1518271535295},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1518271535295},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1518271535295},{"_id":"public/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1518271535295},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"5281d2cfb0ef278940c4860ea9aa7ef86d3dbc8d","modified":1518271535295},{"_id":"public/libs/lightgallery/css/lg-transitions.css.map","hash":"6ee19f99bca3ecf2fa0d6f07fb5c200db07ddd11","modified":1518271535295},{"_id":"public/libs/lightgallery/css/lightgallery.css.map","hash":"91788030e3c7107b6b4bf50a82d4309368850488","modified":1518271535295},{"_id":"public/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1518271535295},{"_id":"public/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1518271535295},{"_id":"public/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1518271535295},{"_id":"public/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1518271535295},{"_id":"public/libs/lightgallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1518271535295},{"_id":"public/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1518271535295},{"_id":"public/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1518271535295},{"_id":"public/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1518271535295},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1518271535295},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1518271535295},{"_id":"public/img/201708/2017-08-24 .png","hash":"11d302eda64fc1a91d4297a929f14bd3516a4061","modified":1518271535619},{"_id":"public/img/201708/2017-08-24 3.48.18.png","hash":"5f0b2b91fffdf09cf1aeccd498d3ded30d09f438","modified":1518271535620},{"_id":"public/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1518271535622},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1518271535622},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1518271535622},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1518271535622},{"_id":"public/js/insight.js","hash":"c1bafa7f87e9f25fca1e033fc6d1e0c82712ac99","modified":1518271535625},{"_id":"public/js/main.js","hash":"23b373067df0dbac27622bc7537bb4fda243a9c8","modified":1518271535625},{"_id":"public/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1518271535625},{"_id":"public/libs/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1518271535625},{"_id":"public/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1518271535625},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1518271535625},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1518271535625},{"_id":"public/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1518271535625},{"_id":"public/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1518271535625},{"_id":"public/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1518271535625},{"_id":"public/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1518271535625},{"_id":"public/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1518271535625},{"_id":"public/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1518271535626},{"_id":"public/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1518271535626},{"_id":"public/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1518271535626},{"_id":"public/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1518271535626},{"_id":"public/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1518271535626},{"_id":"public/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1518271535626},{"_id":"public/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1518271535626},{"_id":"public/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1518271535626},{"_id":"public/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1518271535626},{"_id":"public/css/style.css","hash":"a9979d929610e4f74cd30e992014cb099ac1e42f","modified":1518271535626},{"_id":"public/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1518271535626},{"_id":"public/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1518271535626},{"_id":"public/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1518271535626},{"_id":"public/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1518271535626},{"_id":"public/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1518271535626},{"_id":"public/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1518271535626},{"_id":"public/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1518271535626},{"_id":"public/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1518271535626},{"_id":"public/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1518271535626},{"_id":"public/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1518271535626},{"_id":"public/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1518271535626},{"_id":"public/libs/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1518271535626},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1518271535626},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1518271535656}],"Category":[],"Data":[],"Page":[{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"title: \"Tags\"\nlayout: \"tags\"\n---\n","date":"2018-02-10T05:45:09.119Z","updated":"2018-02-10T05:45:09.119Z","path":"tags/index.html","comments":1,"_id":"cjdhfo5yc0001a4dkr6ztjdwv","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"将阿拉伯数字转换成大写形式(非汉字形式)","date":"2017-04-22T10:03:00.000Z","_content":"### 分析\n#### 一.不包含数字0的情况\n\n1. 如有数字`12345678` 读作: 一千二百三十四万五千六百七十八\n2. 可以发现规律如下:\n\n\n>  `一`千`二`百`三`十`四`万`五`千`六`百`七`十`八`, 首先, 每一位的数字都会发音, 这个发音列表下\n\n |1|2|3|4|5|6|7|8|9|0|\n |:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|\n |一|二|三|四|五|六|七|八|九|零|\n \n> 其次就是`千,百,十,万,千,百,十`,同样,列表如下\n \n |数字|1|2|3|4|5|6|7|8|\n |-|-|-|-|-|-|-|-|-|\n |索引|0|1|2|3|4|5|6|7|\n |对应单位:|千|百|十|万|千|百|十|个|\n |自身发音:|一|二|三|四|五|六|七|八|\n \n> 转换方法: 直接发音和单位相间连接,最后一位不处理,即不添加`个`字 \n\n#### 二.包含数字零的情况\n1. 数字0在中间且不连续\n2. 数字0在中间连续\n3. 数字0在末尾(一个或多个)\n4. 中间末尾都有,中间连续\n5. 中间末尾都有,中间不连续\n","source":"_drafts/numberConvert.md","raw":"title: 将阿拉伯数字转换成大写形式(非汉字形式)\ntags:\n  - 杂项\ncategories: []\ndate: 2017-04-22 18:03:00\n---\n### 分析\n#### 一.不包含数字0的情况\n\n1. 如有数字`12345678` 读作: 一千二百三十四万五千六百七十八\n2. 可以发现规律如下:\n\n\n>  `一`千`二`百`三`十`四`万`五`千`六`百`七`十`八`, 首先, 每一位的数字都会发音, 这个发音列表下\n\n |1|2|3|4|5|6|7|8|9|0|\n |:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|\n |一|二|三|四|五|六|七|八|九|零|\n \n> 其次就是`千,百,十,万,千,百,十`,同样,列表如下\n \n |数字|1|2|3|4|5|6|7|8|\n |-|-|-|-|-|-|-|-|-|\n |索引|0|1|2|3|4|5|6|7|\n |对应单位:|千|百|十|万|千|百|十|个|\n |自身发音:|一|二|三|四|五|六|七|八|\n \n> 转换方法: 直接发音和单位相间连接,最后一位不处理,即不添加`个`字 \n\n#### 二.包含数字零的情况\n1. 数字0在中间且不连续\n2. 数字0在中间连续\n3. 数字0在末尾(一个或多个)\n4. 中间末尾都有,中间连续\n5. 中间末尾都有,中间不连续\n","slug":"numberConvert","published":0,"updated":"2018-02-09T11:43:09.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdhfo5y80000a4dkdvqf7rl8","content":"<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><h4 id=\"一-不包含数字0的情况\"><a href=\"#一-不包含数字0的情况\" class=\"headerlink\" title=\"一.不包含数字0的情况\"></a>一.不包含数字0的情况</h4><ol>\n<li>如有数字<code>12345678</code> 读作: 一千二百三十四万五千六百七十八</li>\n<li>可以发现规律如下:</li>\n</ol>\n<blockquote>\n<p> <code>一</code>千<code>二</code>百<code>三</code>十<code>四</code>万<code>五</code>千<code>六</code>百<code>七</code>十<code>八</code>, 首先, 每一位的数字都会发音, 这个发音列表下</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">1</th>\n<th style=\"text-align:center\">2</th>\n<th style=\"text-align:center\">3</th>\n<th style=\"text-align:center\">4</th>\n<th style=\"text-align:center\">5</th>\n<th style=\"text-align:center\">6</th>\n<th style=\"text-align:center\">7</th>\n<th style=\"text-align:center\">8</th>\n<th style=\"text-align:center\">9</th>\n<th style=\"text-align:center\">0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">一</td>\n<td style=\"text-align:center\">二</td>\n<td style=\"text-align:center\">三</td>\n<td style=\"text-align:center\">四</td>\n<td style=\"text-align:center\">五</td>\n<td style=\"text-align:center\">六</td>\n<td style=\"text-align:center\">七</td>\n<td style=\"text-align:center\">八</td>\n<td style=\"text-align:center\">九</td>\n<td style=\"text-align:center\">零</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>其次就是<code>千,百,十,万,千,百,十</code>,同样,列表如下</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>数字</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>索引</td>\n<td>0</td>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>4</td>\n<td>5</td>\n<td>6</td>\n<td>7</td>\n</tr>\n<tr>\n<td>对应单位:</td>\n<td>千</td>\n<td>百</td>\n<td>十</td>\n<td>万</td>\n<td>千</td>\n<td>百</td>\n<td>十</td>\n<td>个</td>\n</tr>\n<tr>\n<td>自身发音:</td>\n<td>一</td>\n<td>二</td>\n<td>三</td>\n<td>四</td>\n<td>五</td>\n<td>六</td>\n<td>七</td>\n<td>八</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>转换方法: 直接发音和单位相间连接,最后一位不处理,即不添加<code>个</code>字 </p>\n</blockquote>\n<h4 id=\"二-包含数字零的情况\"><a href=\"#二-包含数字零的情况\" class=\"headerlink\" title=\"二.包含数字零的情况\"></a>二.包含数字零的情况</h4><ol>\n<li>数字0在中间且不连续</li>\n<li>数字0在中间连续</li>\n<li>数字0在末尾(一个或多个)</li>\n<li>中间末尾都有,中间连续</li>\n<li>中间末尾都有,中间不连续</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><h4 id=\"一-不包含数字0的情况\"><a href=\"#一-不包含数字0的情况\" class=\"headerlink\" title=\"一.不包含数字0的情况\"></a>一.不包含数字0的情况</h4><ol>\n<li>如有数字<code>12345678</code> 读作: 一千二百三十四万五千六百七十八</li>\n<li>可以发现规律如下:</li>\n</ol>\n<blockquote>\n<p> <code>一</code>千<code>二</code>百<code>三</code>十<code>四</code>万<code>五</code>千<code>六</code>百<code>七</code>十<code>八</code>, 首先, 每一位的数字都会发音, 这个发音列表下</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">1</th>\n<th style=\"text-align:center\">2</th>\n<th style=\"text-align:center\">3</th>\n<th style=\"text-align:center\">4</th>\n<th style=\"text-align:center\">5</th>\n<th style=\"text-align:center\">6</th>\n<th style=\"text-align:center\">7</th>\n<th style=\"text-align:center\">8</th>\n<th style=\"text-align:center\">9</th>\n<th style=\"text-align:center\">0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">一</td>\n<td style=\"text-align:center\">二</td>\n<td style=\"text-align:center\">三</td>\n<td style=\"text-align:center\">四</td>\n<td style=\"text-align:center\">五</td>\n<td style=\"text-align:center\">六</td>\n<td style=\"text-align:center\">七</td>\n<td style=\"text-align:center\">八</td>\n<td style=\"text-align:center\">九</td>\n<td style=\"text-align:center\">零</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>其次就是<code>千,百,十,万,千,百,十</code>,同样,列表如下</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>数字</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>索引</td>\n<td>0</td>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>4</td>\n<td>5</td>\n<td>6</td>\n<td>7</td>\n</tr>\n<tr>\n<td>对应单位:</td>\n<td>千</td>\n<td>百</td>\n<td>十</td>\n<td>万</td>\n<td>千</td>\n<td>百</td>\n<td>十</td>\n<td>个</td>\n</tr>\n<tr>\n<td>自身发音:</td>\n<td>一</td>\n<td>二</td>\n<td>三</td>\n<td>四</td>\n<td>五</td>\n<td>六</td>\n<td>七</td>\n<td>八</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>转换方法: 直接发音和单位相间连接,最后一位不处理,即不添加<code>个</code>字 </p>\n</blockquote>\n<h4 id=\"二-包含数字零的情况\"><a href=\"#二-包含数字零的情况\" class=\"headerlink\" title=\"二.包含数字零的情况\"></a>二.包含数字零的情况</h4><ol>\n<li>数字0在中间且不连续</li>\n<li>数字0在中间连续</li>\n<li>数字0在末尾(一个或多个)</li>\n<li>中间末尾都有,中间连续</li>\n<li>中间末尾都有,中间不连续</li>\n</ol>\n"},{"title":"Git学习","date":"2017-07-28T05:20:24.000Z","comment":true,"_content":"### 一. 初始化\n\n+ 初始化当前目录为一个git仓库:  `git init`\n+ 设置git账户:\n\n```git\ngit config --global user.name \"You Name\"\ngit config --global user.email \"your email address\"\n```\n\n### 二. 仓库操作\n\n#### 1. 版本管理\n+ 添加文件到暂存区: `git add [Files]`\n+ 将暂存区的文件提交: `git commit -m ['msg']`\n\n#### 2. 指定不纳入版本管理的文件: \n>在git仓库下打开.gitignore文件(Mac/Linux系统下这个文件是个隐藏的, 可以在终端中用命令调用文本编辑器来打开`vim .gitignore`), 顾名思义, 这个文件名字告诉我们就是用来忽略掉在版本管理中我们不关心的文件, 具体用法如下:\n1. 在git中, 每一行代表一个用来匹配的模式\n2. 空行不会匹配任何模式, 因此可以用来当做分割线使得.gitignore文件看起来更美观\n3. 以#开头的是一个注释\n4. 尾部的空格将会被忽略掉, 除非他们用反斜杠 \"\\\" 括起来\n5. 前缀\"!\" 代表一个取反的操作: 会消除前一个模式中指定的忽略的文件. 例如\n`\\*.swp`\n`!lib.swp`\n这个模式代表将会忽略掉不是以lib.swp结尾的所有.swp文件\n6.(...未完)\n\n#### 3.查看仓库状\n+ 可以查看\b工作区状态: `git status`\n\n\n#### 4. 仓库的创建\n+ 克隆一个远端仓库到指定的目录中: `git clone ['url']`\n+ 克隆一个远端仓库到已存在的目录中: `git clone ['url'] ['path']`\n\n#### 5. 操作\n+ 删除在工作区删除了但版本库里面尚未删除的文件: `git rm [文件名]`\n+ 只从暂存区删除而不从工作区删除文件:   `git rm --cached [文件名]`\n> 例如: deleteme.rb添加到了暂存区, 现在不想让它被暂存, 就可以使用这条命令: \n`git rm --cached deleteme.rb`\n\n#### 6. `git stash`命令\n+ 解释:\n> 当你想清空当前的工作目录的时候, 可以使用`git stash`命令来记录当前的工作目录和暂存区的状态. 这个命令可以保存你的本地修改并且将你的工作目录恢复到和HEAD commit一致的状态\n> \n> **简而言之**: 就是可以既更新版本库的最新版本, 又可以保存本地的修改(纯属个人理解)\n\n\n+ `git stash list`: 列出已经备份过的改变\n+ `git stash show`: 显示已经记录在stash中的文件状态和它的原始状态的不同\n+ `git stash save`: 将本地的修改作为一个新的stash, 并且重置工作目录(`git stash`命令也会被解析为`git stash save`)\n\n#### 7. `git mv`命令\n+ 解释:\n> 从暂存区中移除已跟踪的文件或重命名已跟踪的文件","source":"_posts/Git学习.md","raw":"---\ntitle: Git学习\ndate: 2017-07-28 13:20:24\ntags: 工具;版本管理\ncomment: true\n---\n### 一. 初始化\n\n+ 初始化当前目录为一个git仓库:  `git init`\n+ 设置git账户:\n\n```git\ngit config --global user.name \"You Name\"\ngit config --global user.email \"your email address\"\n```\n\n### 二. 仓库操作\n\n#### 1. 版本管理\n+ 添加文件到暂存区: `git add [Files]`\n+ 将暂存区的文件提交: `git commit -m ['msg']`\n\n#### 2. 指定不纳入版本管理的文件: \n>在git仓库下打开.gitignore文件(Mac/Linux系统下这个文件是个隐藏的, 可以在终端中用命令调用文本编辑器来打开`vim .gitignore`), 顾名思义, 这个文件名字告诉我们就是用来忽略掉在版本管理中我们不关心的文件, 具体用法如下:\n1. 在git中, 每一行代表一个用来匹配的模式\n2. 空行不会匹配任何模式, 因此可以用来当做分割线使得.gitignore文件看起来更美观\n3. 以#开头的是一个注释\n4. 尾部的空格将会被忽略掉, 除非他们用反斜杠 \"\\\" 括起来\n5. 前缀\"!\" 代表一个取反的操作: 会消除前一个模式中指定的忽略的文件. 例如\n`\\*.swp`\n`!lib.swp`\n这个模式代表将会忽略掉不是以lib.swp结尾的所有.swp文件\n6.(...未完)\n\n#### 3.查看仓库状\n+ 可以查看\b工作区状态: `git status`\n\n\n#### 4. 仓库的创建\n+ 克隆一个远端仓库到指定的目录中: `git clone ['url']`\n+ 克隆一个远端仓库到已存在的目录中: `git clone ['url'] ['path']`\n\n#### 5. 操作\n+ 删除在工作区删除了但版本库里面尚未删除的文件: `git rm [文件名]`\n+ 只从暂存区删除而不从工作区删除文件:   `git rm --cached [文件名]`\n> 例如: deleteme.rb添加到了暂存区, 现在不想让它被暂存, 就可以使用这条命令: \n`git rm --cached deleteme.rb`\n\n#### 6. `git stash`命令\n+ 解释:\n> 当你想清空当前的工作目录的时候, 可以使用`git stash`命令来记录当前的工作目录和暂存区的状态. 这个命令可以保存你的本地修改并且将你的工作目录恢复到和HEAD commit一致的状态\n> \n> **简而言之**: 就是可以既更新版本库的最新版本, 又可以保存本地的修改(纯属个人理解)\n\n\n+ `git stash list`: 列出已经备份过的改变\n+ `git stash show`: 显示已经记录在stash中的文件状态和它的原始状态的不同\n+ `git stash save`: 将本地的修改作为一个新的stash, 并且重置工作目录(`git stash`命令也会被解析为`git stash save`)\n\n#### 7. `git mv`命令\n+ 解释:\n> 从暂存区中移除已跟踪的文件或重命名已跟踪的文件","slug":"Git学习","published":1,"updated":"2018-02-09T11:43:09.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdhfo5yd0002a4dkm66ucksd","content":"<h3 id=\"一-初始化\"><a href=\"#一-初始化\" class=\"headerlink\" title=\"一. 初始化\"></a>一. 初始化</h3><ul>\n<li>初始化当前目录为一个git仓库:  <code>git init</code></li>\n<li>设置git账户:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name &quot;You Name&quot;</div><div class=\"line\">git config --global user.email &quot;your email address&quot;</div></pre></td></tr></table></figure>\n<h3 id=\"二-仓库操作\"><a href=\"#二-仓库操作\" class=\"headerlink\" title=\"二. 仓库操作\"></a>二. 仓库操作</h3><h4 id=\"1-版本管理\"><a href=\"#1-版本管理\" class=\"headerlink\" title=\"1. 版本管理\"></a>1. 版本管理</h4><ul>\n<li>添加文件到暂存区: <code>git add [Files]</code></li>\n<li>将暂存区的文件提交: <code>git commit -m [&#39;msg&#39;]</code></li>\n</ul>\n<h4 id=\"2-指定不纳入版本管理的文件\"><a href=\"#2-指定不纳入版本管理的文件\" class=\"headerlink\" title=\"2. 指定不纳入版本管理的文件:\"></a>2. 指定不纳入版本管理的文件:</h4><blockquote>\n<p>在git仓库下打开.gitignore文件(Mac/Linux系统下这个文件是个隐藏的, 可以在终端中用命令调用文本编辑器来打开<code>vim .gitignore</code>), 顾名思义, 这个文件名字告诉我们就是用来忽略掉在版本管理中我们不关心的文件, 具体用法如下:</p>\n<ol>\n<li>在git中, 每一行代表一个用来匹配的模式</li>\n<li>空行不会匹配任何模式, 因此可以用来当做分割线使得.gitignore文件看起来更美观</li>\n<li>以#开头的是一个注释</li>\n<li>尾部的空格将会被忽略掉, 除非他们用反斜杠 “\\” 括起来</li>\n<li>前缀”!” 代表一个取反的操作: 会消除前一个模式中指定的忽略的文件. 例如<br><code>\\*.swp</code><br><code>!lib.swp</code><br>这个模式代表将会忽略掉不是以lib.swp结尾的所有.swp文件<br>6.(…未完)</li>\n</ol>\n</blockquote>\n<h4 id=\"3-查看仓库状\"><a href=\"#3-查看仓库状\" class=\"headerlink\" title=\"3.查看仓库状\"></a>3.查看仓库状</h4><ul>\n<li>可以查看\b工作区状态: <code>git status</code></li>\n</ul>\n<h4 id=\"4-仓库的创建\"><a href=\"#4-仓库的创建\" class=\"headerlink\" title=\"4. 仓库的创建\"></a>4. 仓库的创建</h4><ul>\n<li>克隆一个远端仓库到指定的目录中: <code>git clone [&#39;url&#39;]</code></li>\n<li>克隆一个远端仓库到已存在的目录中: <code>git clone [&#39;url&#39;] [&#39;path&#39;]</code></li>\n</ul>\n<h4 id=\"5-操作\"><a href=\"#5-操作\" class=\"headerlink\" title=\"5. 操作\"></a>5. 操作</h4><ul>\n<li>删除在工作区删除了但版本库里面尚未删除的文件: <code>git rm [文件名]</code></li>\n<li>只从暂存区删除而不从工作区删除文件:   <code>git rm --cached [文件名]</code><blockquote>\n<p>例如: deleteme.rb添加到了暂存区, 现在不想让它被暂存, 就可以使用这条命令:<br><code>git rm --cached deleteme.rb</code></p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"6-git-stash命令\"><a href=\"#6-git-stash命令\" class=\"headerlink\" title=\"6. git stash命令\"></a>6. <code>git stash</code>命令</h4><ul>\n<li>解释:<blockquote>\n<p>当你想清空当前的工作目录的时候, 可以使用<code>git stash</code>命令来记录当前的工作目录和暂存区的状态. 这个命令可以保存你的本地修改并且将你的工作目录恢复到和HEAD commit一致的状态</p>\n<p><strong>简而言之</strong>: 就是可以既更新版本库的最新版本, 又可以保存本地的修改(纯属个人理解)</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><code>git stash list</code>: 列出已经备份过的改变</li>\n<li><code>git stash show</code>: 显示已经记录在stash中的文件状态和它的原始状态的不同</li>\n<li><code>git stash save</code>: 将本地的修改作为一个新的stash, 并且重置工作目录(<code>git stash</code>命令也会被解析为<code>git stash save</code>)</li>\n</ul>\n<h4 id=\"7-git-mv命令\"><a href=\"#7-git-mv命令\" class=\"headerlink\" title=\"7. git mv命令\"></a>7. <code>git mv</code>命令</h4><ul>\n<li>解释:<blockquote>\n<p>从暂存区中移除已跟踪的文件或重命名已跟踪的文件</p>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一-初始化\"><a href=\"#一-初始化\" class=\"headerlink\" title=\"一. 初始化\"></a>一. 初始化</h3><ul>\n<li>初始化当前目录为一个git仓库:  <code>git init</code></li>\n<li>设置git账户:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name &quot;You Name&quot;</div><div class=\"line\">git config --global user.email &quot;your email address&quot;</div></pre></td></tr></table></figure>\n<h3 id=\"二-仓库操作\"><a href=\"#二-仓库操作\" class=\"headerlink\" title=\"二. 仓库操作\"></a>二. 仓库操作</h3><h4 id=\"1-版本管理\"><a href=\"#1-版本管理\" class=\"headerlink\" title=\"1. 版本管理\"></a>1. 版本管理</h4><ul>\n<li>添加文件到暂存区: <code>git add [Files]</code></li>\n<li>将暂存区的文件提交: <code>git commit -m [&#39;msg&#39;]</code></li>\n</ul>\n<h4 id=\"2-指定不纳入版本管理的文件\"><a href=\"#2-指定不纳入版本管理的文件\" class=\"headerlink\" title=\"2. 指定不纳入版本管理的文件:\"></a>2. 指定不纳入版本管理的文件:</h4><blockquote>\n<p>在git仓库下打开.gitignore文件(Mac/Linux系统下这个文件是个隐藏的, 可以在终端中用命令调用文本编辑器来打开<code>vim .gitignore</code>), 顾名思义, 这个文件名字告诉我们就是用来忽略掉在版本管理中我们不关心的文件, 具体用法如下:</p>\n<ol>\n<li>在git中, 每一行代表一个用来匹配的模式</li>\n<li>空行不会匹配任何模式, 因此可以用来当做分割线使得.gitignore文件看起来更美观</li>\n<li>以#开头的是一个注释</li>\n<li>尾部的空格将会被忽略掉, 除非他们用反斜杠 “\\” 括起来</li>\n<li>前缀”!” 代表一个取反的操作: 会消除前一个模式中指定的忽略的文件. 例如<br><code>\\*.swp</code><br><code>!lib.swp</code><br>这个模式代表将会忽略掉不是以lib.swp结尾的所有.swp文件<br>6.(…未完)</li>\n</ol>\n</blockquote>\n<h4 id=\"3-查看仓库状\"><a href=\"#3-查看仓库状\" class=\"headerlink\" title=\"3.查看仓库状\"></a>3.查看仓库状</h4><ul>\n<li>可以查看\b工作区状态: <code>git status</code></li>\n</ul>\n<h4 id=\"4-仓库的创建\"><a href=\"#4-仓库的创建\" class=\"headerlink\" title=\"4. 仓库的创建\"></a>4. 仓库的创建</h4><ul>\n<li>克隆一个远端仓库到指定的目录中: <code>git clone [&#39;url&#39;]</code></li>\n<li>克隆一个远端仓库到已存在的目录中: <code>git clone [&#39;url&#39;] [&#39;path&#39;]</code></li>\n</ul>\n<h4 id=\"5-操作\"><a href=\"#5-操作\" class=\"headerlink\" title=\"5. 操作\"></a>5. 操作</h4><ul>\n<li>删除在工作区删除了但版本库里面尚未删除的文件: <code>git rm [文件名]</code></li>\n<li>只从暂存区删除而不从工作区删除文件:   <code>git rm --cached [文件名]</code><blockquote>\n<p>例如: deleteme.rb添加到了暂存区, 现在不想让它被暂存, 就可以使用这条命令:<br><code>git rm --cached deleteme.rb</code></p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"6-git-stash命令\"><a href=\"#6-git-stash命令\" class=\"headerlink\" title=\"6. git stash命令\"></a>6. <code>git stash</code>命令</h4><ul>\n<li>解释:<blockquote>\n<p>当你想清空当前的工作目录的时候, 可以使用<code>git stash</code>命令来记录当前的工作目录和暂存区的状态. 这个命令可以保存你的本地修改并且将你的工作目录恢复到和HEAD commit一致的状态</p>\n<p><strong>简而言之</strong>: 就是可以既更新版本库的最新版本, 又可以保存本地的修改(纯属个人理解)</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><code>git stash list</code>: 列出已经备份过的改变</li>\n<li><code>git stash show</code>: 显示已经记录在stash中的文件状态和它的原始状态的不同</li>\n<li><code>git stash save</code>: 将本地的修改作为一个新的stash, 并且重置工作目录(<code>git stash</code>命令也会被解析为<code>git stash save</code>)</li>\n</ul>\n<h4 id=\"7-git-mv命令\"><a href=\"#7-git-mv命令\" class=\"headerlink\" title=\"7. git mv命令\"></a>7. <code>git mv</code>命令</h4><ul>\n<li>解释:<blockquote>\n<p>从暂存区中移除已跟踪的文件或重命名已跟踪的文件</p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"OpenGL学习笔记(一)--window下VS2013环境搭建OpenGL开发环境","date":"2017-05-29T08:05:00.000Z","_content":"\n### 1. 环境搭建\n> 需要: Win10; VS2013(其他版本的VS未经测试, 但总体流程和操作相差不大); [GLFW3][1](windows 32位版本); [GLEW][2]\n\n- #### 新建C++项目\n1. 首先使用VS2013新建一个C++的控制台项目`OpenGL_Lean`, 然后打开生成解决方案(可自己先新建一个main.cpp, 写上main函数,后面会用到)\n\n- #### `GLEW`和`GLFW`安装步骤:\n\n##### 1. 分别解压`glfw`和`glew`得到两个文件夹\n\n> glfw解压后文件夹结构如下图 **(图1.1)**\n![解压glfw之后的文件夹结构](/img/201705/2017-05-29_164226.png)\n\n> glew文件夹结构 **(图1.2)**\n![解压glew之后的文件夹结构](/img/201705/2017-05-29_164227.png)\n\n##### 2. 复制库文件和头文件\n\n首先找到VS2013的安装目录 (如果是默认安装, 那么应该在`C:\\Program Files (x86)\\Microsoft Visual Studio 12.0`)\n+ **第一步: 复制动态库文件:** \n分别复制glew (`bin\\Release\\Win32\\glew32.dll`) 和glfw (`lib-vc2013\\glfw3.dll`) 这两个`DLL`文件到第一步新建的项目的OpenGL_Learn里面的Debug文件夹下(也可以直接复制到c:\\windows\\system32下), 复制完成后如下图:\n![Debug文件夹结构](/img/201705/dll-pic.png)\n\n+ **第二步: 复制静态库文件:**\n分别复制glew(`lib\\Release\\glew32s.lib`) 和glfw (`lib-vc2013\\glfw3.lib`)这两个`lib`文件到`[VS2013安装目录]\\vc\\lib`下面\n\n+ **第三步: 复制头文件:**\n分别复制glew: `include\\GL`和glfw: `include\\GLFW`文件夹到`[VS2013安装目录]\\vc\\include`. 复制完成之后VS2013的`vc\\include`文件夹应该是这样的\n![include文件夹内的结构](/img/201705/2017-05-29_190301.png)    \n\n##### 3. 在VS2013中设置依赖库\n\n打开VS的解决方案资源管理器, 在刚才的项目上右键, 点击属性打开属性设置对话框, 如下图\n![VS2013属性设置面板](/img/201705/2017-05-30_001220.png)\n**然后按照上图展开`链接器`>输入, 在项目依赖库里面填入glfw3.lib;glew32s.lib两个静态库, 如上图所示**\n\n##### 4. 设置项目类型(显示控制台或者不显示)\n+ 显示控制台窗口: 个人在开发阶段喜欢同时显示控制台窗口, 因为这样可以看到标准输入输出信息, 方便调试和排查错误.\n> 打开方式: 无需特殊打开, 默认如此\n+ 不显示控制台窗口: 只显示OpenGL图形窗口\n> 打开方式: 依次打开`属性`\n\n\n\n\n[1]: https://github.com/glfw/glfw/releases/download/3.2.1/glfw-3.2.1.zip\n[2]: https://downloads.sourceforge.net/project/glew/glew/2.0.0/glew-2.0.0.zipr=http%3A%2F%2Fglew.sourceforge.net%2F&ts=1496045710&use_mirror=nchc\n","source":"_posts/OpenGL-Learn-1.md","raw":"title: OpenGL学习笔记(一)--window下VS2013环境搭建OpenGL开发环境\ntags:\n  - 'OpenGL, 图形学'\ncategories: []\ndate: 2017-05-29 16:05:00\n---\n\n### 1. 环境搭建\n> 需要: Win10; VS2013(其他版本的VS未经测试, 但总体流程和操作相差不大); [GLFW3][1](windows 32位版本); [GLEW][2]\n\n- #### 新建C++项目\n1. 首先使用VS2013新建一个C++的控制台项目`OpenGL_Lean`, 然后打开生成解决方案(可自己先新建一个main.cpp, 写上main函数,后面会用到)\n\n- #### `GLEW`和`GLFW`安装步骤:\n\n##### 1. 分别解压`glfw`和`glew`得到两个文件夹\n\n> glfw解压后文件夹结构如下图 **(图1.1)**\n![解压glfw之后的文件夹结构](/img/201705/2017-05-29_164226.png)\n\n> glew文件夹结构 **(图1.2)**\n![解压glew之后的文件夹结构](/img/201705/2017-05-29_164227.png)\n\n##### 2. 复制库文件和头文件\n\n首先找到VS2013的安装目录 (如果是默认安装, 那么应该在`C:\\Program Files (x86)\\Microsoft Visual Studio 12.0`)\n+ **第一步: 复制动态库文件:** \n分别复制glew (`bin\\Release\\Win32\\glew32.dll`) 和glfw (`lib-vc2013\\glfw3.dll`) 这两个`DLL`文件到第一步新建的项目的OpenGL_Learn里面的Debug文件夹下(也可以直接复制到c:\\windows\\system32下), 复制完成后如下图:\n![Debug文件夹结构](/img/201705/dll-pic.png)\n\n+ **第二步: 复制静态库文件:**\n分别复制glew(`lib\\Release\\glew32s.lib`) 和glfw (`lib-vc2013\\glfw3.lib`)这两个`lib`文件到`[VS2013安装目录]\\vc\\lib`下面\n\n+ **第三步: 复制头文件:**\n分别复制glew: `include\\GL`和glfw: `include\\GLFW`文件夹到`[VS2013安装目录]\\vc\\include`. 复制完成之后VS2013的`vc\\include`文件夹应该是这样的\n![include文件夹内的结构](/img/201705/2017-05-29_190301.png)    \n\n##### 3. 在VS2013中设置依赖库\n\n打开VS的解决方案资源管理器, 在刚才的项目上右键, 点击属性打开属性设置对话框, 如下图\n![VS2013属性设置面板](/img/201705/2017-05-30_001220.png)\n**然后按照上图展开`链接器`>输入, 在项目依赖库里面填入glfw3.lib;glew32s.lib两个静态库, 如上图所示**\n\n##### 4. 设置项目类型(显示控制台或者不显示)\n+ 显示控制台窗口: 个人在开发阶段喜欢同时显示控制台窗口, 因为这样可以看到标准输入输出信息, 方便调试和排查错误.\n> 打开方式: 无需特殊打开, 默认如此\n+ 不显示控制台窗口: 只显示OpenGL图形窗口\n> 打开方式: 依次打开`属性`\n\n\n\n\n[1]: https://github.com/glfw/glfw/releases/download/3.2.1/glfw-3.2.1.zip\n[2]: https://downloads.sourceforge.net/project/glew/glew/2.0.0/glew-2.0.0.zipr=http%3A%2F%2Fglew.sourceforge.net%2F&ts=1496045710&use_mirror=nchc\n","slug":"OpenGL-Learn-1","published":1,"updated":"2018-02-09T11:43:09.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdhfo5yg0004a4dkniep89l1","content":"<h3 id=\"1-环境搭建\"><a href=\"#1-环境搭建\" class=\"headerlink\" title=\"1. 环境搭建\"></a>1. 环境搭建</h3><blockquote>\n<p>需要: Win10; VS2013(其他版本的VS未经测试, 但总体流程和操作相差不大); <a href=\"https://github.com/glfw/glfw/releases/download/3.2.1/glfw-3.2.1.zip\" target=\"_blank\" rel=\"noopener\">GLFW3</a>(windows 32位版本); <a href=\"https://downloads.sourceforge.net/project/glew/glew/2.0.0/glew-2.0.0.zipr=http%3A%2F%2Fglew.sourceforge.net%2F&amp;ts=1496045710&amp;use_mirror=nchc\" target=\"_blank\" rel=\"noopener\">GLEW</a></p>\n</blockquote>\n<ul>\n<li><h4 id=\"新建C-项目\"><a href=\"#新建C-项目\" class=\"headerlink\" title=\"新建C++项目\"></a>新建C++项目</h4></li>\n</ul>\n<ol>\n<li>首先使用VS2013新建一个C++的控制台项目<code>OpenGL_Lean</code>, 然后打开生成解决方案(可自己先新建一个main.cpp, 写上main函数,后面会用到)</li>\n</ol>\n<ul>\n<li><h4 id=\"GLEW和GLFW安装步骤\"><a href=\"#GLEW和GLFW安装步骤\" class=\"headerlink\" title=\"GLEW和GLFW安装步骤:\"></a><code>GLEW</code>和<code>GLFW</code>安装步骤:</h4></li>\n</ul>\n<h5 id=\"1-分别解压glfw和glew得到两个文件夹\"><a href=\"#1-分别解压glfw和glew得到两个文件夹\" class=\"headerlink\" title=\"1. 分别解压glfw和glew得到两个文件夹\"></a>1. 分别解压<code>glfw</code>和<code>glew</code>得到两个文件夹</h5><blockquote>\n<p>glfw解压后文件夹结构如下图 <strong>(图1.1)</strong><br><img src=\"/img/201705/2017-05-29_164226.png\" alt=\"解压glfw之后的文件夹结构\"></p>\n<p>glew文件夹结构 <strong>(图1.2)</strong><br><img src=\"/img/201705/2017-05-29_164227.png\" alt=\"解压glew之后的文件夹结构\"></p>\n</blockquote>\n<h5 id=\"2-复制库文件和头文件\"><a href=\"#2-复制库文件和头文件\" class=\"headerlink\" title=\"2. 复制库文件和头文件\"></a>2. 复制库文件和头文件</h5><p>首先找到VS2013的安装目录 (如果是默认安装, 那么应该在<code>C:\\Program Files (x86)\\Microsoft Visual Studio 12.0</code>)</p>\n<ul>\n<li><p><strong>第一步: 复制动态库文件:</strong><br>分别复制glew (<code>bin\\Release\\Win32\\glew32.dll</code>) 和glfw (<code>lib-vc2013\\glfw3.dll</code>) 这两个<code>DLL</code>文件到第一步新建的项目的OpenGL_Learn里面的Debug文件夹下(也可以直接复制到c:\\windows\\system32下), 复制完成后如下图:<br><img src=\"/img/201705/dll-pic.png\" alt=\"Debug文件夹结构\"></p>\n</li>\n<li><p><strong>第二步: 复制静态库文件:</strong><br>分别复制glew(<code>lib\\Release\\glew32s.lib</code>) 和glfw (<code>lib-vc2013\\glfw3.lib</code>)这两个<code>lib</code>文件到<code>[VS2013安装目录]\\vc\\lib</code>下面</p>\n</li>\n<li><p><strong>第三步: 复制头文件:</strong><br>分别复制glew: <code>include\\GL</code>和glfw: <code>include\\GLFW</code>文件夹到<code>[VS2013安装目录]\\vc\\include</code>. 复制完成之后VS2013的<code>vc\\include</code>文件夹应该是这样的<br><img src=\"/img/201705/2017-05-29_190301.png\" alt=\"include文件夹内的结构\">    </p>\n</li>\n</ul>\n<h5 id=\"3-在VS2013中设置依赖库\"><a href=\"#3-在VS2013中设置依赖库\" class=\"headerlink\" title=\"3. 在VS2013中设置依赖库\"></a>3. 在VS2013中设置依赖库</h5><p>打开VS的解决方案资源管理器, 在刚才的项目上右键, 点击属性打开属性设置对话框, 如下图<br><img src=\"/img/201705/2017-05-30_001220.png\" alt=\"VS2013属性设置面板\"><br><strong>然后按照上图展开<code>链接器</code>&gt;输入, 在项目依赖库里面填入glfw3.lib;glew32s.lib两个静态库, 如上图所示</strong></p>\n<h5 id=\"4-设置项目类型-显示控制台或者不显示\"><a href=\"#4-设置项目类型-显示控制台或者不显示\" class=\"headerlink\" title=\"4. 设置项目类型(显示控制台或者不显示)\"></a>4. 设置项目类型(显示控制台或者不显示)</h5><ul>\n<li>显示控制台窗口: 个人在开发阶段喜欢同时显示控制台窗口, 因为这样可以看到标准输入输出信息, 方便调试和排查错误.<blockquote>\n<p>打开方式: 无需特殊打开, 默认如此</p>\n</blockquote>\n</li>\n<li>不显示控制台窗口: 只显示OpenGL图形窗口<blockquote>\n<p>打开方式: 依次打开<code>属性</code></p>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-环境搭建\"><a href=\"#1-环境搭建\" class=\"headerlink\" title=\"1. 环境搭建\"></a>1. 环境搭建</h3><blockquote>\n<p>需要: Win10; VS2013(其他版本的VS未经测试, 但总体流程和操作相差不大); <a href=\"https://github.com/glfw/glfw/releases/download/3.2.1/glfw-3.2.1.zip\" target=\"_blank\" rel=\"noopener\">GLFW3</a>(windows 32位版本); <a href=\"https://downloads.sourceforge.net/project/glew/glew/2.0.0/glew-2.0.0.zipr=http%3A%2F%2Fglew.sourceforge.net%2F&amp;ts=1496045710&amp;use_mirror=nchc\" target=\"_blank\" rel=\"noopener\">GLEW</a></p>\n</blockquote>\n<ul>\n<li><h4 id=\"新建C-项目\"><a href=\"#新建C-项目\" class=\"headerlink\" title=\"新建C++项目\"></a>新建C++项目</h4></li>\n</ul>\n<ol>\n<li>首先使用VS2013新建一个C++的控制台项目<code>OpenGL_Lean</code>, 然后打开生成解决方案(可自己先新建一个main.cpp, 写上main函数,后面会用到)</li>\n</ol>\n<ul>\n<li><h4 id=\"GLEW和GLFW安装步骤\"><a href=\"#GLEW和GLFW安装步骤\" class=\"headerlink\" title=\"GLEW和GLFW安装步骤:\"></a><code>GLEW</code>和<code>GLFW</code>安装步骤:</h4></li>\n</ul>\n<h5 id=\"1-分别解压glfw和glew得到两个文件夹\"><a href=\"#1-分别解压glfw和glew得到两个文件夹\" class=\"headerlink\" title=\"1. 分别解压glfw和glew得到两个文件夹\"></a>1. 分别解压<code>glfw</code>和<code>glew</code>得到两个文件夹</h5><blockquote>\n<p>glfw解压后文件夹结构如下图 <strong>(图1.1)</strong><br><img src=\"/img/201705/2017-05-29_164226.png\" alt=\"解压glfw之后的文件夹结构\"></p>\n<p>glew文件夹结构 <strong>(图1.2)</strong><br><img src=\"/img/201705/2017-05-29_164227.png\" alt=\"解压glew之后的文件夹结构\"></p>\n</blockquote>\n<h5 id=\"2-复制库文件和头文件\"><a href=\"#2-复制库文件和头文件\" class=\"headerlink\" title=\"2. 复制库文件和头文件\"></a>2. 复制库文件和头文件</h5><p>首先找到VS2013的安装目录 (如果是默认安装, 那么应该在<code>C:\\Program Files (x86)\\Microsoft Visual Studio 12.0</code>)</p>\n<ul>\n<li><p><strong>第一步: 复制动态库文件:</strong><br>分别复制glew (<code>bin\\Release\\Win32\\glew32.dll</code>) 和glfw (<code>lib-vc2013\\glfw3.dll</code>) 这两个<code>DLL</code>文件到第一步新建的项目的OpenGL_Learn里面的Debug文件夹下(也可以直接复制到c:\\windows\\system32下), 复制完成后如下图:<br><img src=\"/img/201705/dll-pic.png\" alt=\"Debug文件夹结构\"></p>\n</li>\n<li><p><strong>第二步: 复制静态库文件:</strong><br>分别复制glew(<code>lib\\Release\\glew32s.lib</code>) 和glfw (<code>lib-vc2013\\glfw3.lib</code>)这两个<code>lib</code>文件到<code>[VS2013安装目录]\\vc\\lib</code>下面</p>\n</li>\n<li><p><strong>第三步: 复制头文件:</strong><br>分别复制glew: <code>include\\GL</code>和glfw: <code>include\\GLFW</code>文件夹到<code>[VS2013安装目录]\\vc\\include</code>. 复制完成之后VS2013的<code>vc\\include</code>文件夹应该是这样的<br><img src=\"/img/201705/2017-05-29_190301.png\" alt=\"include文件夹内的结构\">    </p>\n</li>\n</ul>\n<h5 id=\"3-在VS2013中设置依赖库\"><a href=\"#3-在VS2013中设置依赖库\" class=\"headerlink\" title=\"3. 在VS2013中设置依赖库\"></a>3. 在VS2013中设置依赖库</h5><p>打开VS的解决方案资源管理器, 在刚才的项目上右键, 点击属性打开属性设置对话框, 如下图<br><img src=\"/img/201705/2017-05-30_001220.png\" alt=\"VS2013属性设置面板\"><br><strong>然后按照上图展开<code>链接器</code>&gt;输入, 在项目依赖库里面填入glfw3.lib;glew32s.lib两个静态库, 如上图所示</strong></p>\n<h5 id=\"4-设置项目类型-显示控制台或者不显示\"><a href=\"#4-设置项目类型-显示控制台或者不显示\" class=\"headerlink\" title=\"4. 设置项目类型(显示控制台或者不显示)\"></a>4. 设置项目类型(显示控制台或者不显示)</h5><ul>\n<li>显示控制台窗口: 个人在开发阶段喜欢同时显示控制台窗口, 因为这样可以看到标准输入输出信息, 方便调试和排查错误.<blockquote>\n<p>打开方式: 无需特殊打开, 默认如此</p>\n</blockquote>\n</li>\n<li>不显示控制台窗口: 只显示OpenGL图形窗口<blockquote>\n<p>打开方式: 依次打开<code>属性</code></p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"Unity3D特定文件的打开方式","date":"2018-02-10T13:49:52.000Z","_content":"\n> 在Unity3D编辑器中，双击Shader文件默认的打开应用是和c#脚本一致，一般是Visual Studio。但是Visual Studio原生并没有提供对ShaderLab的语法支持。一般情况下都是用Sublime Text或者Visual Studio Code来作为Shader的编辑器。但是如果能够双击Shader文件直接打开对应的编辑器就再好不过了，后来知道Unity3D提供了编辑器扩展，允许我们监听文件双击打开的消息。是通过 <u>`UnityEdtitor.Callbacks`</u> 来实现的。具体见如下代码\n\n\n### 1. 示例代码\n\n``` csharp\nusing UnityEngine;\nusing UnityEditor;\nusing UnityEditor.Callbacks;\nusing System.IO;\n\npublic class FileopenHandler\n{\n    public static string sublimeTextPath = @\"D:\\Develop_Tools\\Sublime Text 3\\sublime_text.exe\";\n    [OnOpenAsset]\n    public static bool OnOpenShaderFile(int instanceId, int line)\n    {\n        if (EditorUtility.InstanceIDToObject(instanceId) is Shader)\n        {\n            string assetPath = AssetDatabase.GetAssetPath(instanceId);\n            string fullPath = Path.GetFullPath(assetPath);\n            System.Diagnostics.Process process = new System.Diagnostics.Process();\n            System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();\n            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;\n            startInfo.FileName = sublimeTextPath;\n            startInfo.Arguments = \"\\\"\" + fullPath + \"\\\"\";\n            process.StartInfo = startInfo;\n            process.Start();\n            return true;\n        }\n        return false;\n    }\n}\n```\n\n### 2.解释说明\n\n以上代码关键部分在于`[OnOpenAsset]`这个属性。这里告诉Unity3D编辑器，当双击打开一个资源的时候执行下面这个函数。逻辑里面就通过参数实例ID拿到这个资源，判断如果是`Shader`类型的时候，就使用SublimeText编辑器来打开， 其中`sublimeTextPath`保存的是自己电脑上的Sublime路径。需要替换成自己电脑上的路径。","source":"_posts/Unity3D特定文件的打开方式.md","raw":"---\ntitle: Unity3D特定文件的打开方式\ndate: 2018-02-10 21:49:52\ntags: Unity3D\n---\n\n> 在Unity3D编辑器中，双击Shader文件默认的打开应用是和c#脚本一致，一般是Visual Studio。但是Visual Studio原生并没有提供对ShaderLab的语法支持。一般情况下都是用Sublime Text或者Visual Studio Code来作为Shader的编辑器。但是如果能够双击Shader文件直接打开对应的编辑器就再好不过了，后来知道Unity3D提供了编辑器扩展，允许我们监听文件双击打开的消息。是通过 <u>`UnityEdtitor.Callbacks`</u> 来实现的。具体见如下代码\n\n\n### 1. 示例代码\n\n``` csharp\nusing UnityEngine;\nusing UnityEditor;\nusing UnityEditor.Callbacks;\nusing System.IO;\n\npublic class FileopenHandler\n{\n    public static string sublimeTextPath = @\"D:\\Develop_Tools\\Sublime Text 3\\sublime_text.exe\";\n    [OnOpenAsset]\n    public static bool OnOpenShaderFile(int instanceId, int line)\n    {\n        if (EditorUtility.InstanceIDToObject(instanceId) is Shader)\n        {\n            string assetPath = AssetDatabase.GetAssetPath(instanceId);\n            string fullPath = Path.GetFullPath(assetPath);\n            System.Diagnostics.Process process = new System.Diagnostics.Process();\n            System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();\n            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;\n            startInfo.FileName = sublimeTextPath;\n            startInfo.Arguments = \"\\\"\" + fullPath + \"\\\"\";\n            process.StartInfo = startInfo;\n            process.Start();\n            return true;\n        }\n        return false;\n    }\n}\n```\n\n### 2.解释说明\n\n以上代码关键部分在于`[OnOpenAsset]`这个属性。这里告诉Unity3D编辑器，当双击打开一个资源的时候执行下面这个函数。逻辑里面就通过参数实例ID拿到这个资源，判断如果是`Shader`类型的时候，就使用SublimeText编辑器来打开， 其中`sublimeTextPath`保存的是自己电脑上的Sublime路径。需要替换成自己电脑上的路径。","slug":"Unity3D特定文件的打开方式","published":1,"updated":"2018-02-10T14:03:25.720Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdhfo5yh0005a4dkuf9qxpvz","content":"<blockquote>\n<p>在Unity3D编辑器中，双击Shader文件默认的打开应用是和c#脚本一致，一般是Visual Studio。但是Visual Studio原生并没有提供对ShaderLab的语法支持。一般情况下都是用Sublime Text或者Visual Studio Code来作为Shader的编辑器。但是如果能够双击Shader文件直接打开对应的编辑器就再好不过了，后来知道Unity3D提供了编辑器扩展，允许我们监听文件双击打开的消息。是通过 <u><code>UnityEdtitor.Callbacks</code></u> 来实现的。具体见如下代码</p>\n</blockquote>\n<h3 id=\"1-示例代码\"><a href=\"#1-示例代码\" class=\"headerlink\" title=\"1. 示例代码\"></a>1. 示例代码</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> UnityEditor;</div><div class=\"line\"><span class=\"keyword\">using</span> UnityEditor.Callbacks;</div><div class=\"line\"><span class=\"keyword\">using</span> System.IO;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">FileopenHandler</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> sublimeTextPath = <span class=\"string\">@\"D:\\Develop_Tools\\Sublime Text 3\\sublime_text.exe\"</span>;</div><div class=\"line\">    [OnOpenAsset]</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">OnOpenShaderFile</span>(<span class=\"params\"><span class=\"keyword\">int</span> instanceId, <span class=\"keyword\">int</span> line</span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (EditorUtility.InstanceIDToObject(instanceId) <span class=\"keyword\">is</span> Shader)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">string</span> assetPath = AssetDatabase.GetAssetPath(instanceId);</div><div class=\"line\">            <span class=\"keyword\">string</span> fullPath = Path.GetFullPath(assetPath);</div><div class=\"line\">            System.Diagnostics.Process process = <span class=\"keyword\">new</span> System.Diagnostics.Process();</div><div class=\"line\">            System.Diagnostics.ProcessStartInfo startInfo = <span class=\"keyword\">new</span> System.Diagnostics.ProcessStartInfo();</div><div class=\"line\">            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;</div><div class=\"line\">            startInfo.FileName = sublimeTextPath;</div><div class=\"line\">            startInfo.Arguments = <span class=\"string\">\"\\\"\"</span> + fullPath + <span class=\"string\">\"\\\"\"</span>;</div><div class=\"line\">            process.StartInfo = startInfo;</div><div class=\"line\">            process.Start();</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"2-解释说明\"><a href=\"#2-解释说明\" class=\"headerlink\" title=\"2.解释说明\"></a>2.解释说明</h3><p>以上代码关键部分在于<code>[OnOpenAsset]</code>这个属性。这里告诉Unity3D编辑器，当双击打开一个资源的时候执行下面这个函数。逻辑里面就通过参数实例ID拿到这个资源，判断如果是<code>Shader</code>类型的时候，就使用SublimeText编辑器来打开， 其中<code>sublimeTextPath</code>保存的是自己电脑上的Sublime路径。需要替换成自己电脑上的路径。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在Unity3D编辑器中，双击Shader文件默认的打开应用是和c#脚本一致，一般是Visual Studio。但是Visual Studio原生并没有提供对ShaderLab的语法支持。一般情况下都是用Sublime Text或者Visual Studio Code来作为Shader的编辑器。但是如果能够双击Shader文件直接打开对应的编辑器就再好不过了，后来知道Unity3D提供了编辑器扩展，允许我们监听文件双击打开的消息。是通过 <u><code>UnityEdtitor.Callbacks</code></u> 来实现的。具体见如下代码</p>\n</blockquote>\n<h3 id=\"1-示例代码\"><a href=\"#1-示例代码\" class=\"headerlink\" title=\"1. 示例代码\"></a>1. 示例代码</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> UnityEditor;</div><div class=\"line\"><span class=\"keyword\">using</span> UnityEditor.Callbacks;</div><div class=\"line\"><span class=\"keyword\">using</span> System.IO;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">FileopenHandler</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> sublimeTextPath = <span class=\"string\">@\"D:\\Develop_Tools\\Sublime Text 3\\sublime_text.exe\"</span>;</div><div class=\"line\">    [OnOpenAsset]</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">OnOpenShaderFile</span>(<span class=\"params\"><span class=\"keyword\">int</span> instanceId, <span class=\"keyword\">int</span> line</span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (EditorUtility.InstanceIDToObject(instanceId) <span class=\"keyword\">is</span> Shader)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">string</span> assetPath = AssetDatabase.GetAssetPath(instanceId);</div><div class=\"line\">            <span class=\"keyword\">string</span> fullPath = Path.GetFullPath(assetPath);</div><div class=\"line\">            System.Diagnostics.Process process = <span class=\"keyword\">new</span> System.Diagnostics.Process();</div><div class=\"line\">            System.Diagnostics.ProcessStartInfo startInfo = <span class=\"keyword\">new</span> System.Diagnostics.ProcessStartInfo();</div><div class=\"line\">            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;</div><div class=\"line\">            startInfo.FileName = sublimeTextPath;</div><div class=\"line\">            startInfo.Arguments = <span class=\"string\">\"\\\"\"</span> + fullPath + <span class=\"string\">\"\\\"\"</span>;</div><div class=\"line\">            process.StartInfo = startInfo;</div><div class=\"line\">            process.Start();</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"2-解释说明\"><a href=\"#2-解释说明\" class=\"headerlink\" title=\"2.解释说明\"></a>2.解释说明</h3><p>以上代码关键部分在于<code>[OnOpenAsset]</code>这个属性。这里告诉Unity3D编辑器，当双击打开一个资源的时候执行下面这个函数。逻辑里面就通过参数实例ID拿到这个资源，判断如果是<code>Shader</code>类型的时候，就使用SublimeText编辑器来打开， 其中<code>sublimeTextPath</code>保存的是自己电脑上的Sublime路径。需要替换成自己电脑上的路径。</p>\n"},{"title":"Mathematics.for.3D.Game.Programming.and.Computer.Graphics阅读笔记(二)","date":"2017-08-24T06:08:28.000Z","_content":"## 第二章: 向量\n\n### 写在前面的话: \n> 本文基本等同于翻译(加上自己的理解), 笔者英语水平有限, 难免会出现错误, 望高手在评论中指出, 谢谢!\n> 原书: [Mathematics for 3D Game Programming and Computer Graphics, Third Edition][1_booksite] \n\n#### 2.1 向量的属性\n\n+ `定义`: 这里将向量定义为: `实数组成的n元组`\n\n不过大多数情况下, 这个n指的是2, 3, 4, 一个n维向量可以记为:\n$$V=(v_1,v_2,...,v_n) \\tag{2.1}$$\n$V_i$表示向量$V$的第i个分量, 通常情况下, 下标是这个分量所对应的坐标轴的名字. 例如: 一个三维向量$P$可以记为: $P_x,P_y,P_z$.\n+ `列向量`: 可以使用1列n行来表示和(2.1)式等价的`列向量`\n$$V = \n\\begin{bmatrix}\nv_1\\\\\\\\ v_2\\\\\\\\ \\dots \\\\\\\\ v_n\n\\end{bmatrix} \\tag{2.2}$$\n\n+ `行向量`: 可以用1行n列来表示和(2.1)等价的`行向量`, 同时他也是列向量(2.2)的`转置矩阵`(行变列)\n$$V^T=\n\\begin{bmatrix}\nv_1 & v_2 & \\dots & v_n\n\\end{bmatrix}\\tag{2.3}$$\n\n+ `向量和标量相乘`: 分别用这个标量和向量的每一个分量相乘, 结果是一个向量\n$$\naV=Va=(av_1,av_2,\\dots,av_n) \\tag{2.4}\n$$\n\n+ `向量和向量的加法`: 每个分量分别相加, 结果是一个向量. 比如$P + Q$:\n$$\nP + Q = (p_1 + q_1,p_2 + q_2,\\dots,p_n + q_n)\n\\tag{2.5}$$\n\n+ `向量和向量的减法`: $P - Q$可以认为是$P + (-Q)$\n\n+ #### 向量的运算法则: 给定任意两个标量$a,b$, 任意三个向量$P,Q,R$, 以下定律成立\n> (a). $P + Q = Q + P$\n> (b). $(P + Q) + R = P + (Q + R)$\n> (c). $(ab)P = a(bP)$\n> (d). $a(P + Q) = aP + aQ$\n> (e). $(a + b)P = aP + bP$\n\n+ `n维向量V的模`是一个标量, 记做$\\left \\\\| V \\right \\\\|$, 计算公式如下:\n$$\n\\left \\\\| V \\right \\\\| = \\sqrt{\\sum_{i=1}^{n}V^2_i} \\tag{2.6}\n$$\n向量的模也可以叫做向量的长度. 长度为一的向量叫做`unit vector(单位向量)`. 当$V$代表三维的点或者方向的时候, 公式(2.6)可以记作:\n$$\n\\left \\\\| V \\right \\\\| = \\sqrt{V_x^2 + V_y^2 + V_z^2}\\tag{2.7}\n$$\n一个向量$V$至少有一个分量不为0才能够被单位化, 做法就是用这个向量$V$乘以$\\frac{1}{\\left \\\\| V \\right \\\\|}$. 这个操作通常被称为`normalization(单位化)`, 在3D图形学中应用的很广泛. 这里应该注意的就是`单位化`这儿术语和`normal vector(法向量)`这个术语并没有什么联系, `法向量`指的平面中垂直于这个平面的一个向量. 向量的模遵循以下定律:\n> **定理2.2 给定一个标量$a$, 任意两个向量$P, Q$.**\n> (a). $\\left \\\\| P \\right \\\\| \\geq 0$\n> (b). $P = 0 当且仅当 P = (0,0,\\dots,0)$\n> (c). $\\left \\\\| aP \\right \\\\| =\\left |a\\right | \\left \\\\| P \\right \\\\|$\n> (d). $\\left \\\\| P + Q \\right \\\\| \\leqslant \\left \\\\|P \\right \\\\| \\left \\\\|Q \\right \\\\|$\n\n#### 2.2 向量的点乘\n\n向量的点乘, 通常也叫做`scalar product(数量积) or inner product(內积)`, 在3D图形学中用的很广泛因为他可以衡量两个向量的方向相似程度\n\n+ `向量的点乘法则`: n维向量$P, Q$的內积记作: $P \\cdot Q$, 通过下面的公式来计算\n$$\nP \\cdot Q = \\sum^{n}_{i=1}P_iQ_i \\tag{2.9}\n$$\n其实就是两个向量对应分量的乘积的和. 在三维空间中, 有如下公式:\n$$P\\cdot Q = P_xQ_x + P_yQ_y + P_zQ_z \\tag{2.10}$$\n点乘$P \\cdot Q$也可以表达为两个矩阵相乘:\n$$\nP^TQ = \\begin{bmatrix}\nP_1 & P_2 & \\cdots & P_n\n\\end{bmatrix}\n\\begin{bmatrix}\nQ_1 \\\\\\\\ Q_2 \\\\\\\\ \\vdots \\\\\\\\ Q_n\n\\end{bmatrix} \\tag{2.11}\n$$\n最终的结果是一个1X1的矩阵(可以认为它是一个标量), 这正式公式(2.9)的运算结果.\n下面来看一个点乘的很常见的应用:\n> **定理2.4 给定两个n维向量$P,Q$, 点乘$P \\cdot Q$等于下面的公式**\n> $$P \\cdot Q = \\left \\\\|P \\right \\\\| \\left \\\\|Q \\right \\\\| \\cos \\alpha \\tag{2.12}$$\n> $\\alpha $是从原点到$P,Q$表示的两点的连线的夹角\n\n点乘结果的符号表明两个向量在平面的同一侧或者不同侧, `如图2.3`\n> ![图2.3(来自原书截图)](/img/201708/2017-08-29 3.50.08.png)\n\n点乘的另外一个功能就是可以表示两个向量方向的相似程度. 再次看`图2.3`, 我们可以认为有一个平面通过向量$P$的起点, 并且垂直于向量$P$. 任何和向量$P$在同一侧的向量和$P$的点乘结果都是正数, 任何在平面另一侧的向量和$P$的点乘结果是负数.\n下面还有一些点乘的性质:\n> **定理2.5 给定任意一个标量$a$ 和任意三个向量$P,Q,R$, 下面性质成立.**\n> (a). $P \\cdot Q = Q \\cdot P$\n> (b). $(aP) \\cdot = a(P \\cdot Q)$\n> (c). $P \\cdot (Q + R) = P \\cdot Q + P \\cdot R$\n> (d). $P \\cdot P = \\left \\\\|P \\right \\\\|^2$\n> (e). $\\left | P \\cdot Q \\right | \\leqslant \\left \\\\|P \\right \\\\| \\left \\\\|Q \\right \\\\|$\n\n向量点乘的另一个应用场景就是分解向量$P$的分量, 得到垂直或者平行于另外一个向量$Q$的分量. 就像在`图2.4`所展示的一样, 如果我们将向量$P$看做是一个直角三角形的斜边, 然后将向量$P$在垂直于向量$Q$的方向上投影, 将会产生一条直角边. 在向量$P$和$Q$之间的夹角为$\\alpha$\n由三角学我们可以得知: $\\alpha$的邻边的长度为$\\left \\\\|P \\right \\\\| \\cos \\alpha$, 从`定理2.4`我们可以得知: 不知道角度$\\alpha$同样可以获取它的长度:\n$$\n\\left \\\\|P \\right \\\\| \\cos \\alpha = \\frac{P \\cdot Q}{\\left \\\\| Q \\right \\\\|}\n\\tag{2.17}$$\n为了获取到一个长度和它一样的平行于$Q$的向量,可以用`公式(2.7)`的右边乘以$Q$的单位向量$\\frac{Q}{\\left \\\\|Q \\right \\\\|}$. 我们用下面的公式来得到$P$在$Q$方向上的投影向量$proj_QP$:\n$$\nproj_QP = \\frac{P \\cdot Q}{\\left \\\\|Q \\right \\\\|^2}Q\n\\tag{2.18}$$\n\n> ![图2.4(来自原书截图)](/img/201708/2017-08-29 5.38.28.png)\n> 向量$P$在向量$Q$上的投影向量的长度等于$\\frac{P \\cdot Q}{\\left \\\\| Q \\right \\\\|}$是因为$P \\cdot Q = \\left \\\\| P \\right \\\\| \\left \\\\|Q \\right \\\\| \\cos \\alpha$.\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1_booksite]: http://www.mathfor3dgameprogramming.com/","source":"_posts/mf3gpacg-2.md","raw":"---\ntitle: Mathematics.for.3D.Game.Programming.and.Computer.Graphics阅读笔记(二)\ndate: 2017-08-24 14:08:28\ntags: OpenGL, 图形学\n---\n## 第二章: 向量\n\n### 写在前面的话: \n> 本文基本等同于翻译(加上自己的理解), 笔者英语水平有限, 难免会出现错误, 望高手在评论中指出, 谢谢!\n> 原书: [Mathematics for 3D Game Programming and Computer Graphics, Third Edition][1_booksite] \n\n#### 2.1 向量的属性\n\n+ `定义`: 这里将向量定义为: `实数组成的n元组`\n\n不过大多数情况下, 这个n指的是2, 3, 4, 一个n维向量可以记为:\n$$V=(v_1,v_2,...,v_n) \\tag{2.1}$$\n$V_i$表示向量$V$的第i个分量, 通常情况下, 下标是这个分量所对应的坐标轴的名字. 例如: 一个三维向量$P$可以记为: $P_x,P_y,P_z$.\n+ `列向量`: 可以使用1列n行来表示和(2.1)式等价的`列向量`\n$$V = \n\\begin{bmatrix}\nv_1\\\\\\\\ v_2\\\\\\\\ \\dots \\\\\\\\ v_n\n\\end{bmatrix} \\tag{2.2}$$\n\n+ `行向量`: 可以用1行n列来表示和(2.1)等价的`行向量`, 同时他也是列向量(2.2)的`转置矩阵`(行变列)\n$$V^T=\n\\begin{bmatrix}\nv_1 & v_2 & \\dots & v_n\n\\end{bmatrix}\\tag{2.3}$$\n\n+ `向量和标量相乘`: 分别用这个标量和向量的每一个分量相乘, 结果是一个向量\n$$\naV=Va=(av_1,av_2,\\dots,av_n) \\tag{2.4}\n$$\n\n+ `向量和向量的加法`: 每个分量分别相加, 结果是一个向量. 比如$P + Q$:\n$$\nP + Q = (p_1 + q_1,p_2 + q_2,\\dots,p_n + q_n)\n\\tag{2.5}$$\n\n+ `向量和向量的减法`: $P - Q$可以认为是$P + (-Q)$\n\n+ #### 向量的运算法则: 给定任意两个标量$a,b$, 任意三个向量$P,Q,R$, 以下定律成立\n> (a). $P + Q = Q + P$\n> (b). $(P + Q) + R = P + (Q + R)$\n> (c). $(ab)P = a(bP)$\n> (d). $a(P + Q) = aP + aQ$\n> (e). $(a + b)P = aP + bP$\n\n+ `n维向量V的模`是一个标量, 记做$\\left \\\\| V \\right \\\\|$, 计算公式如下:\n$$\n\\left \\\\| V \\right \\\\| = \\sqrt{\\sum_{i=1}^{n}V^2_i} \\tag{2.6}\n$$\n向量的模也可以叫做向量的长度. 长度为一的向量叫做`unit vector(单位向量)`. 当$V$代表三维的点或者方向的时候, 公式(2.6)可以记作:\n$$\n\\left \\\\| V \\right \\\\| = \\sqrt{V_x^2 + V_y^2 + V_z^2}\\tag{2.7}\n$$\n一个向量$V$至少有一个分量不为0才能够被单位化, 做法就是用这个向量$V$乘以$\\frac{1}{\\left \\\\| V \\right \\\\|}$. 这个操作通常被称为`normalization(单位化)`, 在3D图形学中应用的很广泛. 这里应该注意的就是`单位化`这儿术语和`normal vector(法向量)`这个术语并没有什么联系, `法向量`指的平面中垂直于这个平面的一个向量. 向量的模遵循以下定律:\n> **定理2.2 给定一个标量$a$, 任意两个向量$P, Q$.**\n> (a). $\\left \\\\| P \\right \\\\| \\geq 0$\n> (b). $P = 0 当且仅当 P = (0,0,\\dots,0)$\n> (c). $\\left \\\\| aP \\right \\\\| =\\left |a\\right | \\left \\\\| P \\right \\\\|$\n> (d). $\\left \\\\| P + Q \\right \\\\| \\leqslant \\left \\\\|P \\right \\\\| \\left \\\\|Q \\right \\\\|$\n\n#### 2.2 向量的点乘\n\n向量的点乘, 通常也叫做`scalar product(数量积) or inner product(內积)`, 在3D图形学中用的很广泛因为他可以衡量两个向量的方向相似程度\n\n+ `向量的点乘法则`: n维向量$P, Q$的內积记作: $P \\cdot Q$, 通过下面的公式来计算\n$$\nP \\cdot Q = \\sum^{n}_{i=1}P_iQ_i \\tag{2.9}\n$$\n其实就是两个向量对应分量的乘积的和. 在三维空间中, 有如下公式:\n$$P\\cdot Q = P_xQ_x + P_yQ_y + P_zQ_z \\tag{2.10}$$\n点乘$P \\cdot Q$也可以表达为两个矩阵相乘:\n$$\nP^TQ = \\begin{bmatrix}\nP_1 & P_2 & \\cdots & P_n\n\\end{bmatrix}\n\\begin{bmatrix}\nQ_1 \\\\\\\\ Q_2 \\\\\\\\ \\vdots \\\\\\\\ Q_n\n\\end{bmatrix} \\tag{2.11}\n$$\n最终的结果是一个1X1的矩阵(可以认为它是一个标量), 这正式公式(2.9)的运算结果.\n下面来看一个点乘的很常见的应用:\n> **定理2.4 给定两个n维向量$P,Q$, 点乘$P \\cdot Q$等于下面的公式**\n> $$P \\cdot Q = \\left \\\\|P \\right \\\\| \\left \\\\|Q \\right \\\\| \\cos \\alpha \\tag{2.12}$$\n> $\\alpha $是从原点到$P,Q$表示的两点的连线的夹角\n\n点乘结果的符号表明两个向量在平面的同一侧或者不同侧, `如图2.3`\n> ![图2.3(来自原书截图)](/img/201708/2017-08-29 3.50.08.png)\n\n点乘的另外一个功能就是可以表示两个向量方向的相似程度. 再次看`图2.3`, 我们可以认为有一个平面通过向量$P$的起点, 并且垂直于向量$P$. 任何和向量$P$在同一侧的向量和$P$的点乘结果都是正数, 任何在平面另一侧的向量和$P$的点乘结果是负数.\n下面还有一些点乘的性质:\n> **定理2.5 给定任意一个标量$a$ 和任意三个向量$P,Q,R$, 下面性质成立.**\n> (a). $P \\cdot Q = Q \\cdot P$\n> (b). $(aP) \\cdot = a(P \\cdot Q)$\n> (c). $P \\cdot (Q + R) = P \\cdot Q + P \\cdot R$\n> (d). $P \\cdot P = \\left \\\\|P \\right \\\\|^2$\n> (e). $\\left | P \\cdot Q \\right | \\leqslant \\left \\\\|P \\right \\\\| \\left \\\\|Q \\right \\\\|$\n\n向量点乘的另一个应用场景就是分解向量$P$的分量, 得到垂直或者平行于另外一个向量$Q$的分量. 就像在`图2.4`所展示的一样, 如果我们将向量$P$看做是一个直角三角形的斜边, 然后将向量$P$在垂直于向量$Q$的方向上投影, 将会产生一条直角边. 在向量$P$和$Q$之间的夹角为$\\alpha$\n由三角学我们可以得知: $\\alpha$的邻边的长度为$\\left \\\\|P \\right \\\\| \\cos \\alpha$, 从`定理2.4`我们可以得知: 不知道角度$\\alpha$同样可以获取它的长度:\n$$\n\\left \\\\|P \\right \\\\| \\cos \\alpha = \\frac{P \\cdot Q}{\\left \\\\| Q \\right \\\\|}\n\\tag{2.17}$$\n为了获取到一个长度和它一样的平行于$Q$的向量,可以用`公式(2.7)`的右边乘以$Q$的单位向量$\\frac{Q}{\\left \\\\|Q \\right \\\\|}$. 我们用下面的公式来得到$P$在$Q$方向上的投影向量$proj_QP$:\n$$\nproj_QP = \\frac{P \\cdot Q}{\\left \\\\|Q \\right \\\\|^2}Q\n\\tag{2.18}$$\n\n> ![图2.4(来自原书截图)](/img/201708/2017-08-29 5.38.28.png)\n> 向量$P$在向量$Q$上的投影向量的长度等于$\\frac{P \\cdot Q}{\\left \\\\| Q \\right \\\\|}$是因为$P \\cdot Q = \\left \\\\| P \\right \\\\| \\left \\\\|Q \\right \\\\| \\cos \\alpha$.\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1_booksite]: http://www.mathfor3dgameprogramming.com/","slug":"mf3gpacg-2","published":1,"updated":"2018-02-09T11:43:09.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdhfo5yi0006a4dk7mo6ndni","content":"<h2 id=\"第二章-向量\"><a href=\"#第二章-向量\" class=\"headerlink\" title=\"第二章: 向量\"></a>第二章: 向量</h2><h3 id=\"写在前面的话\"><a href=\"#写在前面的话\" class=\"headerlink\" title=\"写在前面的话:\"></a>写在前面的话:</h3><blockquote>\n<p>本文基本等同于翻译(加上自己的理解), 笔者英语水平有限, 难免会出现错误, 望高手在评论中指出, 谢谢!<br>原书: <a href=\"http://www.mathfor3dgameprogramming.com/\" target=\"_blank\" rel=\"noopener\">Mathematics for 3D Game Programming and Computer Graphics, Third Edition</a> </p>\n</blockquote>\n<h4 id=\"2-1-向量的属性\"><a href=\"#2-1-向量的属性\" class=\"headerlink\" title=\"2.1 向量的属性\"></a>2.1 向量的属性</h4><ul>\n<li><code>定义</code>: 这里将向量定义为: <code>实数组成的n元组</code></li>\n</ul>\n<p>不过大多数情况下, 这个n指的是2, 3, 4, 一个n维向量可以记为:<br>$$V=(v_1,v_2,…,v_n) \\tag{2.1}$$<br>$V_i$表示向量$V$的第i个分量, 通常情况下, 下标是这个分量所对应的坐标轴的名字. 例如: 一个三维向量$P$可以记为: $P_x,P_y,P_z$.</p>\n<ul>\n<li><p><code>列向量</code>: 可以使用1列n行来表示和(2.1)式等价的<code>列向量</code><br>$$V =<br>\\begin{bmatrix}<br>v_1\\\\ v_2\\\\ \\dots \\\\ v_n<br>\\end{bmatrix} \\tag{2.2}$$</p>\n</li>\n<li><p><code>行向量</code>: 可以用1行n列来表示和(2.1)等价的<code>行向量</code>, 同时他也是列向量(2.2)的<code>转置矩阵</code>(行变列)<br>$$V^T=<br>\\begin{bmatrix}<br>v_1 &amp; v_2 &amp; \\dots &amp; v_n<br>\\end{bmatrix}\\tag{2.3}$$</p>\n</li>\n<li><p><code>向量和标量相乘</code>: 分别用这个标量和向量的每一个分量相乘, 结果是一个向量<br>$$<br>aV=Va=(av_1,av_2,\\dots,av_n) \\tag{2.4}<br>$$</p>\n</li>\n<li><p><code>向量和向量的加法</code>: 每个分量分别相加, 结果是一个向量. 比如$P + Q$:<br>$$<br>P + Q = (p_1 + q_1,p_2 + q_2,\\dots,p_n + q_n)<br>\\tag{2.5}$$</p>\n</li>\n<li><p><code>向量和向量的减法</code>: $P - Q$可以认为是$P + (-Q)$</p>\n</li>\n<li><h4 id=\"向量的运算法则-给定任意两个标量-a-b-任意三个向量-P-Q-R-以下定律成立\"><a href=\"#向量的运算法则-给定任意两个标量-a-b-任意三个向量-P-Q-R-以下定律成立\" class=\"headerlink\" title=\"向量的运算法则: 给定任意两个标量$a,b$, 任意三个向量$P,Q,R$, 以下定律成立\"></a>向量的运算法则: 给定任意两个标量$a,b$, 任意三个向量$P,Q,R$, 以下定律成立</h4><blockquote>\n<p>(a). $P + Q = Q + P$<br>(b). $(P + Q) + R = P + (Q + R)$<br>(c). $(ab)P = a(bP)$<br>(d). $a(P + Q) = aP + aQ$<br>(e). $(a + b)P = aP + bP$</p>\n</blockquote>\n</li>\n<li><p><code>n维向量V的模</code>是一个标量, 记做$\\left \\| V \\right \\|$, 计算公式如下:<br>$$<br>\\left \\| V \\right \\| = \\sqrt{\\sum_{i=1}^{n}V^2_i} \\tag{2.6}<br>$$<br>向量的模也可以叫做向量的长度. 长度为一的向量叫做<code>unit vector(单位向量)</code>. 当$V$代表三维的点或者方向的时候, 公式(2.6)可以记作:<br>$$<br>\\left \\| V \\right \\| = \\sqrt{V_x^2 + V_y^2 + V_z^2}\\tag{2.7}<br>$$<br>一个向量$V$至少有一个分量不为0才能够被单位化, 做法就是用这个向量$V$乘以$\\frac{1}{\\left \\| V \\right \\|}$. 这个操作通常被称为<code>normalization(单位化)</code>, 在3D图形学中应用的很广泛. 这里应该注意的就是<code>单位化</code>这儿术语和<code>normal vector(法向量)</code>这个术语并没有什么联系, <code>法向量</code>指的平面中垂直于这个平面的一个向量. 向量的模遵循以下定律:</p>\n<blockquote>\n<p><strong>定理2.2 给定一个标量$a$, 任意两个向量$P, Q$.</strong><br>(a). $\\left \\| P \\right \\| \\geq 0$<br>(b). $P = 0 当且仅当 P = (0,0,\\dots,0)$<br>(c). $\\left \\| aP \\right \\| =\\left |a\\right | \\left \\| P \\right \\|$<br>(d). $\\left \\| P + Q \\right \\| \\leqslant \\left \\|P \\right \\| \\left \\|Q \\right \\|$</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"2-2-向量的点乘\"><a href=\"#2-2-向量的点乘\" class=\"headerlink\" title=\"2.2 向量的点乘\"></a>2.2 向量的点乘</h4><p>向量的点乘, 通常也叫做<code>scalar product(数量积) or inner product(內积)</code>, 在3D图形学中用的很广泛因为他可以衡量两个向量的方向相似程度</p>\n<ul>\n<li><code>向量的点乘法则</code>: n维向量$P, Q$的內积记作: $P \\cdot Q$, 通过下面的公式来计算<br>$$<br>P \\cdot Q = \\sum^{n}_{i=1}P_iQ_i \\tag{2.9}<br>$$<br>其实就是两个向量对应分量的乘积的和. 在三维空间中, 有如下公式:<br>$$P\\cdot Q = P_xQ_x + P_yQ_y + P_zQ_z \\tag{2.10}$$<br>点乘$P \\cdot Q$也可以表达为两个矩阵相乘:<br>$$<br>P^TQ = \\begin{bmatrix}<br>P_1 &amp; P_2 &amp; \\cdots &amp; P_n<br>\\end{bmatrix}<br>\\begin{bmatrix}<br>Q_1 \\\\ Q_2 \\\\ \\vdots \\\\ Q_n<br>\\end{bmatrix} \\tag{2.11}<br>$$<br>最终的结果是一个1X1的矩阵(可以认为它是一个标量), 这正式公式(2.9)的运算结果.<br>下面来看一个点乘的很常见的应用:<blockquote>\n<p><strong>定理2.4 给定两个n维向量$P,Q$, 点乘$P \\cdot Q$等于下面的公式</strong><br>$$P \\cdot Q = \\left \\|P \\right \\| \\left \\|Q \\right \\| \\cos \\alpha \\tag{2.12}$$<br>$\\alpha $是从原点到$P,Q$表示的两点的连线的夹角</p>\n</blockquote>\n</li>\n</ul>\n<p>点乘结果的符号表明两个向量在平面的同一侧或者不同侧, <code>如图2.3</code></p>\n<blockquote>\n<p><img src=\"/img/201708/2017-08-29 3.50.08.png\" alt=\"图2.3(来自原书截图)\"></p>\n</blockquote>\n<p>点乘的另外一个功能就是可以表示两个向量方向的相似程度. 再次看<code>图2.3</code>, 我们可以认为有一个平面通过向量$P$的起点, 并且垂直于向量$P$. 任何和向量$P$在同一侧的向量和$P$的点乘结果都是正数, 任何在平面另一侧的向量和$P$的点乘结果是负数.<br>下面还有一些点乘的性质:</p>\n<blockquote>\n<p><strong>定理2.5 给定任意一个标量$a$ 和任意三个向量$P,Q,R$, 下面性质成立.</strong><br>(a). $P \\cdot Q = Q \\cdot P$<br>(b). $(aP) \\cdot = a(P \\cdot Q)$<br>(c). $P \\cdot (Q + R) = P \\cdot Q + P \\cdot R$<br>(d). $P \\cdot P = \\left \\|P \\right \\|^2$<br>(e). $\\left | P \\cdot Q \\right | \\leqslant \\left \\|P \\right \\| \\left \\|Q \\right \\|$</p>\n</blockquote>\n<p>向量点乘的另一个应用场景就是分解向量$P$的分量, 得到垂直或者平行于另外一个向量$Q$的分量. 就像在<code>图2.4</code>所展示的一样, 如果我们将向量$P$看做是一个直角三角形的斜边, 然后将向量$P$在垂直于向量$Q$的方向上投影, 将会产生一条直角边. 在向量$P$和$Q$之间的夹角为$\\alpha$<br>由三角学我们可以得知: $\\alpha$的邻边的长度为$\\left \\|P \\right \\| \\cos \\alpha$, 从<code>定理2.4</code>我们可以得知: 不知道角度$\\alpha$同样可以获取它的长度:<br>$$<br>\\left \\|P \\right \\| \\cos \\alpha = \\frac{P \\cdot Q}{\\left \\| Q \\right \\|}<br>\\tag{2.17}$$<br>为了获取到一个长度和它一样的平行于$Q$的向量,可以用<code>公式(2.7)</code>的右边乘以$Q$的单位向量$\\frac{Q}{\\left \\|Q \\right \\|}$. 我们用下面的公式来得到$P$在$Q$方向上的投影向量$proj_QP$:<br>$$<br>proj_QP = \\frac{P \\cdot Q}{\\left \\|Q \\right \\|^2}Q<br>\\tag{2.18}$$</p>\n<blockquote>\n<p><img src=\"/img/201708/2017-08-29 5.38.28.png\" alt=\"图2.4(来自原书截图)\"><br>向量$P$在向量$Q$上的投影向量的长度等于$\\frac{P \\cdot Q}{\\left \\| Q \\right \\|}$是因为$P \\cdot Q = \\left \\| P \\right \\| \\left \\|Q \\right \\| \\cos \\alpha$.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"第二章-向量\"><a href=\"#第二章-向量\" class=\"headerlink\" title=\"第二章: 向量\"></a>第二章: 向量</h2><h3 id=\"写在前面的话\"><a href=\"#写在前面的话\" class=\"headerlink\" title=\"写在前面的话:\"></a>写在前面的话:</h3><blockquote>\n<p>本文基本等同于翻译(加上自己的理解), 笔者英语水平有限, 难免会出现错误, 望高手在评论中指出, 谢谢!<br>原书: <a href=\"http://www.mathfor3dgameprogramming.com/\" target=\"_blank\" rel=\"noopener\">Mathematics for 3D Game Programming and Computer Graphics, Third Edition</a> </p>\n</blockquote>\n<h4 id=\"2-1-向量的属性\"><a href=\"#2-1-向量的属性\" class=\"headerlink\" title=\"2.1 向量的属性\"></a>2.1 向量的属性</h4><ul>\n<li><code>定义</code>: 这里将向量定义为: <code>实数组成的n元组</code></li>\n</ul>\n<p>不过大多数情况下, 这个n指的是2, 3, 4, 一个n维向量可以记为:<br>$$V=(v_1,v_2,…,v_n) \\tag{2.1}$$<br>$V_i$表示向量$V$的第i个分量, 通常情况下, 下标是这个分量所对应的坐标轴的名字. 例如: 一个三维向量$P$可以记为: $P_x,P_y,P_z$.</p>\n<ul>\n<li><p><code>列向量</code>: 可以使用1列n行来表示和(2.1)式等价的<code>列向量</code><br>$$V =<br>\\begin{bmatrix}<br>v_1\\\\ v_2\\\\ \\dots \\\\ v_n<br>\\end{bmatrix} \\tag{2.2}$$</p>\n</li>\n<li><p><code>行向量</code>: 可以用1行n列来表示和(2.1)等价的<code>行向量</code>, 同时他也是列向量(2.2)的<code>转置矩阵</code>(行变列)<br>$$V^T=<br>\\begin{bmatrix}<br>v_1 &amp; v_2 &amp; \\dots &amp; v_n<br>\\end{bmatrix}\\tag{2.3}$$</p>\n</li>\n<li><p><code>向量和标量相乘</code>: 分别用这个标量和向量的每一个分量相乘, 结果是一个向量<br>$$<br>aV=Va=(av_1,av_2,\\dots,av_n) \\tag{2.4}<br>$$</p>\n</li>\n<li><p><code>向量和向量的加法</code>: 每个分量分别相加, 结果是一个向量. 比如$P + Q$:<br>$$<br>P + Q = (p_1 + q_1,p_2 + q_2,\\dots,p_n + q_n)<br>\\tag{2.5}$$</p>\n</li>\n<li><p><code>向量和向量的减法</code>: $P - Q$可以认为是$P + (-Q)$</p>\n</li>\n<li><h4 id=\"向量的运算法则-给定任意两个标量-a-b-任意三个向量-P-Q-R-以下定律成立\"><a href=\"#向量的运算法则-给定任意两个标量-a-b-任意三个向量-P-Q-R-以下定律成立\" class=\"headerlink\" title=\"向量的运算法则: 给定任意两个标量$a,b$, 任意三个向量$P,Q,R$, 以下定律成立\"></a>向量的运算法则: 给定任意两个标量$a,b$, 任意三个向量$P,Q,R$, 以下定律成立</h4><blockquote>\n<p>(a). $P + Q = Q + P$<br>(b). $(P + Q) + R = P + (Q + R)$<br>(c). $(ab)P = a(bP)$<br>(d). $a(P + Q) = aP + aQ$<br>(e). $(a + b)P = aP + bP$</p>\n</blockquote>\n</li>\n<li><p><code>n维向量V的模</code>是一个标量, 记做$\\left \\| V \\right \\|$, 计算公式如下:<br>$$<br>\\left \\| V \\right \\| = \\sqrt{\\sum_{i=1}^{n}V^2_i} \\tag{2.6}<br>$$<br>向量的模也可以叫做向量的长度. 长度为一的向量叫做<code>unit vector(单位向量)</code>. 当$V$代表三维的点或者方向的时候, 公式(2.6)可以记作:<br>$$<br>\\left \\| V \\right \\| = \\sqrt{V_x^2 + V_y^2 + V_z^2}\\tag{2.7}<br>$$<br>一个向量$V$至少有一个分量不为0才能够被单位化, 做法就是用这个向量$V$乘以$\\frac{1}{\\left \\| V \\right \\|}$. 这个操作通常被称为<code>normalization(单位化)</code>, 在3D图形学中应用的很广泛. 这里应该注意的就是<code>单位化</code>这儿术语和<code>normal vector(法向量)</code>这个术语并没有什么联系, <code>法向量</code>指的平面中垂直于这个平面的一个向量. 向量的模遵循以下定律:</p>\n<blockquote>\n<p><strong>定理2.2 给定一个标量$a$, 任意两个向量$P, Q$.</strong><br>(a). $\\left \\| P \\right \\| \\geq 0$<br>(b). $P = 0 当且仅当 P = (0,0,\\dots,0)$<br>(c). $\\left \\| aP \\right \\| =\\left |a\\right | \\left \\| P \\right \\|$<br>(d). $\\left \\| P + Q \\right \\| \\leqslant \\left \\|P \\right \\| \\left \\|Q \\right \\|$</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"2-2-向量的点乘\"><a href=\"#2-2-向量的点乘\" class=\"headerlink\" title=\"2.2 向量的点乘\"></a>2.2 向量的点乘</h4><p>向量的点乘, 通常也叫做<code>scalar product(数量积) or inner product(內积)</code>, 在3D图形学中用的很广泛因为他可以衡量两个向量的方向相似程度</p>\n<ul>\n<li><code>向量的点乘法则</code>: n维向量$P, Q$的內积记作: $P \\cdot Q$, 通过下面的公式来计算<br>$$<br>P \\cdot Q = \\sum^{n}_{i=1}P_iQ_i \\tag{2.9}<br>$$<br>其实就是两个向量对应分量的乘积的和. 在三维空间中, 有如下公式:<br>$$P\\cdot Q = P_xQ_x + P_yQ_y + P_zQ_z \\tag{2.10}$$<br>点乘$P \\cdot Q$也可以表达为两个矩阵相乘:<br>$$<br>P^TQ = \\begin{bmatrix}<br>P_1 &amp; P_2 &amp; \\cdots &amp; P_n<br>\\end{bmatrix}<br>\\begin{bmatrix}<br>Q_1 \\\\ Q_2 \\\\ \\vdots \\\\ Q_n<br>\\end{bmatrix} \\tag{2.11}<br>$$<br>最终的结果是一个1X1的矩阵(可以认为它是一个标量), 这正式公式(2.9)的运算结果.<br>下面来看一个点乘的很常见的应用:<blockquote>\n<p><strong>定理2.4 给定两个n维向量$P,Q$, 点乘$P \\cdot Q$等于下面的公式</strong><br>$$P \\cdot Q = \\left \\|P \\right \\| \\left \\|Q \\right \\| \\cos \\alpha \\tag{2.12}$$<br>$\\alpha $是从原点到$P,Q$表示的两点的连线的夹角</p>\n</blockquote>\n</li>\n</ul>\n<p>点乘结果的符号表明两个向量在平面的同一侧或者不同侧, <code>如图2.3</code></p>\n<blockquote>\n<p><img src=\"/img/201708/2017-08-29 3.50.08.png\" alt=\"图2.3(来自原书截图)\"></p>\n</blockquote>\n<p>点乘的另外一个功能就是可以表示两个向量方向的相似程度. 再次看<code>图2.3</code>, 我们可以认为有一个平面通过向量$P$的起点, 并且垂直于向量$P$. 任何和向量$P$在同一侧的向量和$P$的点乘结果都是正数, 任何在平面另一侧的向量和$P$的点乘结果是负数.<br>下面还有一些点乘的性质:</p>\n<blockquote>\n<p><strong>定理2.5 给定任意一个标量$a$ 和任意三个向量$P,Q,R$, 下面性质成立.</strong><br>(a). $P \\cdot Q = Q \\cdot P$<br>(b). $(aP) \\cdot = a(P \\cdot Q)$<br>(c). $P \\cdot (Q + R) = P \\cdot Q + P \\cdot R$<br>(d). $P \\cdot P = \\left \\|P \\right \\|^2$<br>(e). $\\left | P \\cdot Q \\right | \\leqslant \\left \\|P \\right \\| \\left \\|Q \\right \\|$</p>\n</blockquote>\n<p>向量点乘的另一个应用场景就是分解向量$P$的分量, 得到垂直或者平行于另外一个向量$Q$的分量. 就像在<code>图2.4</code>所展示的一样, 如果我们将向量$P$看做是一个直角三角形的斜边, 然后将向量$P$在垂直于向量$Q$的方向上投影, 将会产生一条直角边. 在向量$P$和$Q$之间的夹角为$\\alpha$<br>由三角学我们可以得知: $\\alpha$的邻边的长度为$\\left \\|P \\right \\| \\cos \\alpha$, 从<code>定理2.4</code>我们可以得知: 不知道角度$\\alpha$同样可以获取它的长度:<br>$$<br>\\left \\|P \\right \\| \\cos \\alpha = \\frac{P \\cdot Q}{\\left \\| Q \\right \\|}<br>\\tag{2.17}$$<br>为了获取到一个长度和它一样的平行于$Q$的向量,可以用<code>公式(2.7)</code>的右边乘以$Q$的单位向量$\\frac{Q}{\\left \\|Q \\right \\|}$. 我们用下面的公式来得到$P$在$Q$方向上的投影向量$proj_QP$:<br>$$<br>proj_QP = \\frac{P \\cdot Q}{\\left \\|Q \\right \\|^2}Q<br>\\tag{2.18}$$</p>\n<blockquote>\n<p><img src=\"/img/201708/2017-08-29 5.38.28.png\" alt=\"图2.4(来自原书截图)\"><br>向量$P$在向量$Q$上的投影向量的长度等于$\\frac{P \\cdot Q}{\\left \\| Q \\right \\|}$是因为$P \\cdot Q = \\left \\| P \\right \\| \\left \\|Q \\right \\| \\cos \\alpha$.</p>\n</blockquote>\n"},{"title":"[游戏编程模式]阅读笔记","date":"2017-08-24T06:10:53.000Z","_content":"","source":"_posts/游戏编程模式-阅读笔记.md","raw":"---\ntitle: '[游戏编程模式]阅读笔记'\ndate: 2017-08-24 14:10:53\ntags:\n---\n","slug":"游戏编程模式-阅读笔记","published":1,"updated":"2018-02-09T11:43:09.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdhfo5yk0009a4dkwrngw3c0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Mathematics.for.3D.Game.Programming.and.Computer.Graphics阅读笔记(一)","date":"2017-08-24T06:08:28.000Z","_content":"## 第一章: 渲染管线\n\n### 写在前面的话: \n> 本文基本等同于翻译(加上自己的理解), 笔者英语水平有限, 难免会出现错误, 望高手在评论中指出, 谢谢!\n> 原书: [Mathematics for 3D Game Programming and Computer Graphics, Third Edition][1_booksite] \n\n### 一. 渲染管线\n#### 1.1 图形处理器\n一个3D图形场景通常包含了很多独立的对象.这些对象的几何形式通常是由一些特定类型的`图元`组成的.`图元`指的是顶点以怎样的方式连接构成了这种形状. 图1.1列出了 OpenGL图形库定义了10种图元. 图形硬件可以渲染一系列独立的点, 一些线段, 或者一组已经填充好了的多边形. 在大多数情况下, 3D模型的表面是由一些\u001b三角形构成的, 每一个三角形又是由顶点列表中的3个顶点组成.\n> ![图1.1, 来自原书截图](/img/201708/2017-08-24 .png)\n\n现代的3D图形\b卡通常会执行从CPU发出的一些指令, CPU想GPU发出渲染命令, 然后CPU会执行其他的任务, 而GPU会执行这些渲染操作. 这通常被称为***异步操作***. 当需要被渲染的图形信息被提交到渲染库(OpenGL等)的时候, 请求渲染操作的函数将会在渲染操作还未完成前很早就返回. 这些在一个渲染命令的子操作和渲染完成之间的滞后时间将不会产生什么问题, 但是在渲染完成的时刻是需要知道的. 幸运的是, 目前OpenGL的一些扩展可程序以在CPU中运行, 这些程序能够在GPU完成渲染的时候发出通知.但同时会带来性能损耗, 这种异步操作会拖慢3D图形程序的执行速度, 因此, 如果想要性能优先, 那么应该避免这些操作.\n\n那么应用程序和GPU的通信是怎么来进行呢? 通常是通过一些第三方的图形库来实现的, 比如OpenGL. 这些应用将会通过调用OpenGL API方式来向其发出渲染命令. 而OpenGL等图形库又向GPU驱动程序发送渲染命令, 这些驱动程序才知道怎样和GPU交流. OpenGL的这些接口我们称之为***Hardware Abstraction Layer(HAL) 硬件抽象层***, 因为它提供了一些通用的函数可以用来渲染场景, 这些函数可以在任何支持OpenGL架构的图形硬件上运行. 驱动程序将会把这些OpenGL的API转换成GPU可以执行的命令. 3D图形驱动程序通常会直接实现OpenGL函数以最小化渲染命令的开销. ***图1.2*** 展示了CPU和GPU之间的通信过程:\n>![图1.2 CPU和GPU之间的通信(来自原书截图)](/img/201708/2017-08-24 3.48.18.png)\n\n一个3D图形卡有自己的存储空间(显存), 通常被称为***VRAM (Video Random Access Memory)***. GPU可以在VRAM中存储任何东西, 当时在3D应用程序运行的时候, 有这么几类数据大多数总可以在显存中找到. VRAM中有两个图像缓冲区, 被称为前缓冲和后缓冲 (传说中的[***双缓冲***][2_double_swap]). 其中, `front image buffers` 包含了当前在可视区域内看到的每一个像素的数据. *可视区域* 指的就是包含了已经被渲染的图象数据的一个区域, 他可能是一个窗口, 也可能是整个屏幕; `back image buffer`是GPU真正渲染的场景的位置. `back buffer` 在渲染完成呈现给用户之前是不可见的. 一旦一个图像完成了渲染, `back buffer` 和 `front buffer` 将会交换数据. 这个操作被称为`缓冲交换`. 他可以通过以下几种方式来实现:\n> 1. 直接交换两个缓冲区的内存地址\n> 2. 将`back buffer`中的数据拷贝到`fornt buffer`中\n\n缓冲区交换通常和图像显示刷新率保持同步, 这是为了避免发生`画面撕裂现象`. `画面撕裂`通常由于在刷新期间发生了缓冲区交换, 这将会导致一副图像的上半部分和下半部分不同, 因为他们的数据分别来自`front buffer`和`back buffer`.\n\n还有一块存储在VRAM中的数据块被称为`Depth-buffer`或者`z-buffer`. `深度缓冲`存储的数据是图像缓冲中的每一个像素数据的`depth`,`depth`表明这个像素距离屏幕有多远或者这个像素位于图像中的哪个深度. `深度缓冲`通常用来隐藏或表面消除的功能, 它只绘制深度小于图像缓冲去深度的像素. `Depth`同时也表明了从被绘制的场景到虚拟相机(充当人眼的那个位置)的距离. 而`z-buffer`这个名字来自于相机的Z轴, 它是从相机的坐标空间射向屏幕的方向.\n随着`image buffer`和`depth buffer`的创建, 应用程序可能会请求`stencil buffer(模板缓冲区)`. `stencil buffer`包含了一个整型的遮罩, 这和`image buffer`中的每一个像素都是一一对应的, 他可以用来控制特定的像素是否被绘制. 更高级的`stencil buffer`可以用来产生实时阴影.\n大多数3D渲染应用程序中使用VRAM主要通过`Texture maps(纹理贴图)`, `texture maps`通常被用来附着到物体的表面以达到更好的视觉细节. 在高级渲染程序中, `texture maps`通常包含了比简单像素图像更多的信息. 例如: 一个[`bump map(凹凸贴图)`][3_bumpmap]包含的信息是一个个的向量, 这些向量表明了物体表面对应位置的倾斜程度. \n\n#### 1.2 向量变换\n\n几何数据以3维空间的形式传给了图形硬件. 接下来图形硬件需要做的就是就是将这些数据转换到2维空间的视口内. 在`rendering pipeline(渲染管线)` 过程中有很多与之相关联的坐标系统, 他们之间的转换过程如`图1.3`. 一个3D 模型的顶点通常存储在对象的`object space(模型坐标空间)`内, 这个坐标系统取决于特定的模型.每一个模型的位置通常被存储在`word space(世界坐标空间)`中, 这个坐标空间将所有的对象连接到一个全局的坐标空间中. 在每一个对象被渲染之前, 它的顶点必须被转换到`camera space(相机空间)`中, 这个坐标空间的x和y轴适合显示区域的x和y平行的. 模型的顶点是可以直接从`模型空间`转换到`相机空间`的,具体做法就是通过矩阵乘法将 `模型坐标`->`世界坐标`的变换矩阵M<sub>obj-word</sub> 和 `世界坐标`->`相机坐标`的变换矩阵M<sub>word-camera</sub> 连接起来,得到M<sub>obj-camera</sub>称之为 `model-view`变换.\n一旦模型的顶点被转换到了`相机空间`,他们会经历一个投影变换, 这个变换将会达到人眼视觉系统近大远小的视觉效果. 这个投影是通过四维空间其次坐标来完成的, 在这些顶点完成投影后的坐标空间被称为`homogeneous clip space(齐次裁剪空间)`, 之所以这么叫它, 是因为在这个坐标空间,图元会被裁剪在可视区域内,确保落在可视区域外面的图元不会被渲染.\n> ![图1.3(来自原书截图)](/img/201708/2017-08-24 5.29.50.png)\n\n在齐次坐标空间中, 每个顶点的坐标称为`normalized device coordinates(规格化设备坐标, 简称NDC)`, 这里出现了一个新的术语`normalized(规格化或标准化)`, 它的意思其实就是将每个顶点的x,y,z分量映射到[-1,1]区间内, 它表示顶点最终出现在`视口`中的位置. 顶点还要经历再一次的变换`viewport transformation(视口变换)`, 这个变换的结果其实就是最终顶点呈现在屏幕上的位置, `z分量`通常会被映射到[-1,1]区间内, 但是随后它会被缩放到深度缓冲所使用的每一个像素位对应的整型范围.最后, 顶点呈现在了我们的屏幕上.\n除了从`模型空间`转换到`屏幕空间`外, 图形处理器还会针对每一个顶点做一些运算.例如: OpenGL的光照模型将会计算到达每一个顶点的光照强度的该顶点反射颜色以及最终会有多少颜色会被反射进入人眼(相机的位置). 这中运算被称为`per-vertex lighting(逐顶点光照)`. 一些高级的3D程序会使用逐顶点光照处理, 这将会在物体表面产生很细腻的光照表现(像素级别的).\n每一个顶点还会携带一个甚至更多的`texture coordinates(纹理坐标)`. 通常情况下, `纹理坐标`是由应用程序明确指定的或者是GPU自动生成的. 图元在渲染的时候, 将会根据`纹理坐标`从对应的纹理中查询到对应的颜色值插入到图元对应的位置. 这些颜色和其他在每个像素被插入的颜色将会决定最终在视口中的显示效果.\n\n#### 1.3 光栅化和片元操作\n\n一旦模型的顶点完成了坐标转换最终呈现在了屏幕中, GPU必须决定这些在视口中的像素应该用什么样的图元来呈现. 水平扫描固定间隔的像素填充图元的处理过程叫做`raserization(光栅化)`. GPU计算每一个像素的深度, 插入顶点颜色和纹理坐标. 这些信息和像素本身的位置结合起来叫做`fragment(片元)`.\n图元到片元的转换如`图1.4`. 应用程序必须在这个过程的第一阶段决定是否进行`face culling(表面剔除)`.`表面剔除`只会对多边形图元生效, 它会移除背对着相机或者面对着相机的多边形图元. 但是大多数情况下,`表面剔除`被用来优化性能, 因为它会去除背对着相机的多边形, 这些不需要被渲染, 因为我们看不到它.\n> ![图1.4(来自原书截图)](/img/201708/2017-08-25 11.28.13.png)\n\n图形应用程序指定片元数据在光栅化过程中怎样来确实每一个像素的最终颜色和深度. 这个过程叫做`fragment shading 或者 pixel shading(片元着色)`. 最终的颜可可能是从纹理获取来的颜色和顶点插入的颜色的成绩, 也可能是复杂的逐顶点光照的结果. 最终的深度通常不会变化, 但是一些高级的3D图形硬件允许我们来按照自己的意愿替换最终计算的深度值. `图1.5`展示了在光栅化过程中每一个片元产生所执行的操作. 大部分操作都会决定一个图元最终绘制到屏幕上或者被丢弃. 从逻辑上来讲,虽然这些操作会在`片元着色`之后再进行, 但大多数GPU会在执行`片元着色`前进行一些测试, 这些测试能够带来一些性能和时间上的优势: 有一些最终根本不会被显示到屏幕上的图元将不会通过测试, 这就节省了不必要的性能开销和时间开销.\n> ![图1.5(来自原书截图)](/img/201708/2017-08-25 2.19.10.png)\n\n\n\n\n\n\n\n[1_booksite]: http://www.mathfor3dgameprogramming.com/\n[2_double_swap]: https://baike.baidu.com/item/%E5%8F%8C%E7%BC%93%E5%86%B2/10953356?fr=aladdin\n[3_bumpmap]: https://en.wikipedia.org/wiki/Bump_mapping","source":"_posts/mf3gpacg_1.md","raw":"---\ntitle: Mathematics.for.3D.Game.Programming.and.Computer.Graphics阅读笔记(一)\ndate: 2017-08-24 14:08:28\ntags: OpenGL, 图形学\n---\n## 第一章: 渲染管线\n\n### 写在前面的话: \n> 本文基本等同于翻译(加上自己的理解), 笔者英语水平有限, 难免会出现错误, 望高手在评论中指出, 谢谢!\n> 原书: [Mathematics for 3D Game Programming and Computer Graphics, Third Edition][1_booksite] \n\n### 一. 渲染管线\n#### 1.1 图形处理器\n一个3D图形场景通常包含了很多独立的对象.这些对象的几何形式通常是由一些特定类型的`图元`组成的.`图元`指的是顶点以怎样的方式连接构成了这种形状. 图1.1列出了 OpenGL图形库定义了10种图元. 图形硬件可以渲染一系列独立的点, 一些线段, 或者一组已经填充好了的多边形. 在大多数情况下, 3D模型的表面是由一些\u001b三角形构成的, 每一个三角形又是由顶点列表中的3个顶点组成.\n> ![图1.1, 来自原书截图](/img/201708/2017-08-24 .png)\n\n现代的3D图形\b卡通常会执行从CPU发出的一些指令, CPU想GPU发出渲染命令, 然后CPU会执行其他的任务, 而GPU会执行这些渲染操作. 这通常被称为***异步操作***. 当需要被渲染的图形信息被提交到渲染库(OpenGL等)的时候, 请求渲染操作的函数将会在渲染操作还未完成前很早就返回. 这些在一个渲染命令的子操作和渲染完成之间的滞后时间将不会产生什么问题, 但是在渲染完成的时刻是需要知道的. 幸运的是, 目前OpenGL的一些扩展可程序以在CPU中运行, 这些程序能够在GPU完成渲染的时候发出通知.但同时会带来性能损耗, 这种异步操作会拖慢3D图形程序的执行速度, 因此, 如果想要性能优先, 那么应该避免这些操作.\n\n那么应用程序和GPU的通信是怎么来进行呢? 通常是通过一些第三方的图形库来实现的, 比如OpenGL. 这些应用将会通过调用OpenGL API方式来向其发出渲染命令. 而OpenGL等图形库又向GPU驱动程序发送渲染命令, 这些驱动程序才知道怎样和GPU交流. OpenGL的这些接口我们称之为***Hardware Abstraction Layer(HAL) 硬件抽象层***, 因为它提供了一些通用的函数可以用来渲染场景, 这些函数可以在任何支持OpenGL架构的图形硬件上运行. 驱动程序将会把这些OpenGL的API转换成GPU可以执行的命令. 3D图形驱动程序通常会直接实现OpenGL函数以最小化渲染命令的开销. ***图1.2*** 展示了CPU和GPU之间的通信过程:\n>![图1.2 CPU和GPU之间的通信(来自原书截图)](/img/201708/2017-08-24 3.48.18.png)\n\n一个3D图形卡有自己的存储空间(显存), 通常被称为***VRAM (Video Random Access Memory)***. GPU可以在VRAM中存储任何东西, 当时在3D应用程序运行的时候, 有这么几类数据大多数总可以在显存中找到. VRAM中有两个图像缓冲区, 被称为前缓冲和后缓冲 (传说中的[***双缓冲***][2_double_swap]). 其中, `front image buffers` 包含了当前在可视区域内看到的每一个像素的数据. *可视区域* 指的就是包含了已经被渲染的图象数据的一个区域, 他可能是一个窗口, 也可能是整个屏幕; `back image buffer`是GPU真正渲染的场景的位置. `back buffer` 在渲染完成呈现给用户之前是不可见的. 一旦一个图像完成了渲染, `back buffer` 和 `front buffer` 将会交换数据. 这个操作被称为`缓冲交换`. 他可以通过以下几种方式来实现:\n> 1. 直接交换两个缓冲区的内存地址\n> 2. 将`back buffer`中的数据拷贝到`fornt buffer`中\n\n缓冲区交换通常和图像显示刷新率保持同步, 这是为了避免发生`画面撕裂现象`. `画面撕裂`通常由于在刷新期间发生了缓冲区交换, 这将会导致一副图像的上半部分和下半部分不同, 因为他们的数据分别来自`front buffer`和`back buffer`.\n\n还有一块存储在VRAM中的数据块被称为`Depth-buffer`或者`z-buffer`. `深度缓冲`存储的数据是图像缓冲中的每一个像素数据的`depth`,`depth`表明这个像素距离屏幕有多远或者这个像素位于图像中的哪个深度. `深度缓冲`通常用来隐藏或表面消除的功能, 它只绘制深度小于图像缓冲去深度的像素. `Depth`同时也表明了从被绘制的场景到虚拟相机(充当人眼的那个位置)的距离. 而`z-buffer`这个名字来自于相机的Z轴, 它是从相机的坐标空间射向屏幕的方向.\n随着`image buffer`和`depth buffer`的创建, 应用程序可能会请求`stencil buffer(模板缓冲区)`. `stencil buffer`包含了一个整型的遮罩, 这和`image buffer`中的每一个像素都是一一对应的, 他可以用来控制特定的像素是否被绘制. 更高级的`stencil buffer`可以用来产生实时阴影.\n大多数3D渲染应用程序中使用VRAM主要通过`Texture maps(纹理贴图)`, `texture maps`通常被用来附着到物体的表面以达到更好的视觉细节. 在高级渲染程序中, `texture maps`通常包含了比简单像素图像更多的信息. 例如: 一个[`bump map(凹凸贴图)`][3_bumpmap]包含的信息是一个个的向量, 这些向量表明了物体表面对应位置的倾斜程度. \n\n#### 1.2 向量变换\n\n几何数据以3维空间的形式传给了图形硬件. 接下来图形硬件需要做的就是就是将这些数据转换到2维空间的视口内. 在`rendering pipeline(渲染管线)` 过程中有很多与之相关联的坐标系统, 他们之间的转换过程如`图1.3`. 一个3D 模型的顶点通常存储在对象的`object space(模型坐标空间)`内, 这个坐标系统取决于特定的模型.每一个模型的位置通常被存储在`word space(世界坐标空间)`中, 这个坐标空间将所有的对象连接到一个全局的坐标空间中. 在每一个对象被渲染之前, 它的顶点必须被转换到`camera space(相机空间)`中, 这个坐标空间的x和y轴适合显示区域的x和y平行的. 模型的顶点是可以直接从`模型空间`转换到`相机空间`的,具体做法就是通过矩阵乘法将 `模型坐标`->`世界坐标`的变换矩阵M<sub>obj-word</sub> 和 `世界坐标`->`相机坐标`的变换矩阵M<sub>word-camera</sub> 连接起来,得到M<sub>obj-camera</sub>称之为 `model-view`变换.\n一旦模型的顶点被转换到了`相机空间`,他们会经历一个投影变换, 这个变换将会达到人眼视觉系统近大远小的视觉效果. 这个投影是通过四维空间其次坐标来完成的, 在这些顶点完成投影后的坐标空间被称为`homogeneous clip space(齐次裁剪空间)`, 之所以这么叫它, 是因为在这个坐标空间,图元会被裁剪在可视区域内,确保落在可视区域外面的图元不会被渲染.\n> ![图1.3(来自原书截图)](/img/201708/2017-08-24 5.29.50.png)\n\n在齐次坐标空间中, 每个顶点的坐标称为`normalized device coordinates(规格化设备坐标, 简称NDC)`, 这里出现了一个新的术语`normalized(规格化或标准化)`, 它的意思其实就是将每个顶点的x,y,z分量映射到[-1,1]区间内, 它表示顶点最终出现在`视口`中的位置. 顶点还要经历再一次的变换`viewport transformation(视口变换)`, 这个变换的结果其实就是最终顶点呈现在屏幕上的位置, `z分量`通常会被映射到[-1,1]区间内, 但是随后它会被缩放到深度缓冲所使用的每一个像素位对应的整型范围.最后, 顶点呈现在了我们的屏幕上.\n除了从`模型空间`转换到`屏幕空间`外, 图形处理器还会针对每一个顶点做一些运算.例如: OpenGL的光照模型将会计算到达每一个顶点的光照强度的该顶点反射颜色以及最终会有多少颜色会被反射进入人眼(相机的位置). 这中运算被称为`per-vertex lighting(逐顶点光照)`. 一些高级的3D程序会使用逐顶点光照处理, 这将会在物体表面产生很细腻的光照表现(像素级别的).\n每一个顶点还会携带一个甚至更多的`texture coordinates(纹理坐标)`. 通常情况下, `纹理坐标`是由应用程序明确指定的或者是GPU自动生成的. 图元在渲染的时候, 将会根据`纹理坐标`从对应的纹理中查询到对应的颜色值插入到图元对应的位置. 这些颜色和其他在每个像素被插入的颜色将会决定最终在视口中的显示效果.\n\n#### 1.3 光栅化和片元操作\n\n一旦模型的顶点完成了坐标转换最终呈现在了屏幕中, GPU必须决定这些在视口中的像素应该用什么样的图元来呈现. 水平扫描固定间隔的像素填充图元的处理过程叫做`raserization(光栅化)`. GPU计算每一个像素的深度, 插入顶点颜色和纹理坐标. 这些信息和像素本身的位置结合起来叫做`fragment(片元)`.\n图元到片元的转换如`图1.4`. 应用程序必须在这个过程的第一阶段决定是否进行`face culling(表面剔除)`.`表面剔除`只会对多边形图元生效, 它会移除背对着相机或者面对着相机的多边形图元. 但是大多数情况下,`表面剔除`被用来优化性能, 因为它会去除背对着相机的多边形, 这些不需要被渲染, 因为我们看不到它.\n> ![图1.4(来自原书截图)](/img/201708/2017-08-25 11.28.13.png)\n\n图形应用程序指定片元数据在光栅化过程中怎样来确实每一个像素的最终颜色和深度. 这个过程叫做`fragment shading 或者 pixel shading(片元着色)`. 最终的颜可可能是从纹理获取来的颜色和顶点插入的颜色的成绩, 也可能是复杂的逐顶点光照的结果. 最终的深度通常不会变化, 但是一些高级的3D图形硬件允许我们来按照自己的意愿替换最终计算的深度值. `图1.5`展示了在光栅化过程中每一个片元产生所执行的操作. 大部分操作都会决定一个图元最终绘制到屏幕上或者被丢弃. 从逻辑上来讲,虽然这些操作会在`片元着色`之后再进行, 但大多数GPU会在执行`片元着色`前进行一些测试, 这些测试能够带来一些性能和时间上的优势: 有一些最终根本不会被显示到屏幕上的图元将不会通过测试, 这就节省了不必要的性能开销和时间开销.\n> ![图1.5(来自原书截图)](/img/201708/2017-08-25 2.19.10.png)\n\n\n\n\n\n\n\n[1_booksite]: http://www.mathfor3dgameprogramming.com/\n[2_double_swap]: https://baike.baidu.com/item/%E5%8F%8C%E7%BC%93%E5%86%B2/10953356?fr=aladdin\n[3_bumpmap]: https://en.wikipedia.org/wiki/Bump_mapping","slug":"mf3gpacg_1","published":1,"updated":"2018-02-09T11:43:09.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdhfo5yl000aa4dk15pc5xht","content":"<h2 id=\"第一章-渲染管线\"><a href=\"#第一章-渲染管线\" class=\"headerlink\" title=\"第一章: 渲染管线\"></a>第一章: 渲染管线</h2><h3 id=\"写在前面的话\"><a href=\"#写在前面的话\" class=\"headerlink\" title=\"写在前面的话:\"></a>写在前面的话:</h3><blockquote>\n<p>本文基本等同于翻译(加上自己的理解), 笔者英语水平有限, 难免会出现错误, 望高手在评论中指出, 谢谢!<br>原书: <a href=\"http://www.mathfor3dgameprogramming.com/\" target=\"_blank\" rel=\"noopener\">Mathematics for 3D Game Programming and Computer Graphics, Third Edition</a> </p>\n</blockquote>\n<h3 id=\"一-渲染管线\"><a href=\"#一-渲染管线\" class=\"headerlink\" title=\"一. 渲染管线\"></a>一. 渲染管线</h3><h4 id=\"1-1-图形处理器\"><a href=\"#1-1-图形处理器\" class=\"headerlink\" title=\"1.1 图形处理器\"></a>1.1 图形处理器</h4><p>一个3D图形场景通常包含了很多独立的对象.这些对象的几何形式通常是由一些特定类型的<code>图元</code>组成的.<code>图元</code>指的是顶点以怎样的方式连接构成了这种形状. 图1.1列出了 OpenGL图形库定义了10种图元. 图形硬件可以渲染一系列独立的点, 一些线段, 或者一组已经填充好了的多边形. 在大多数情况下, 3D模型的表面是由一些\u001b三角形构成的, 每一个三角形又是由顶点列表中的3个顶点组成.</p>\n<blockquote>\n<p><img src=\"/img/201708/2017-08-24 .png\" alt=\"图1.1, 来自原书截图\"></p>\n</blockquote>\n<p>现代的3D图形\b卡通常会执行从CPU发出的一些指令, CPU想GPU发出渲染命令, 然后CPU会执行其他的任务, 而GPU会执行这些渲染操作. 这通常被称为<strong><em>异步操作</em></strong>. 当需要被渲染的图形信息被提交到渲染库(OpenGL等)的时候, 请求渲染操作的函数将会在渲染操作还未完成前很早就返回. 这些在一个渲染命令的子操作和渲染完成之间的滞后时间将不会产生什么问题, 但是在渲染完成的时刻是需要知道的. 幸运的是, 目前OpenGL的一些扩展可程序以在CPU中运行, 这些程序能够在GPU完成渲染的时候发出通知.但同时会带来性能损耗, 这种异步操作会拖慢3D图形程序的执行速度, 因此, 如果想要性能优先, 那么应该避免这些操作.</p>\n<p>那么应用程序和GPU的通信是怎么来进行呢? 通常是通过一些第三方的图形库来实现的, 比如OpenGL. 这些应用将会通过调用OpenGL API方式来向其发出渲染命令. 而OpenGL等图形库又向GPU驱动程序发送渲染命令, 这些驱动程序才知道怎样和GPU交流. OpenGL的这些接口我们称之为<strong><em>Hardware Abstraction Layer(HAL) 硬件抽象层</em></strong>, 因为它提供了一些通用的函数可以用来渲染场景, 这些函数可以在任何支持OpenGL架构的图形硬件上运行. 驱动程序将会把这些OpenGL的API转换成GPU可以执行的命令. 3D图形驱动程序通常会直接实现OpenGL函数以最小化渲染命令的开销. <strong><em>图1.2</em></strong> 展示了CPU和GPU之间的通信过程:</p>\n<blockquote>\n<p><img src=\"/img/201708/2017-08-24 3.48.18.png\" alt=\"图1.2 CPU和GPU之间的通信(来自原书截图)\"></p>\n</blockquote>\n<p>一个3D图形卡有自己的存储空间(显存), 通常被称为<strong><em>VRAM (Video Random Access Memory)</em></strong>. GPU可以在VRAM中存储任何东西, 当时在3D应用程序运行的时候, 有这么几类数据大多数总可以在显存中找到. VRAM中有两个图像缓冲区, 被称为前缓冲和后缓冲 (传说中的<a href=\"https://baike.baidu.com/item/%E5%8F%8C%E7%BC%93%E5%86%B2/10953356?fr=aladdin\" target=\"_blank\" rel=\"noopener\"><strong><em>双缓冲</em></strong></a>). 其中, <code>front image buffers</code> 包含了当前在可视区域内看到的每一个像素的数据. <em>可视区域</em> 指的就是包含了已经被渲染的图象数据的一个区域, 他可能是一个窗口, 也可能是整个屏幕; <code>back image buffer</code>是GPU真正渲染的场景的位置. <code>back buffer</code> 在渲染完成呈现给用户之前是不可见的. 一旦一个图像完成了渲染, <code>back buffer</code> 和 <code>front buffer</code> 将会交换数据. 这个操作被称为<code>缓冲交换</code>. 他可以通过以下几种方式来实现:</p>\n<blockquote>\n<ol>\n<li>直接交换两个缓冲区的内存地址</li>\n<li>将<code>back buffer</code>中的数据拷贝到<code>fornt buffer</code>中</li>\n</ol>\n</blockquote>\n<p>缓冲区交换通常和图像显示刷新率保持同步, 这是为了避免发生<code>画面撕裂现象</code>. <code>画面撕裂</code>通常由于在刷新期间发生了缓冲区交换, 这将会导致一副图像的上半部分和下半部分不同, 因为他们的数据分别来自<code>front buffer</code>和<code>back buffer</code>.</p>\n<p>还有一块存储在VRAM中的数据块被称为<code>Depth-buffer</code>或者<code>z-buffer</code>. <code>深度缓冲</code>存储的数据是图像缓冲中的每一个像素数据的<code>depth</code>,<code>depth</code>表明这个像素距离屏幕有多远或者这个像素位于图像中的哪个深度. <code>深度缓冲</code>通常用来隐藏或表面消除的功能, 它只绘制深度小于图像缓冲去深度的像素. <code>Depth</code>同时也表明了从被绘制的场景到虚拟相机(充当人眼的那个位置)的距离. 而<code>z-buffer</code>这个名字来自于相机的Z轴, 它是从相机的坐标空间射向屏幕的方向.<br>随着<code>image buffer</code>和<code>depth buffer</code>的创建, 应用程序可能会请求<code>stencil buffer(模板缓冲区)</code>. <code>stencil buffer</code>包含了一个整型的遮罩, 这和<code>image buffer</code>中的每一个像素都是一一对应的, 他可以用来控制特定的像素是否被绘制. 更高级的<code>stencil buffer</code>可以用来产生实时阴影.<br>大多数3D渲染应用程序中使用VRAM主要通过<code>Texture maps(纹理贴图)</code>, <code>texture maps</code>通常被用来附着到物体的表面以达到更好的视觉细节. 在高级渲染程序中, <code>texture maps</code>通常包含了比简单像素图像更多的信息. 例如: 一个<a href=\"https://en.wikipedia.org/wiki/Bump_mapping\" target=\"_blank\" rel=\"noopener\"><code>bump map(凹凸贴图)</code></a>包含的信息是一个个的向量, 这些向量表明了物体表面对应位置的倾斜程度. </p>\n<h4 id=\"1-2-向量变换\"><a href=\"#1-2-向量变换\" class=\"headerlink\" title=\"1.2 向量变换\"></a>1.2 向量变换</h4><p>几何数据以3维空间的形式传给了图形硬件. 接下来图形硬件需要做的就是就是将这些数据转换到2维空间的视口内. 在<code>rendering pipeline(渲染管线)</code> 过程中有很多与之相关联的坐标系统, 他们之间的转换过程如<code>图1.3</code>. 一个3D 模型的顶点通常存储在对象的<code>object space(模型坐标空间)</code>内, 这个坐标系统取决于特定的模型.每一个模型的位置通常被存储在<code>word space(世界坐标空间)</code>中, 这个坐标空间将所有的对象连接到一个全局的坐标空间中. 在每一个对象被渲染之前, 它的顶点必须被转换到<code>camera space(相机空间)</code>中, 这个坐标空间的x和y轴适合显示区域的x和y平行的. 模型的顶点是可以直接从<code>模型空间</code>转换到<code>相机空间</code>的,具体做法就是通过矩阵乘法将 <code>模型坐标</code>-&gt;<code>世界坐标</code>的变换矩阵M<sub>obj-word</sub> 和 <code>世界坐标</code>-&gt;<code>相机坐标</code>的变换矩阵M<sub>word-camera</sub> 连接起来,得到M<sub>obj-camera</sub>称之为 <code>model-view</code>变换.<br>一旦模型的顶点被转换到了<code>相机空间</code>,他们会经历一个投影变换, 这个变换将会达到人眼视觉系统近大远小的视觉效果. 这个投影是通过四维空间其次坐标来完成的, 在这些顶点完成投影后的坐标空间被称为<code>homogeneous clip space(齐次裁剪空间)</code>, 之所以这么叫它, 是因为在这个坐标空间,图元会被裁剪在可视区域内,确保落在可视区域外面的图元不会被渲染.</p>\n<blockquote>\n<p><img src=\"/img/201708/2017-08-24 5.29.50.png\" alt=\"图1.3(来自原书截图)\"></p>\n</blockquote>\n<p>在齐次坐标空间中, 每个顶点的坐标称为<code>normalized device coordinates(规格化设备坐标, 简称NDC)</code>, 这里出现了一个新的术语<code>normalized(规格化或标准化)</code>, 它的意思其实就是将每个顶点的x,y,z分量映射到[-1,1]区间内, 它表示顶点最终出现在<code>视口</code>中的位置. 顶点还要经历再一次的变换<code>viewport transformation(视口变换)</code>, 这个变换的结果其实就是最终顶点呈现在屏幕上的位置, <code>z分量</code>通常会被映射到[-1,1]区间内, 但是随后它会被缩放到深度缓冲所使用的每一个像素位对应的整型范围.最后, 顶点呈现在了我们的屏幕上.<br>除了从<code>模型空间</code>转换到<code>屏幕空间</code>外, 图形处理器还会针对每一个顶点做一些运算.例如: OpenGL的光照模型将会计算到达每一个顶点的光照强度的该顶点反射颜色以及最终会有多少颜色会被反射进入人眼(相机的位置). 这中运算被称为<code>per-vertex lighting(逐顶点光照)</code>. 一些高级的3D程序会使用逐顶点光照处理, 这将会在物体表面产生很细腻的光照表现(像素级别的).<br>每一个顶点还会携带一个甚至更多的<code>texture coordinates(纹理坐标)</code>. 通常情况下, <code>纹理坐标</code>是由应用程序明确指定的或者是GPU自动生成的. 图元在渲染的时候, 将会根据<code>纹理坐标</code>从对应的纹理中查询到对应的颜色值插入到图元对应的位置. 这些颜色和其他在每个像素被插入的颜色将会决定最终在视口中的显示效果.</p>\n<h4 id=\"1-3-光栅化和片元操作\"><a href=\"#1-3-光栅化和片元操作\" class=\"headerlink\" title=\"1.3 光栅化和片元操作\"></a>1.3 光栅化和片元操作</h4><p>一旦模型的顶点完成了坐标转换最终呈现在了屏幕中, GPU必须决定这些在视口中的像素应该用什么样的图元来呈现. 水平扫描固定间隔的像素填充图元的处理过程叫做<code>raserization(光栅化)</code>. GPU计算每一个像素的深度, 插入顶点颜色和纹理坐标. 这些信息和像素本身的位置结合起来叫做<code>fragment(片元)</code>.<br>图元到片元的转换如<code>图1.4</code>. 应用程序必须在这个过程的第一阶段决定是否进行<code>face culling(表面剔除)</code>.<code>表面剔除</code>只会对多边形图元生效, 它会移除背对着相机或者面对着相机的多边形图元. 但是大多数情况下,<code>表面剔除</code>被用来优化性能, 因为它会去除背对着相机的多边形, 这些不需要被渲染, 因为我们看不到它.</p>\n<blockquote>\n<p><img src=\"/img/201708/2017-08-25 11.28.13.png\" alt=\"图1.4(来自原书截图)\"></p>\n</blockquote>\n<p>图形应用程序指定片元数据在光栅化过程中怎样来确实每一个像素的最终颜色和深度. 这个过程叫做<code>fragment shading 或者 pixel shading(片元着色)</code>. 最终的颜可可能是从纹理获取来的颜色和顶点插入的颜色的成绩, 也可能是复杂的逐顶点光照的结果. 最终的深度通常不会变化, 但是一些高级的3D图形硬件允许我们来按照自己的意愿替换最终计算的深度值. <code>图1.5</code>展示了在光栅化过程中每一个片元产生所执行的操作. 大部分操作都会决定一个图元最终绘制到屏幕上或者被丢弃. 从逻辑上来讲,虽然这些操作会在<code>片元着色</code>之后再进行, 但大多数GPU会在执行<code>片元着色</code>前进行一些测试, 这些测试能够带来一些性能和时间上的优势: 有一些最终根本不会被显示到屏幕上的图元将不会通过测试, 这就节省了不必要的性能开销和时间开销.</p>\n<blockquote>\n<p><img src=\"/img/201708/2017-08-25 2.19.10.png\" alt=\"图1.5(来自原书截图)\"></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"第一章-渲染管线\"><a href=\"#第一章-渲染管线\" class=\"headerlink\" title=\"第一章: 渲染管线\"></a>第一章: 渲染管线</h2><h3 id=\"写在前面的话\"><a href=\"#写在前面的话\" class=\"headerlink\" title=\"写在前面的话:\"></a>写在前面的话:</h3><blockquote>\n<p>本文基本等同于翻译(加上自己的理解), 笔者英语水平有限, 难免会出现错误, 望高手在评论中指出, 谢谢!<br>原书: <a href=\"http://www.mathfor3dgameprogramming.com/\" target=\"_blank\" rel=\"noopener\">Mathematics for 3D Game Programming and Computer Graphics, Third Edition</a> </p>\n</blockquote>\n<h3 id=\"一-渲染管线\"><a href=\"#一-渲染管线\" class=\"headerlink\" title=\"一. 渲染管线\"></a>一. 渲染管线</h3><h4 id=\"1-1-图形处理器\"><a href=\"#1-1-图形处理器\" class=\"headerlink\" title=\"1.1 图形处理器\"></a>1.1 图形处理器</h4><p>一个3D图形场景通常包含了很多独立的对象.这些对象的几何形式通常是由一些特定类型的<code>图元</code>组成的.<code>图元</code>指的是顶点以怎样的方式连接构成了这种形状. 图1.1列出了 OpenGL图形库定义了10种图元. 图形硬件可以渲染一系列独立的点, 一些线段, 或者一组已经填充好了的多边形. 在大多数情况下, 3D模型的表面是由一些\u001b三角形构成的, 每一个三角形又是由顶点列表中的3个顶点组成.</p>\n<blockquote>\n<p><img src=\"/img/201708/2017-08-24 .png\" alt=\"图1.1, 来自原书截图\"></p>\n</blockquote>\n<p>现代的3D图形\b卡通常会执行从CPU发出的一些指令, CPU想GPU发出渲染命令, 然后CPU会执行其他的任务, 而GPU会执行这些渲染操作. 这通常被称为<strong><em>异步操作</em></strong>. 当需要被渲染的图形信息被提交到渲染库(OpenGL等)的时候, 请求渲染操作的函数将会在渲染操作还未完成前很早就返回. 这些在一个渲染命令的子操作和渲染完成之间的滞后时间将不会产生什么问题, 但是在渲染完成的时刻是需要知道的. 幸运的是, 目前OpenGL的一些扩展可程序以在CPU中运行, 这些程序能够在GPU完成渲染的时候发出通知.但同时会带来性能损耗, 这种异步操作会拖慢3D图形程序的执行速度, 因此, 如果想要性能优先, 那么应该避免这些操作.</p>\n<p>那么应用程序和GPU的通信是怎么来进行呢? 通常是通过一些第三方的图形库来实现的, 比如OpenGL. 这些应用将会通过调用OpenGL API方式来向其发出渲染命令. 而OpenGL等图形库又向GPU驱动程序发送渲染命令, 这些驱动程序才知道怎样和GPU交流. OpenGL的这些接口我们称之为<strong><em>Hardware Abstraction Layer(HAL) 硬件抽象层</em></strong>, 因为它提供了一些通用的函数可以用来渲染场景, 这些函数可以在任何支持OpenGL架构的图形硬件上运行. 驱动程序将会把这些OpenGL的API转换成GPU可以执行的命令. 3D图形驱动程序通常会直接实现OpenGL函数以最小化渲染命令的开销. <strong><em>图1.2</em></strong> 展示了CPU和GPU之间的通信过程:</p>\n<blockquote>\n<p><img src=\"/img/201708/2017-08-24 3.48.18.png\" alt=\"图1.2 CPU和GPU之间的通信(来自原书截图)\"></p>\n</blockquote>\n<p>一个3D图形卡有自己的存储空间(显存), 通常被称为<strong><em>VRAM (Video Random Access Memory)</em></strong>. GPU可以在VRAM中存储任何东西, 当时在3D应用程序运行的时候, 有这么几类数据大多数总可以在显存中找到. VRAM中有两个图像缓冲区, 被称为前缓冲和后缓冲 (传说中的<a href=\"https://baike.baidu.com/item/%E5%8F%8C%E7%BC%93%E5%86%B2/10953356?fr=aladdin\" target=\"_blank\" rel=\"noopener\"><strong><em>双缓冲</em></strong></a>). 其中, <code>front image buffers</code> 包含了当前在可视区域内看到的每一个像素的数据. <em>可视区域</em> 指的就是包含了已经被渲染的图象数据的一个区域, 他可能是一个窗口, 也可能是整个屏幕; <code>back image buffer</code>是GPU真正渲染的场景的位置. <code>back buffer</code> 在渲染完成呈现给用户之前是不可见的. 一旦一个图像完成了渲染, <code>back buffer</code> 和 <code>front buffer</code> 将会交换数据. 这个操作被称为<code>缓冲交换</code>. 他可以通过以下几种方式来实现:</p>\n<blockquote>\n<ol>\n<li>直接交换两个缓冲区的内存地址</li>\n<li>将<code>back buffer</code>中的数据拷贝到<code>fornt buffer</code>中</li>\n</ol>\n</blockquote>\n<p>缓冲区交换通常和图像显示刷新率保持同步, 这是为了避免发生<code>画面撕裂现象</code>. <code>画面撕裂</code>通常由于在刷新期间发生了缓冲区交换, 这将会导致一副图像的上半部分和下半部分不同, 因为他们的数据分别来自<code>front buffer</code>和<code>back buffer</code>.</p>\n<p>还有一块存储在VRAM中的数据块被称为<code>Depth-buffer</code>或者<code>z-buffer</code>. <code>深度缓冲</code>存储的数据是图像缓冲中的每一个像素数据的<code>depth</code>,<code>depth</code>表明这个像素距离屏幕有多远或者这个像素位于图像中的哪个深度. <code>深度缓冲</code>通常用来隐藏或表面消除的功能, 它只绘制深度小于图像缓冲去深度的像素. <code>Depth</code>同时也表明了从被绘制的场景到虚拟相机(充当人眼的那个位置)的距离. 而<code>z-buffer</code>这个名字来自于相机的Z轴, 它是从相机的坐标空间射向屏幕的方向.<br>随着<code>image buffer</code>和<code>depth buffer</code>的创建, 应用程序可能会请求<code>stencil buffer(模板缓冲区)</code>. <code>stencil buffer</code>包含了一个整型的遮罩, 这和<code>image buffer</code>中的每一个像素都是一一对应的, 他可以用来控制特定的像素是否被绘制. 更高级的<code>stencil buffer</code>可以用来产生实时阴影.<br>大多数3D渲染应用程序中使用VRAM主要通过<code>Texture maps(纹理贴图)</code>, <code>texture maps</code>通常被用来附着到物体的表面以达到更好的视觉细节. 在高级渲染程序中, <code>texture maps</code>通常包含了比简单像素图像更多的信息. 例如: 一个<a href=\"https://en.wikipedia.org/wiki/Bump_mapping\" target=\"_blank\" rel=\"noopener\"><code>bump map(凹凸贴图)</code></a>包含的信息是一个个的向量, 这些向量表明了物体表面对应位置的倾斜程度. </p>\n<h4 id=\"1-2-向量变换\"><a href=\"#1-2-向量变换\" class=\"headerlink\" title=\"1.2 向量变换\"></a>1.2 向量变换</h4><p>几何数据以3维空间的形式传给了图形硬件. 接下来图形硬件需要做的就是就是将这些数据转换到2维空间的视口内. 在<code>rendering pipeline(渲染管线)</code> 过程中有很多与之相关联的坐标系统, 他们之间的转换过程如<code>图1.3</code>. 一个3D 模型的顶点通常存储在对象的<code>object space(模型坐标空间)</code>内, 这个坐标系统取决于特定的模型.每一个模型的位置通常被存储在<code>word space(世界坐标空间)</code>中, 这个坐标空间将所有的对象连接到一个全局的坐标空间中. 在每一个对象被渲染之前, 它的顶点必须被转换到<code>camera space(相机空间)</code>中, 这个坐标空间的x和y轴适合显示区域的x和y平行的. 模型的顶点是可以直接从<code>模型空间</code>转换到<code>相机空间</code>的,具体做法就是通过矩阵乘法将 <code>模型坐标</code>-&gt;<code>世界坐标</code>的变换矩阵M<sub>obj-word</sub> 和 <code>世界坐标</code>-&gt;<code>相机坐标</code>的变换矩阵M<sub>word-camera</sub> 连接起来,得到M<sub>obj-camera</sub>称之为 <code>model-view</code>变换.<br>一旦模型的顶点被转换到了<code>相机空间</code>,他们会经历一个投影变换, 这个变换将会达到人眼视觉系统近大远小的视觉效果. 这个投影是通过四维空间其次坐标来完成的, 在这些顶点完成投影后的坐标空间被称为<code>homogeneous clip space(齐次裁剪空间)</code>, 之所以这么叫它, 是因为在这个坐标空间,图元会被裁剪在可视区域内,确保落在可视区域外面的图元不会被渲染.</p>\n<blockquote>\n<p><img src=\"/img/201708/2017-08-24 5.29.50.png\" alt=\"图1.3(来自原书截图)\"></p>\n</blockquote>\n<p>在齐次坐标空间中, 每个顶点的坐标称为<code>normalized device coordinates(规格化设备坐标, 简称NDC)</code>, 这里出现了一个新的术语<code>normalized(规格化或标准化)</code>, 它的意思其实就是将每个顶点的x,y,z分量映射到[-1,1]区间内, 它表示顶点最终出现在<code>视口</code>中的位置. 顶点还要经历再一次的变换<code>viewport transformation(视口变换)</code>, 这个变换的结果其实就是最终顶点呈现在屏幕上的位置, <code>z分量</code>通常会被映射到[-1,1]区间内, 但是随后它会被缩放到深度缓冲所使用的每一个像素位对应的整型范围.最后, 顶点呈现在了我们的屏幕上.<br>除了从<code>模型空间</code>转换到<code>屏幕空间</code>外, 图形处理器还会针对每一个顶点做一些运算.例如: OpenGL的光照模型将会计算到达每一个顶点的光照强度的该顶点反射颜色以及最终会有多少颜色会被反射进入人眼(相机的位置). 这中运算被称为<code>per-vertex lighting(逐顶点光照)</code>. 一些高级的3D程序会使用逐顶点光照处理, 这将会在物体表面产生很细腻的光照表现(像素级别的).<br>每一个顶点还会携带一个甚至更多的<code>texture coordinates(纹理坐标)</code>. 通常情况下, <code>纹理坐标</code>是由应用程序明确指定的或者是GPU自动生成的. 图元在渲染的时候, 将会根据<code>纹理坐标</code>从对应的纹理中查询到对应的颜色值插入到图元对应的位置. 这些颜色和其他在每个像素被插入的颜色将会决定最终在视口中的显示效果.</p>\n<h4 id=\"1-3-光栅化和片元操作\"><a href=\"#1-3-光栅化和片元操作\" class=\"headerlink\" title=\"1.3 光栅化和片元操作\"></a>1.3 光栅化和片元操作</h4><p>一旦模型的顶点完成了坐标转换最终呈现在了屏幕中, GPU必须决定这些在视口中的像素应该用什么样的图元来呈现. 水平扫描固定间隔的像素填充图元的处理过程叫做<code>raserization(光栅化)</code>. GPU计算每一个像素的深度, 插入顶点颜色和纹理坐标. 这些信息和像素本身的位置结合起来叫做<code>fragment(片元)</code>.<br>图元到片元的转换如<code>图1.4</code>. 应用程序必须在这个过程的第一阶段决定是否进行<code>face culling(表面剔除)</code>.<code>表面剔除</code>只会对多边形图元生效, 它会移除背对着相机或者面对着相机的多边形图元. 但是大多数情况下,<code>表面剔除</code>被用来优化性能, 因为它会去除背对着相机的多边形, 这些不需要被渲染, 因为我们看不到它.</p>\n<blockquote>\n<p><img src=\"/img/201708/2017-08-25 11.28.13.png\" alt=\"图1.4(来自原书截图)\"></p>\n</blockquote>\n<p>图形应用程序指定片元数据在光栅化过程中怎样来确实每一个像素的最终颜色和深度. 这个过程叫做<code>fragment shading 或者 pixel shading(片元着色)</code>. 最终的颜可可能是从纹理获取来的颜色和顶点插入的颜色的成绩, 也可能是复杂的逐顶点光照的结果. 最终的深度通常不会变化, 但是一些高级的3D图形硬件允许我们来按照自己的意愿替换最终计算的深度值. <code>图1.5</code>展示了在光栅化过程中每一个片元产生所执行的操作. 大部分操作都会决定一个图元最终绘制到屏幕上或者被丢弃. 从逻辑上来讲,虽然这些操作会在<code>片元着色</code>之后再进行, 但大多数GPU会在执行<code>片元着色</code>前进行一些测试, 这些测试能够带来一些性能和时间上的优势: 有一些最终根本不会被显示到屏幕上的图元将不会通过测试, 这就节省了不必要的性能开销和时间开销.</p>\n<blockquote>\n<p><img src=\"/img/201708/2017-08-25 2.19.10.png\" alt=\"图1.5(来自原书截图)\"></p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjdhfo5y80000a4dkdvqf7rl8","tag_id":"cjdhfo5ye0003a4dkthkzzwzg","_id":"cjdhfo5yj0008a4dkr2bnms0d"},{"post_id":"cjdhfo5yd0002a4dkm66ucksd","tag_id":"cjdhfo5yj0007a4dk9ain542l","_id":"cjdhfo5ym000ca4dkb7ew5u4m"},{"post_id":"cjdhfo5yg0004a4dkniep89l1","tag_id":"cjdhfo5yl000ba4dk2hj94i6a","_id":"cjdhfo5yo000ea4dkdf1ebkm6"},{"post_id":"cjdhfo5yh0005a4dkuf9qxpvz","tag_id":"cjdhfo5ym000da4dkw028nr9c","_id":"cjdhfo5yp000ga4dkcw1v6zlk"},{"post_id":"cjdhfo5yi0006a4dk7mo6ndni","tag_id":"cjdhfo5yl000ba4dk2hj94i6a","_id":"cjdhfo5yq000ia4dkc6fb24ig"},{"post_id":"cjdhfo5yl000aa4dk15pc5xht","tag_id":"cjdhfo5yl000ba4dk2hj94i6a","_id":"cjdhfo5yq000ja4dk29vznros"}],"Tag":[{"name":"杂项","_id":"cjdhfo5ye0003a4dkthkzzwzg"},{"name":"工具;版本管理","_id":"cjdhfo5yj0007a4dk9ain542l"},{"name":"OpenGL, 图形学","_id":"cjdhfo5yl000ba4dk2hj94i6a"},{"name":"Unity3D","_id":"cjdhfo5ym000da4dkw028nr9c"}]}}